[
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this stream and releases any system resources associated with it."
    },
    {
        "function": "readBoolean",
        "parameters": [
            ""
        ],
        "comments": "Reads one input byte and returns true if that byte is nonzero, false if that byte is zero."
    },
    {
        "function": "readByte",
        "parameters": [
            ""
        ],
        "comments": "Reads and returns one input byte."
    },
    {
        "function": "readChar",
        "parameters": [
            ""
        ],
        "comments": "Reads two input bytes and returns a char value."
    },
    {
        "function": "readDouble",
        "parameters": [
            ""
        ],
        "comments": "Reads eight input bytes and returns a double value."
    },
    {
        "function": "readFloat",
        "parameters": [
            ""
        ],
        "comments": "Reads four input bytes and returns a float value."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads some bytes from an input stream and stores them into the buffer array b."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads len bytes from an input stream."
    },
    {
        "function": "readInt",
        "parameters": [
            ""
        ],
        "comments": "Reads four input bytes and returns an int value."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Reads the next line of text from the input stream."
    },
    {
        "function": "readLong",
        "parameters": [
            ""
        ],
        "comments": "Reads eight input bytes and returns a long value."
    },
    {
        "function": "readShort",
        "parameters": [
            ""
        ],
        "comments": "Reads two input bytes and returns a short value."
    },
    {
        "function": "readUnsignedByte",
        "parameters": [
            ""
        ],
        "comments": "Reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255."
    },
    {
        "function": "readUnsignedShort",
        "parameters": [
            ""
        ],
        "comments": "Reads two input bytes and returns an int value in the range 0 through 65535."
    },
    {
        "function": "readUTF",
        "parameters": [
            ""
        ],
        "comments": "Reads in a string that has been encoded using a modified UTF-8 format."
    },
    {
        "function": "skipBytes",
        "parameters": [
            "int"
        ],
        "comments": "Makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Writes to the output stream all the bytes in array b."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Writes len bytes from array b, in order,  to the output stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes to the output stream the eight low-order bits of the argument b."
    },
    {
        "function": "writeBoolean",
        "parameters": [
            "boolean"
        ],
        "comments": "Writes a boolean value to this output stream."
    },
    {
        "function": "writeByte",
        "parameters": [
            "int"
        ],
        "comments": "Writes to the output stream the eight low- order bits of the argument v."
    },
    {
        "function": "writeBytes",
        "parameters": [
            "String"
        ],
        "comments": "Writes a string to the output stream."
    },
    {
        "function": "writeChar",
        "parameters": [
            "int"
        ],
        "comments": "Writes a char value, which is comprised of two bytes, to the output stream."
    },
    {
        "function": "writeChars",
        "parameters": [
            "String"
        ],
        "comments": "Writes every character in the string s, to the output stream, in order, two bytes per character."
    },
    {
        "function": "writeDouble",
        "parameters": [
            "double"
        ],
        "comments": "Writes a double value, which is comprised of eight bytes, to the output stream."
    },
    {
        "function": "writeFloat",
        "parameters": [
            "float"
        ],
        "comments": "Writes a float value, which is comprised of four bytes, to the output stream."
    },
    {
        "function": "writeInt",
        "parameters": [
            "int"
        ],
        "comments": "Writes an int value, which is comprised of four bytes, to the output stream."
    },
    {
        "function": "writeLong",
        "parameters": [
            "long"
        ],
        "comments": "Writes a long value, which is comprised of eight bytes, to the output stream."
    },
    {
        "function": "writeShort",
        "parameters": [
            "int"
        ],
        "comments": "Writes two bytes to the output stream to represent the value of the argument."
    },
    {
        "function": "writeUTF",
        "parameters": [
            "String"
        ],
        "comments": "Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of  every character in the string s."
    },
    {
        "function": "readExternal",
        "parameters": [
            "ObjectInput"
        ],
        "comments": "The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays."
    },
    {
        "function": "writeExternal",
        "parameters": [
            "ObjectOutput"
        ],
        "comments": "The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays."
    },
    {
        "function": "accept",
        "parameters": [
            "File"
        ],
        "comments": "Tests whether or not the specified abstract pathname should be included in a pathname list."
    },
    {
        "function": "accept",
        "parameters": [
            "File",
            "String"
        ],
        "comments": "Tests if a specified file should be included in a file list."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Flushes this stream by writing any buffered output to the underlying stream."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes that can be read without blocking."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes the input stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Reads a byte of data."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads into an array of bytes."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads into an array of bytes."
    },
    {
        "function": "readObject",
        "parameters": [
            ""
        ],
        "comments": "Read and return an object."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Skips n bytes of input."
    },
    {
        "function": "checkInput",
        "parameters": [
            "ObjectInputFilter.FilterInfo"
        ],
        "comments": "Check the class, array length, number of object references, depth, stream size, and other available filtering information."
    },
    {
        "function": "arrayLength",
        "parameters": [
            ""
        ],
        "comments": "The number of array elements when deserializing an array of the class."
    },
    {
        "function": "depth",
        "parameters": [
            ""
        ],
        "comments": "The current depth."
    },
    {
        "function": "references",
        "parameters": [
            ""
        ],
        "comments": "The current number of object references."
    },
    {
        "function": "serialClass",
        "parameters": [
            ""
        ],
        "comments": "The class of an object being deserialized."
    },
    {
        "function": "streamBytes",
        "parameters": [
            ""
        ],
        "comments": "The current number of bytes consumed."
    },
    {
        "function": "validateObject",
        "parameters": [
            ""
        ],
        "comments": "Validates the object."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Writes an array of bytes."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Writes a sub array of bytes."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes a byte."
    },
    {
        "function": "writeObject",
        "parameters": [
            "Object"
        ],
        "comments": "Write an object to the underlying storage or stream."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a BufferedInputStream and saves its  argument, the input stream in, for later use."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a BufferedInputStream with the specified buffer size, and saves its  argument, the input stream in, for later use."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the mark method of InputStream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Tests if this input stream supports the mark and reset methods."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the read method of InputStream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads bytes from this byte-input stream into the specified byte array, starting at the given offset."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new buffered output stream to write data to the specified underlying output stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Creates a new buffered output stream to write data to the specified underlying output stream with the specified buffer size."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Flushes this buffered output stream."
    },
    {
        "function": "lines",
        "parameters": [
            ""
        ],
        "comments": "Creates a buffering character-input stream that uses a default-sized input buffer."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a buffering character-input stream that uses an input buffer of the specified size."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Returns a Stream, the elements of which are lines read from this BufferedReader."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Tells whether this stream supports the mark() operation, which it does."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads a line of text."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a buffered character-output stream that uses a default-sized output buffer."
    },
    {
        "function": "newLine",
        "parameters": [
            ""
        ],
        "comments": "Creates a new buffered character-output stream that uses an output buffer of the given size."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes a line separator."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Writes a portion of an array of characters."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a ByteArrayInputStream so that it  uses buf as its buffer array."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates ByteArrayInputStream that uses buf as its buffer array."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of remaining bytes that can be read (or skipped over) from this input stream."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closing a ByteArrayInputStream has no effect."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Set the current marked position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Tests if this InputStream supports mark/reset."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads the next byte of data from this input stream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads up to len bytes of data into an array of bytes from this input stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ByteArrayOutputStream."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ByteArrayOutputStream, with a buffer capacity of the specified size, in bytes."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Closing a ByteArrayOutputStream has no effect."
    },
    {
        "function": "toByteArray",
        "parameters": [
            ""
        ],
        "comments": "Resets the count field of this ByteArrayOutputStream to zero, so that all currently accumulated output in the output stream is discarded."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the current size of the buffer."
    },
    {
        "function": "toString",
        "parameters": [
            "int"
        ],
        "comments": "Creates a newly allocated byte array."
    },
    {
        "function": "toString",
        "parameters": [
            "String"
        ],
        "comments": "Converts the buffer's contents into a string decoding bytes using the platform's default character set."
    },
    {
        "function": "toString",
        "parameters": [
            "Charset"
        ],
        "comments": "Deprecated.This method does not properly convert bytes into characters."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Converts the buffer's contents into a string by decoding the bytes using the named charset."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Converts the buffer's contents into a string by decoding the bytes using the specified charset."
    },
    {
        "function": "writeBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Writes len bytes from the specified byte array starting at offset off to this ByteArrayOutputStream."
    },
    {
        "function": "writeTo",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Writes the specified byte to this ByteArrayOutputStream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a CharArrayReader from the specified array of chars."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a CharArrayReader from the specified array of chars."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream and releases any system resources associated with it."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Tells whether this stream supports the mark() operation, which it does."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Creates a new CharArrayWriter."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a new CharArrayWriter with the specified initial size."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends the specified character to this writer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified character sequence to this writer."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Appends a subsequence of the specified character sequence to this writer."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Close the stream."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Flush the stream."
    },
    {
        "function": "toCharArray",
        "parameters": [
            ""
        ],
        "comments": "Resets the buffer so that you can use it again without throwing away the already allocated buffer."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the current size of the buffer."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns a copy of the input data."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Converts input data to a string."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Writes characters to the buffer."
    },
    {
        "function": "writeTo",
        "parameters": [
            "Writer"
        ],
        "comments": "Writes a character to the buffer."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Flushes the console and forces any buffered output to be written immediately ."
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Writes a formatted string to this console's output stream using the specified format string and arguments."
    },
    {
        "function": "printf",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "A convenience method to write a formatted string to this console's output stream using the specified format string and arguments."
    },
    {
        "function": "reader",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the unique Reader object associated with this console."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Reads a single line of text from the console."
    },
    {
        "function": "readLine",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Provides a formatted prompt, then reads a single line of text from the console."
    },
    {
        "function": "readPassword",
        "parameters": [
            ""
        ],
        "comments": "Reads a password or passphrase from the console with echoing disabled"
    },
    {
        "function": "readPassword",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled."
    },
    {
        "function": "writer",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the unique PrintWriter object associated with this console."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Creates a DataInputStream that uses the specified underlying InputStream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads some number of bytes from the contained input stream and stores them into the buffer array b."
    },
    {
        "function": "readBoolean",
        "parameters": [
            ""
        ],
        "comments": "Reads up to len bytes of data from the contained input stream into an array of bytes."
    },
    {
        "function": "readByte",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readBoolean method of DataInput."
    },
    {
        "function": "readChar",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readByte method of DataInput."
    },
    {
        "function": "readDouble",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readChar method of DataInput."
    },
    {
        "function": "readFloat",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readDouble method of DataInput."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]"
        ],
        "comments": "See the general contract of the readFloat method of DataInput."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "See the general contract of the readFully method of DataInput."
    },
    {
        "function": "readInt",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readFully method of DataInput."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readInt method of DataInput."
    },
    {
        "function": "readLong",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.This method does not properly convert bytes to characters."
    },
    {
        "function": "readShort",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readLong method of DataInput."
    },
    {
        "function": "readUnsignedByte",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readShort method of DataInput."
    },
    {
        "function": "readUnsignedShort",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readUnsignedByte method of DataInput."
    },
    {
        "function": "readUTF",
        "parameters": [
            ""
        ],
        "comments": "See the general contract of the readUnsignedShort method of DataInput."
    },
    {
        "function": "readUTF",
        "parameters": [
            "DataInput"
        ],
        "comments": "See the general contract of the readUTF method of DataInput."
    },
    {
        "function": "skipBytes",
        "parameters": [
            "int"
        ],
        "comments": "Reads from the stream in a representation of a Unicode  character string encoded in modified UTF-8 format; this string of characters is then returned as a String."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new data output stream to write data to the specified underlying output stream."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Flushes this data output stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the current value of the counter written, the number of bytes written to this data output stream so far."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes len bytes from the specified byte array starting at offset off to the underlying output stream."
    },
    {
        "function": "writeBoolean",
        "parameters": [
            "boolean"
        ],
        "comments": "Writes the specified byte (the low eight bits of the argument b) to the underlying output stream."
    },
    {
        "function": "writeByte",
        "parameters": [
            "int"
        ],
        "comments": "Writes a boolean to the underlying output stream as a 1-byte value."
    },
    {
        "function": "writeBytes",
        "parameters": [
            "String"
        ],
        "comments": "Writes out a byte to the underlying output stream as a 1-byte value."
    },
    {
        "function": "writeChar",
        "parameters": [
            "int"
        ],
        "comments": "Writes out the string to the underlying output stream as a sequence of bytes."
    },
    {
        "function": "writeChars",
        "parameters": [
            "String"
        ],
        "comments": "Writes a char to the underlying output stream as a 2-byte value, high byte first."
    },
    {
        "function": "writeDouble",
        "parameters": [
            "double"
        ],
        "comments": "Writes a string to the underlying output stream as a sequence of characters."
    },
    {
        "function": "writeFloat",
        "parameters": [
            "float"
        ],
        "comments": "Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first."
    },
    {
        "function": "writeInt",
        "parameters": [
            "int"
        ],
        "comments": "Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first."
    },
    {
        "function": "writeLong",
        "parameters": [
            "long"
        ],
        "comments": "Writes an int to the underlying output stream as four bytes, high byte first."
    },
    {
        "function": "writeShort",
        "parameters": [
            "int"
        ],
        "comments": "Writes a long to the underlying output stream as eight bytes, high byte first."
    },
    {
        "function": "writeUTF",
        "parameters": [
            "String"
        ],
        "comments": "Writes a short to the underlying output stream as two bytes, high byte first."
    },
    {
        "function": "canExecute",
        "parameters": [
            ""
        ],
        "comments": "Creates a new File instance from a parent abstract pathname and a child pathname string."
    },
    {
        "function": "canRead",
        "parameters": [
            ""
        ],
        "comments": "Creates a new File instance by converting the given pathname string into an abstract pathname."
    },
    {
        "function": "canWrite",
        "parameters": [
            ""
        ],
        "comments": "Creates a new File instance from a parent pathname string and a child pathname string."
    },
    {
        "function": "compareTo",
        "parameters": [
            "File"
        ],
        "comments": "Creates a new File instance by converting the given file: URI into an abstract pathname."
    },
    {
        "function": "createNewFile",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the application can execute the file denoted by this abstract pathname."
    },
    {
        "function": "createTempFile",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Tests whether the application can read the file denoted by this abstract pathname."
    },
    {
        "function": "createTempFile",
        "parameters": [
            "String",
            "String",
            "File"
        ],
        "comments": "Tests whether the application can modify the file denoted by this abstract pathname."
    },
    {
        "function": "delete",
        "parameters": [
            ""
        ],
        "comments": "Compares two abstract pathnames lexicographically."
    },
    {
        "function": "deleteOnExit",
        "parameters": [
            ""
        ],
        "comments": "Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
    },
    {
        "function": "exists",
        "parameters": [
            ""
        ],
        "comments": " Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
    },
    {
        "function": "getAbsoluteFile",
        "parameters": [
            ""
        ],
        "comments": "Deletes the file or directory denoted by this abstract pathname."
    },
    {
        "function": "getAbsolutePath",
        "parameters": [
            ""
        ],
        "comments": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates."
    },
    {
        "function": "getCanonicalFile",
        "parameters": [
            ""
        ],
        "comments": "Tests this abstract pathname for equality with the given object."
    },
    {
        "function": "getCanonicalPath",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the file or directory denoted by this abstract pathname exists."
    },
    {
        "function": "getFreeSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns the absolute form of this abstract pathname."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the absolute pathname string of this abstract pathname."
    },
    {
        "function": "getParent",
        "parameters": [
            ""
        ],
        "comments": "Returns the canonical form of this abstract pathname."
    },
    {
        "function": "getParentFile",
        "parameters": [
            ""
        ],
        "comments": "Returns the canonical pathname string of this abstract pathname."
    },
    {
        "function": "getPath",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of unallocated bytes in the partition named by this abstract path name."
    },
    {
        "function": "getTotalSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the file or directory denoted by this abstract pathname."
    },
    {
        "function": "getUsableSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory."
    },
    {
        "function": "isAbsolute",
        "parameters": [
            ""
        ],
        "comments": "Converts this abstract pathname into a pathname string."
    },
    {
        "function": "isDirectory",
        "parameters": [
            ""
        ],
        "comments": "Returns the size of the partition named by this abstract pathname."
    },
    {
        "function": "isFile",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname."
    },
    {
        "function": "isHidden",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this abstract pathname."
    },
    {
        "function": "lastModified",
        "parameters": [
            ""
        ],
        "comments": "Tests whether this abstract pathname is absolute."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the file denoted by this abstract pathname is a directory."
    },
    {
        "function": "list",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the file denoted by this abstract pathname is a normal file."
    },
    {
        "function": "list",
        "parameters": [
            "FilenameFilter"
        ],
        "comments": "Tests whether the file named by this abstract pathname is a hidden file."
    },
    {
        "function": "listFiles",
        "parameters": [
            ""
        ],
        "comments": "Returns the time that the file denoted by this abstract pathname was last modified."
    },
    {
        "function": "listFiles",
        "parameters": [
            "FileFilter"
        ],
        "comments": "Returns the length of the file denoted by this abstract pathname."
    },
    {
        "function": "listFiles",
        "parameters": [
            "FilenameFilter"
        ],
        "comments": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname."
    },
    {
        "function": "listRoots",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "function": "mkdir",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname."
    },
    {
        "function": "mkdirs",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "function": "renameTo",
        "parameters": [
            "File"
        ],
        "comments": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter."
    },
    {
        "function": "setExecutable",
        "parameters": [
            "boolean"
        ],
        "comments": "List the available filesystem roots."
    },
    {
        "function": "setExecutable",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Creates the directory named by this abstract pathname."
    },
    {
        "function": "setLastModified",
        "parameters": [
            "long"
        ],
        "comments": "Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories."
    },
    {
        "function": "setReadable",
        "parameters": [
            "boolean"
        ],
        "comments": "Renames the file denoted by this abstract pathname."
    },
    {
        "function": "setReadable",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "A convenience method to set the owner's execute permission for this abstract pathname."
    },
    {
        "function": "setReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Sets the owner's or everybody's execute permission for this abstract pathname."
    },
    {
        "function": "setWritable",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the last-modified time of the file or directory named by this abstract pathname."
    },
    {
        "function": "setWritable",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "A convenience method to set the owner's read permission for this abstract pathname."
    },
    {
        "function": "toPath",
        "parameters": [
            ""
        ],
        "comments": "Sets the owner's or everybody's read permission for this abstract pathname."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Marks the file or directory named by this abstract pathname so that only read operations are allowed."
    },
    {
        "function": "toURI",
        "parameters": [
            ""
        ],
        "comments": "A convenience method to set the owner's write permission for this abstract pathname."
    },
    {
        "function": "toURL",
        "parameters": [
            ""
        ],
        "comments": "Sets the owner's or everybody's write permission for this abstract pathname."
    },
    {
        "function": "sync",
        "parameters": [
            ""
        ],
        "comments": "Constructs an (invalid) FileDescriptor object."
    },
    {
        "function": "valid",
        "parameters": [
            ""
        ],
        "comments": "Force all system buffers to synchronize with the underlying device."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream."
    },
    {
        "function": "getFD",
        "parameters": [
            ""
        ],
        "comments": "Closes this file input stream and releases any system resources associated with the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.The finalize method has been deprecated and will be removed."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the unique FileChannel object associated with this file input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the FileDescriptor object  that represents the connection to the actual file in the file system being used by this FileInputStream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads a byte of data from this input stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a file output stream to write to the file represented by the specified File object."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Creates a file output stream to write to the file represented by the specified File object."
    },
    {
        "function": "getFD",
        "parameters": [
            ""
        ],
        "comments": "Creates a file output stream to write to the file with the specified name."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Creates a file output stream to write to the file with the specified name."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Closes this file output stream and releases any system resources associated with this stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.The finalize method has been deprecated and will be removed."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new FilePermission object with the specified actions."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two FilePermission objects for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"canonical string representation\" of the actions."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Checks if this FilePermission object \"implies\" the specified permission."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a FilterInputStream by assigning the  argument in to the field this.in so as to remember it for later use."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Marks the current position in this input stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Tests if this input stream supports the mark and reset methods."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads the next byte of data from this input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads up to b.length bytes of data from this input stream into an array of bytes."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads up to len bytes of data from this input stream into an array of bytes."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Repositions this stream to the position at the time the mark method was last called on this input stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates an output stream filter built on top of the specified underlying output stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Closes this output stream and releases any system resources associated with the stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Flushes this output stream and forces any buffered output bytes to be written out to the stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Writes b.length bytes to this output stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes len bytes from the specified byte array starting at offset off to this output stream."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new filtered reader."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this stream supports the mark() operation."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Resets the stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Create a new filtered writer."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes a portion of an array of characters."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Writes a single character."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking, which may be 0, or 0 when end of stream is detected."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Marks the current position in this input stream."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Tests if this input stream supports the mark and reset methods."
    },
    {
        "function": "nullInputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a new InputStream that reads no bytes."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Reads the next byte of data from the input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads some number of bytes from the input stream and stores them into the buffer array b."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads up to len bytes of data from the input stream into an array of bytes."
    },
    {
        "function": "readAllBytes",
        "parameters": [
            ""
        ],
        "comments": "Reads all remaining bytes from the input stream."
    },
    {
        "function": "readNBytes",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads the requested number of bytes from the input stream into the given byte array."
    },
    {
        "function": "readNBytes",
        "parameters": [
            "int"
        ],
        "comments": "Reads up to a specified number of bytes from the input stream."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Repositions this stream to the position at the time the mark method was last called on this input stream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Skips over and discards n bytes of data from this input stream."
    },
    {
        "function": "transferTo",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Reads all bytes from this input stream and writes the bytes to the given output stream in the order that they are read."
    },
    {
        "function": "getEncoding",
        "parameters": [
            ""
        ],
        "comments": "Creates an InputStreamReader that uses the default charset."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Creates an InputStreamReader that uses the named charset."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Creates an InputStreamReader that uses the given charset."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Creates an InputStreamReader that uses the given charset decoder."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getLineNumber",
        "parameters": [
            ""
        ],
        "comments": "Constructs a newline number input stream that reads its input from the specified input stream."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes that can be read from this input stream without blocking."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current line number."
    },
    {
        "function": "setLineNumber",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Marks the current position in this input stream."
    },
    {
        "function": "getLineNumber",
        "parameters": [
            ""
        ],
        "comments": "Create a new line-numbering reader, using the default input-buffer size."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Create a new line-numbering reader, reading characters into a buffer of the given size."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Get the current line number."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Mark the present position in the stream."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Read a single character."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Read characters into a portion of an array."
    },
    {
        "function": "setLineNumber",
        "parameters": [
            "int"
        ],
        "comments": "Read a line of text."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reset the stream to the most recent mark."
    },
    {
        "function": "createFilter",
        "parameters": [
            "String"
        ],
        "comments": "Returns an ObjectInputFilter from a string of patterns."
    },
    {
        "function": "getSerialFilter",
        "parameters": [
            ""
        ],
        "comments": "Returns the process-wide serialization filter or null if not configured."
    },
    {
        "function": "setSerialFilter",
        "parameters": [
            "ObjectInputFilter"
        ],
        "comments": "Set the process-wide filter if it has not already been configured or set."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates an ObjectInputStream that reads from the specified InputStream."
    },
    {
        "function": "defaultReadObject",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes that can be read without blocking."
    },
    {
        "function": "enableResolveObject",
        "parameters": [
            "boolean"
        ],
        "comments": "Closes the input stream."
    },
    {
        "function": "getObjectInputFilter",
        "parameters": [
            ""
        ],
        "comments": "Read the non-static and non-transient fields of the current class from this stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Enables the stream to do replacement of objects read from the stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the serialization filter for this stream."
    },
    {
        "function": "readBoolean",
        "parameters": [
            ""
        ],
        "comments": "Reads a byte of data."
    },
    {
        "function": "readByte",
        "parameters": [
            ""
        ],
        "comments": "Reads into an array of bytes."
    },
    {
        "function": "readChar",
        "parameters": [
            ""
        ],
        "comments": "Reads in a boolean."
    },
    {
        "function": "readClassDescriptor",
        "parameters": [
            ""
        ],
        "comments": "Reads an 8 bit byte."
    },
    {
        "function": "readDouble",
        "parameters": [
            ""
        ],
        "comments": "Reads a 16 bit char."
    },
    {
        "function": "readFields",
        "parameters": [
            ""
        ],
        "comments": "Read a class descriptor from the serialization stream."
    },
    {
        "function": "readFloat",
        "parameters": [
            ""
        ],
        "comments": "Reads a 64 bit double."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads the persistent fields from the stream and makes them available by name."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads a 32 bit float."
    },
    {
        "function": "readInt",
        "parameters": [
            ""
        ],
        "comments": "Reads bytes, blocking until all bytes are read."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Reads bytes, blocking until all bytes are read."
    },
    {
        "function": "readLong",
        "parameters": [
            ""
        ],
        "comments": "Reads a 32 bit int."
    },
    {
        "function": "readObject",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.This method does not properly convert bytes to characters."
    },
    {
        "function": "readObjectOverride",
        "parameters": [
            ""
        ],
        "comments": "Reads a 64 bit long."
    },
    {
        "function": "readShort",
        "parameters": [
            ""
        ],
        "comments": "Read an object from the ObjectInputStream."
    },
    {
        "function": "readStreamHeader",
        "parameters": [
            ""
        ],
        "comments": "This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor."
    },
    {
        "function": "readUnshared",
        "parameters": [
            ""
        ],
        "comments": "Reads a 16 bit short."
    },
    {
        "function": "readUnsignedByte",
        "parameters": [
            ""
        ],
        "comments": "The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers."
    },
    {
        "function": "readUnsignedShort",
        "parameters": [
            ""
        ],
        "comments": "Reads an \"unshared\" object from the ObjectInputStream."
    },
    {
        "function": "readUTF",
        "parameters": [
            ""
        ],
        "comments": "Reads an unsigned 8 bit byte."
    },
    {
        "function": "registerValidation",
        "parameters": [
            "ObjectInputValidation",
            "int"
        ],
        "comments": "Reads an unsigned 16 bit short."
    },
    {
        "function": "resolveClass",
        "parameters": [
            "ObjectStreamClass"
        ],
        "comments": "Reads a String in modified UTF-8 format."
    },
    {
        "function": "resolveObject",
        "parameters": [
            "Object"
        ],
        "comments": "Register an object to be validated before the graph is returned."
    },
    {
        "function": "resolveProxyClass",
        "parameters": [
            "String[]"
        ],
        "comments": "Load the local class equivalent of the specified stream class description."
    },
    {
        "function": "setObjectInputFilter",
        "parameters": [
            "ObjectInputFilter"
        ],
        "comments": "This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization."
    },
    {
        "function": "skipBytes",
        "parameters": [
            "int"
        ],
        "comments": "Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class."
    },
    {
        "function": "defaulted",
        "parameters": [
            "String"
        ],
        "comments": "Return true if the named field is defaulted and has no value in this stream."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "boolean"
        ],
        "comments": "Get the value of the named boolean field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "byte"
        ],
        "comments": "Get the value of the named byte field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "char"
        ],
        "comments": "Get the value of the named char field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "double"
        ],
        "comments": "Get the value of the named double field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "float"
        ],
        "comments": "Get the value of the named float field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Get the value of the named int field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "long"
        ],
        "comments": "Get the value of the named long field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "short"
        ],
        "comments": "Get the value of the named short field from the persistent field."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Get the value of the named Object field from the persistent field."
    },
    {
        "function": "getObjectStreamClass",
        "parameters": [
            ""
        ],
        "comments": "Get the ObjectStreamClass that describes the fields in the stream."
    },
    {
        "function": "annotateClass",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream."
    },
    {
        "function": "annotateProxyClass",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Creates an ObjectOutputStream that writes to the specified OutputStream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Subclasses may implement this method to allow class data to be stored in the stream."
    },
    {
        "function": "defaultWriteObject",
        "parameters": [
            ""
        ],
        "comments": "Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes."
    },
    {
        "function": "drain",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream."
    },
    {
        "function": "enableReplaceObject",
        "parameters": [
            "boolean"
        ],
        "comments": "Write the non-static and non-transient fields of the current class to this stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Drain any buffered data in ObjectOutputStream."
    },
    {
        "function": "putFields",
        "parameters": [
            ""
        ],
        "comments": "Enables the stream to do replacement of objects written to the stream."
    },
    {
        "function": "replaceObject",
        "parameters": [
            "Object"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the object used to buffer persistent fields to be written to the stream."
    },
    {
        "function": "useProtocolVersion",
        "parameters": [
            "int"
        ],
        "comments": "This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reset will disregard the state of any objects already written to the stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Specify stream protocol version to use when writing the stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes an array of bytes."
    },
    {
        "function": "writeBoolean",
        "parameters": [
            "boolean"
        ],
        "comments": "Writes a sub array of bytes."
    },
    {
        "function": "writeByte",
        "parameters": [
            "int"
        ],
        "comments": "Writes a byte."
    },
    {
        "function": "writeBytes",
        "parameters": [
            "String"
        ],
        "comments": "Writes a boolean."
    },
    {
        "function": "writeChar",
        "parameters": [
            "int"
        ],
        "comments": "Writes an 8 bit byte."
    },
    {
        "function": "writeChars",
        "parameters": [
            "String"
        ],
        "comments": "Writes a String as a sequence of bytes."
    },
    {
        "function": "writeClassDescriptor",
        "parameters": [
            "ObjectStreamClass"
        ],
        "comments": "Writes a 16 bit char."
    },
    {
        "function": "writeDouble",
        "parameters": [
            "double"
        ],
        "comments": "Writes a String as a sequence of chars."
    },
    {
        "function": "writeFields",
        "parameters": [
            ""
        ],
        "comments": "Write the specified class descriptor to the ObjectOutputStream."
    },
    {
        "function": "writeFloat",
        "parameters": [
            "float"
        ],
        "comments": "Writes a 64 bit double."
    },
    {
        "function": "writeInt",
        "parameters": [
            "int"
        ],
        "comments": "Write the buffered fields to the stream."
    },
    {
        "function": "writeLong",
        "parameters": [
            "long"
        ],
        "comments": "Writes a 32 bit float."
    },
    {
        "function": "writeObject",
        "parameters": [
            "Object"
        ],
        "comments": "Writes a 32 bit int."
    },
    {
        "function": "writeObjectOverride",
        "parameters": [
            "Object"
        ],
        "comments": "Writes a 64 bit long."
    },
    {
        "function": "writeShort",
        "parameters": [
            "int"
        ],
        "comments": "Write the specified object to the ObjectOutputStream."
    },
    {
        "function": "writeStreamHeader",
        "parameters": [
            ""
        ],
        "comments": "Method used by subclasses to override the default writeObject method."
    },
    {
        "function": "writeUnshared",
        "parameters": [
            "Object"
        ],
        "comments": "Writes a 16 bit short."
    },
    {
        "function": "writeUTF",
        "parameters": [
            "String"
        ],
        "comments": "The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "boolean"
        ],
        "comments": "Put the value of the named boolean field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "byte"
        ],
        "comments": "Put the value of the named byte field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "char"
        ],
        "comments": "Put the value of the named char field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "double"
        ],
        "comments": "Put the value of the named double field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "float"
        ],
        "comments": "Put the value of the named float field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Put the value of the named int field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "long"
        ],
        "comments": "Put the value of the named long field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "short"
        ],
        "comments": "Put the value of the named short field into the persistent field."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Put the value of the named Object field into the persistent field."
    },
    {
        "function": "write",
        "parameters": [
            "ObjectOutput"
        ],
        "comments": "Deprecated.This method does not write the values contained by this         PutField object in a proper format, and may         result in corruption of the serialization stream."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Object"
        ],
        "comments": "Create a Serializable field with the specified type."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Creates an ObjectStreamField representing a serializable field with the given name and type."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Compare this field with another ObjectStreamField."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Get the name of this field."
    },
    {
        "function": "getTypeCode",
        "parameters": [
            ""
        ],
        "comments": "Offset of field within instance data."
    },
    {
        "function": "getTypeString",
        "parameters": [
            ""
        ],
        "comments": "Get the type of the field."
    },
    {
        "function": "isPrimitive",
        "parameters": [
            ""
        ],
        "comments": "Returns character encoding of field type."
    },
    {
        "function": "isUnshared",
        "parameters": [
            ""
        ],
        "comments": "Return the JVM type signature."
    },
    {
        "function": "setOffset",
        "parameters": [
            "int"
        ],
        "comments": "Return true if this field has a primitive type."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this output stream and releases any system resources associated with this stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Flushes this output stream and forces any buffered output bytes to be written out."
    },
    {
        "function": "nullOutputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a new OutputStream which discards all bytes."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Writes b.length bytes from the specified byte array to this output stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Writes len bytes from the specified byte array starting at offset off to this output stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes the specified byte to this output stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates an OutputStreamWriter that uses the default character encoding."
    },
    {
        "function": "getEncoding",
        "parameters": [
            ""
        ],
        "comments": "Creates an OutputStreamWriter that uses the named charset."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Creates an OutputStreamWriter that uses the given charset."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Creates an OutputStreamWriter that uses the given charset encoder."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a PipedInputStream so that it is not yet connected."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a PipedInputStream so that it is not yet connected and uses the specified pipe size for the pipe's buffer."
    },
    {
        "function": "connect",
        "parameters": [
            "PipedOutputStream"
        ],
        "comments": "Creates a PipedInputStream so that it is connected to the piped output stream src."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Creates a PipedInputStream so that it is connected to the piped output stream src and uses the specified pipe size for the pipe's buffer."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the number of bytes that can be read from this input stream without blocking."
    },
    {
        "function": "receive",
        "parameters": [
            "int"
        ],
        "comments": "Closes this piped input stream and releases any system resources associated with the stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a piped output stream that is not yet connected to a piped input stream."
    },
    {
        "function": "connect",
        "parameters": [
            "PipedInputStream"
        ],
        "comments": "Creates a piped output stream connected to the specified piped input stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Closes this piped output stream and releases any system resources associated with this stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Connects this piped output stream to a receiver."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Flushes this output stream and forces any buffered output bytes to be written out."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a PipedReader so that it is not yet connected."
    },
    {
        "function": "connect",
        "parameters": [
            "PipedWriter"
        ],
        "comments": "Creates a PipedReader so that it is not yet connected and uses the specified pipe size for the pipe's buffer."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Creates a PipedReader so that it is connected to the piped writer src."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Creates a PipedReader so that it is connected to the piped writer src and uses the specified pipe size for the pipe's buffer."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Closes this piped stream and releases any system resources associated with the stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a piped writer that is not yet connected to a piped reader."
    },
    {
        "function": "connect",
        "parameters": [
            "PipedReader"
        ],
        "comments": "Creates a piped writer connected to the specified piped reader."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Closes this piped output stream and releases any system resources associated with this stream."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Connects this piped writer to a receiver."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Flushes this output stream and forces any buffered output characters to be written out."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file and charset."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file and charset."
    },
    {
        "function": "checkError",
        "parameters": [
            ""
        ],
        "comments": "Creates a new print stream."
    },
    {
        "function": "clearError",
        "parameters": [
            ""
        ],
        "comments": "Creates a new print stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new print stream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new print stream, with the specified OutputStream, automatic line flushing and charset."
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file name."
    },
    {
        "function": "format",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file name and charset."
    },
    {
        "function": "print",
        "parameters": [
            "boolean"
        ],
        "comments": "Creates a new print stream, without automatic line flushing, with the specified file name and charset."
    },
    {
        "function": "print",
        "parameters": [
            "char"
        ],
        "comments": "Appends the specified character to this output stream."
    },
    {
        "function": "print",
        "parameters": [
            "char[]"
        ],
        "comments": "Appends the specified character sequence to this output stream."
    },
    {
        "function": "print",
        "parameters": [
            "double"
        ],
        "comments": "Appends a subsequence of the specified character sequence to this output stream."
    },
    {
        "function": "print",
        "parameters": [
            "float"
        ],
        "comments": "Flushes the stream and checks its error state."
    },
    {
        "function": "print",
        "parameters": [
            "int"
        ],
        "comments": "Clears the internal error state of this stream."
    },
    {
        "function": "print",
        "parameters": [
            "long"
        ],
        "comments": "Closes the stream."
    },
    {
        "function": "print",
        "parameters": [
            "Object"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "print",
        "parameters": [
            "String"
        ],
        "comments": "Writes a formatted string to this output stream using the specified format string and arguments."
    },
    {
        "function": "printf",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Writes a formatted string to this output stream using the specified format string and arguments."
    },
    {
        "function": "printf",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Prints a boolean value."
    },
    {
        "function": "println",
        "parameters": [
            ""
        ],
        "comments": "Prints a character."
    },
    {
        "function": "println",
        "parameters": [
            "boolean"
        ],
        "comments": "Prints an array of characters."
    },
    {
        "function": "println",
        "parameters": [
            "char"
        ],
        "comments": "Prints a double-precision floating-point number."
    },
    {
        "function": "println",
        "parameters": [
            "char[]"
        ],
        "comments": "Prints a floating-point number."
    },
    {
        "function": "println",
        "parameters": [
            "double"
        ],
        "comments": "Prints an integer."
    },
    {
        "function": "println",
        "parameters": [
            "float"
        ],
        "comments": "Prints a long integer."
    },
    {
        "function": "println",
        "parameters": [
            "int"
        ],
        "comments": "Prints an object."
    },
    {
        "function": "println",
        "parameters": [
            "long"
        ],
        "comments": "Prints a string."
    },
    {
        "function": "println",
        "parameters": [
            "Object"
        ],
        "comments": "A convenience method to write a formatted string to this output stream using the specified format string and arguments."
    },
    {
        "function": "println",
        "parameters": [
            "String"
        ],
        "comments": "A convenience method to write a formatted string to this output stream using the specified format string and arguments."
    },
    {
        "function": "setError",
        "parameters": [
            ""
        ],
        "comments": "Terminates the current line by writing the line separator string."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Prints a boolean and then terminate the line."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Prints a character and then terminate the line."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset."
    },
    {
        "function": "checkError",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, from an existing OutputStream."
    },
    {
        "function": "clearError",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PrintWriter from an existing OutputStream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PrintWriter from an existing OutputStream."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing."
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Creates a new PrintWriter."
    },
    {
        "function": "format",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file name."
    },
    {
        "function": "print",
        "parameters": [
            "boolean"
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset."
    },
    {
        "function": "print",
        "parameters": [
            "char"
        ],
        "comments": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset."
    },
    {
        "function": "print",
        "parameters": [
            "char[]"
        ],
        "comments": "Appends the specified character to this writer."
    },
    {
        "function": "print",
        "parameters": [
            "double"
        ],
        "comments": "Appends the specified character sequence to this writer."
    },
    {
        "function": "print",
        "parameters": [
            "float"
        ],
        "comments": "Appends a subsequence of the specified character sequence to this writer."
    },
    {
        "function": "print",
        "parameters": [
            "int"
        ],
        "comments": "Flushes the stream if it's not closed and checks its error state."
    },
    {
        "function": "print",
        "parameters": [
            "long"
        ],
        "comments": "Clears the error state of this stream."
    },
    {
        "function": "print",
        "parameters": [
            "Object"
        ],
        "comments": "Closes the stream and releases any system resources associated with it."
    },
    {
        "function": "print",
        "parameters": [
            "String"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "printf",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Writes a formatted string to this writer using the specified format string and arguments."
    },
    {
        "function": "printf",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Writes a formatted string to this writer using the specified format string and arguments."
    },
    {
        "function": "println",
        "parameters": [
            ""
        ],
        "comments": "Prints a boolean value."
    },
    {
        "function": "println",
        "parameters": [
            "boolean"
        ],
        "comments": "Prints a character."
    },
    {
        "function": "println",
        "parameters": [
            "char"
        ],
        "comments": "Prints an array of characters."
    },
    {
        "function": "println",
        "parameters": [
            "char[]"
        ],
        "comments": "Prints a double-precision floating-point number."
    },
    {
        "function": "println",
        "parameters": [
            "double"
        ],
        "comments": "Prints a floating-point number."
    },
    {
        "function": "println",
        "parameters": [
            "float"
        ],
        "comments": "Prints an integer."
    },
    {
        "function": "println",
        "parameters": [
            "int"
        ],
        "comments": "Prints a long integer."
    },
    {
        "function": "println",
        "parameters": [
            "long"
        ],
        "comments": "Prints an object."
    },
    {
        "function": "println",
        "parameters": [
            "Object"
        ],
        "comments": "Prints a string."
    },
    {
        "function": "println",
        "parameters": [
            "String"
        ],
        "comments": "A convenience method to write a formatted string to this writer using the specified format string and arguments."
    },
    {
        "function": "setError",
        "parameters": [
            ""
        ],
        "comments": "A convenience method to write a formatted string to this writer using the specified format string and arguments."
    },
    {
        "function": "write",
        "parameters": [
            "char[]"
        ],
        "comments": "Terminates the current line by writing the line separator string."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Prints a boolean value and then terminates the line."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Prints a character and then terminates the line."
    },
    {
        "function": "write",
        "parameters": [
            "String"
        ],
        "comments": "Prints an array of characters and then terminates the line."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Prints a double-precision floating-point number and then terminates the line."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a PushbackInputStream with a 1-byte pushback buffer, and saves its argument, the input stream in, for later use."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a PushbackInputStream with a pushback buffer of the specified size, and saves its argument, the input stream in, for later use."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Marks the current position in this input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Tests if this input stream supports the mark and reset methods, which it does not."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads the next byte of data from this input stream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads up to len bytes of data from this input stream into an array of bytes."
    },
    {
        "function": "unread",
        "parameters": [
            "byte[]"
        ],
        "comments": "Repositions this stream to the position at the time the mark method was last called on this input stream."
    },
    {
        "function": "unread",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Skips over and discards n bytes of data from this input stream."
    },
    {
        "function": "unread",
        "parameters": [
            "int"
        ],
        "comments": "Pushes back an array of bytes by copying it to the front of the pushback buffer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new pushback reader with a one-character pushback buffer."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new pushback reader with a pushback buffer of the given size."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream and releases any system resources associated with it."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Tells whether this stream supports the mark() operation, which it does not."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "unread",
        "parameters": [
            "char[]"
        ],
        "comments": "Resets the stream."
    },
    {
        "function": "unread",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Skips characters."
    },
    {
        "function": "unread",
        "parameters": [
            "int"
        ],
        "comments": "Pushes back an array of characters by copying it to the front of the pushback buffer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a random access file stream to read from, and optionally to write to, the file specified by the File argument."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Creates a random access file stream to read from, and optionally to write to, a file with the specified name."
    },
    {
        "function": "getFD",
        "parameters": [
            ""
        ],
        "comments": "Closes this random access file stream and releases any system resources associated with the stream."
    },
    {
        "function": "getFilePointer",
        "parameters": [
            ""
        ],
        "comments": "Returns the unique FileChannel object associated with this file."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Returns the opaque file descriptor object associated with this stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Returns the current offset in this file."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the length of this file."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads a byte of data from this file."
    },
    {
        "function": "readBoolean",
        "parameters": [
            ""
        ],
        "comments": "Reads up to b.length bytes of data from this file into an array of bytes."
    },
    {
        "function": "readByte",
        "parameters": [
            ""
        ],
        "comments": "Reads up to len bytes of data from this file into an array of bytes."
    },
    {
        "function": "readChar",
        "parameters": [
            ""
        ],
        "comments": "Reads a boolean from this file."
    },
    {
        "function": "readDouble",
        "parameters": [
            ""
        ],
        "comments": "Reads a signed eight-bit value from this file."
    },
    {
        "function": "readFloat",
        "parameters": [
            ""
        ],
        "comments": "Reads a character from this file."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reads a double from this file."
    },
    {
        "function": "readFully",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads a float from this file."
    },
    {
        "function": "readInt",
        "parameters": [
            ""
        ],
        "comments": "Reads b.length bytes from this file into the byte array, starting at the current file pointer."
    },
    {
        "function": "readLine",
        "parameters": [
            ""
        ],
        "comments": "Reads exactly len bytes from this file into the byte array, starting at the current file pointer."
    },
    {
        "function": "readLong",
        "parameters": [
            ""
        ],
        "comments": "Reads a signed 32-bit integer from this file."
    },
    {
        "function": "readShort",
        "parameters": [
            ""
        ],
        "comments": "Reads the next line of text from this file."
    },
    {
        "function": "readUnsignedByte",
        "parameters": [
            ""
        ],
        "comments": "Reads a signed 64-bit integer from this file."
    },
    {
        "function": "readUnsignedShort",
        "parameters": [
            ""
        ],
        "comments": "Reads a signed 16-bit number from this file."
    },
    {
        "function": "readUTF",
        "parameters": [
            ""
        ],
        "comments": "Reads an unsigned eight-bit number from this file."
    },
    {
        "function": "seek",
        "parameters": [
            "long"
        ],
        "comments": "Reads an unsigned 16-bit number from this file."
    },
    {
        "function": "setLength",
        "parameters": [
            "long"
        ],
        "comments": "Reads in a string from this file."
    },
    {
        "function": "skipBytes",
        "parameters": [
            "int"
        ],
        "comments": "Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the length of this file."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Attempts to skip over n bytes of input discarding the skipped bytes."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes b.length bytes from the specified byte array to this file, starting at the current file pointer."
    },
    {
        "function": "writeBoolean",
        "parameters": [
            "boolean"
        ],
        "comments": "Writes len bytes from the specified byte array starting at offset off to this file."
    },
    {
        "function": "writeByte",
        "parameters": [
            "int"
        ],
        "comments": "Writes the specified byte to this file."
    },
    {
        "function": "writeBytes",
        "parameters": [
            "String"
        ],
        "comments": "Writes a boolean to the file as a one-byte value."
    },
    {
        "function": "writeChar",
        "parameters": [
            "int"
        ],
        "comments": "Writes a byte to the file as a one-byte value."
    },
    {
        "function": "writeChars",
        "parameters": [
            "String"
        ],
        "comments": "Writes the string to the file as a sequence of bytes."
    },
    {
        "function": "writeDouble",
        "parameters": [
            "double"
        ],
        "comments": "Writes a char to the file as a two-byte value, high byte first."
    },
    {
        "function": "writeFloat",
        "parameters": [
            "float"
        ],
        "comments": "Writes a string to the file as a sequence of characters."
    },
    {
        "function": "writeInt",
        "parameters": [
            "int"
        ],
        "comments": "Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first."
    },
    {
        "function": "writeLong",
        "parameters": [
            "long"
        ],
        "comments": "Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first."
    },
    {
        "function": "writeShort",
        "parameters": [
            "int"
        ],
        "comments": "Writes an int to the file as four bytes, high byte first."
    },
    {
        "function": "writeUTF",
        "parameters": [
            "String"
        ],
        "comments": "Writes a long to the file as eight bytes, high byte first."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new character-stream reader whose critical sections will synchronize on the reader itself."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new character-stream reader whose critical sections will synchronize on the given object."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream and releases any system resources associated with it."
    },
    {
        "function": "nullReader",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this stream supports the mark() operation."
    },
    {
        "function": "read",
        "parameters": [
            "char[]"
        ],
        "comments": "Returns a new Reader that reads no characters."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "read",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Reads characters into an array."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Attempts to read characters into the specified character buffer."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "transferTo",
        "parameters": [
            "Writer"
        ],
        "comments": "Resets the stream."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Initializes a newly created SequenceInputStream by remembering the two arguments, which will be read in order, first s1 and then s2, to provide the bytes to be read from this SequenceInputStream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Initializes a newly created SequenceInputStream by remembering the argument, which must be an Enumeration  that produces objects whose run-time type is InputStream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "commentChar",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example: "
    },
    {
        "function": "eolIsSignificant",
        "parameters": [
            "boolean"
        ],
        "comments": "Create a tokenizer that parses the given character stream."
    },
    {
        "function": "lineno",
        "parameters": [
            ""
        ],
        "comments": "Specified that the character argument starts a single-line comment."
    },
    {
        "function": "lowerCaseMode",
        "parameters": [
            "boolean"
        ],
        "comments": "Determines whether or not ends of line are treated as tokens."
    },
    {
        "function": "nextToken",
        "parameters": [
            ""
        ],
        "comments": "Return the current line number."
    },
    {
        "function": "ordinaryChar",
        "parameters": [
            "int"
        ],
        "comments": "Determines whether or not word token are automatically lowercased."
    },
    {
        "function": "ordinaryChars",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Parses the next token from the input stream of this tokenizer."
    },
    {
        "function": "parseNumbers",
        "parameters": [
            ""
        ],
        "comments": "Specifies that the character argument is \"ordinary\" in this tokenizer."
    },
    {
        "function": "pushBack",
        "parameters": [
            ""
        ],
        "comments": "Specifies that all characters c in the range low\u00a0<=\u00a0c\u00a0<=\u00a0high are \"ordinary\" in this tokenizer."
    },
    {
        "function": "quoteChar",
        "parameters": [
            "int"
        ],
        "comments": "Specifies that numbers should be parsed by this tokenizer."
    },
    {
        "function": "resetSyntax",
        "parameters": [
            ""
        ],
        "comments": "Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field."
    },
    {
        "function": "slashSlashComments",
        "parameters": [
            "boolean"
        ],
        "comments": "Specifies that matching pairs of this character delimit string constants in this tokenizer."
    },
    {
        "function": "slashStarComments",
        "parameters": [
            "boolean"
        ],
        "comments": "Resets this tokenizer's syntax table so that all characters are \"ordinary.\""
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Determines whether or not the tokenizer recognizes C++-style comments."
    },
    {
        "function": "whitespaceChars",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Determines whether or not the tokenizer recognizes C-style comments."
    },
    {
        "function": "wordChars",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the string representation of the current stream token and the line number it occurs on."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "The number of valid characters in the input stream buffer."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "The index of the next character to read from the input stream buffer."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Creates a string input stream to read data from the specified string."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new string reader."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Closes the stream and releases any system resources associated with it."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Marks the present position in the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this stream supports the mark() operation, which it does."
    },
    {
        "function": "read",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Reads a single character."
    },
    {
        "function": "ready",
        "parameters": [
            ""
        ],
        "comments": "Reads characters into a portion of an array."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this stream is ready to be read."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Create a new string writer using the default initial string-buffer size."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Create a new string writer using the specified initial string-buffer size."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends the specified character to this writer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified character sequence to this writer."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Appends a subsequence of the specified character sequence to this writer."
    },
    {
        "function": "getBuffer",
        "parameters": [
            ""
        ],
        "comments": "Closing a StringWriter has no effect."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Flush the stream."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Return the string buffer itself."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Return the buffer's current value as a string."
    },
    {
        "function": "write",
        "parameters": [
            "String"
        ],
        "comments": "Write a portion of an array of characters."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Write a single character."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Creates a new character-stream writer whose critical sections will synchronize on the writer itself."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a new character-stream writer whose critical sections will synchronize on the given object."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends the specified character to this writer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified character sequence to this writer."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Appends a subsequence of the specified character sequence to this writer."
    },
    {
        "function": "nullWriter",
        "parameters": [
            ""
        ],
        "comments": "Closes the stream, flushing it first."
    },
    {
        "function": "write",
        "parameters": [
            "char[]"
        ],
        "comments": "Flushes the stream."
    },
    {
        "function": "write",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns a new Writer which discards all characters."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes an array of characters."
    },
    {
        "function": "write",
        "parameters": [
            "String"
        ],
        "comments": "Writes a portion of an array of characters."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Writes a single character."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The status is allowed."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The status is rejected."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Appends the specified character to this Appendable."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Appends the specified character sequence to this Appendable."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends a subsequence of the specified character sequence to this Appendable."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this resource, relinquishing any underlying resources."
    },
    {
        "function": "charAt",
        "parameters": [
            "int"
        ],
        "comments": "Returns the char value at the specified index."
    },
    {
        "function": "chars",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of int zero-extending the char values from this sequence."
    },
    {
        "function": "codePoints",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of code point values from this sequence."
    },
    {
        "function": "compare",
        "parameters": [
            "CharSequence",
            "CharSequence"
        ],
        "comments": "Compares two CharSequence instances lexicographically."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of this character sequence."
    },
    {
        "function": "subSequence",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a CharSequence that is a subsequence of this sequence."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string containing the characters in this sequence in the same order as this sequence."
    },
    {
        "function": "allProcesses",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of all processes visible to the current process."
    },
    {
        "function": "children",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of the current direct children of the process."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ProcessHandle"
        ],
        "comments": "Compares this ProcessHandle with the specified ProcessHandle for order."
    },
    {
        "function": "current",
        "parameters": [
            ""
        ],
        "comments": "Returns a ProcessHandle for the current process."
    },
    {
        "function": "descendants",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of the descendants of the process."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Requests the process to be killed."
    },
    {
        "function": "destroyForcibly",
        "parameters": [
            ""
        ],
        "comments": "Requests the process to be killed forcibly."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if other object is non-null, is of the same implementation, and represents the same system process; otherwise it returns false."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for this ProcessHandle."
    },
    {
        "function": "info",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of information about the process."
    },
    {
        "function": "isAlive",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the process represented by this ProcessHandle is alive."
    },
    {
        "function": "of",
        "parameters": [
            "long"
        ],
        "comments": "Returns an Optional<ProcessHandle> for an existing native process."
    },
    {
        "function": "onExit",
        "parameters": [
            ""
        ],
        "comments": "Returns a CompletableFuture<ProcessHandle> for the termination of the process."
    },
    {
        "function": "parent",
        "parameters": [
            ""
        ],
        "comments": "Returns an Optional<ProcessHandle> for the parent process."
    },
    {
        "function": "pid",
        "parameters": [
            ""
        ],
        "comments": "Returns the native process ID of the process."
    },
    {
        "function": "supportsNormalTermination",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the implementation of destroy() normally terminates the process."
    },
    {
        "function": "arguments",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Strings of the arguments of the process."
    },
    {
        "function": "command",
        "parameters": [
            ""
        ],
        "comments": "Returns the executable pathname of the process."
    },
    {
        "function": "commandLine",
        "parameters": [
            ""
        ],
        "comments": "Returns the command line of the process."
    },
    {
        "function": "startInstant",
        "parameters": [
            ""
        ],
        "comments": "Returns the start time of the process."
    },
    {
        "function": "totalCpuDuration",
        "parameters": [
            ""
        ],
        "comments": "Returns the total cputime accumulated of the process."
    },
    {
        "function": "user",
        "parameters": [
            ""
        ],
        "comments": "Return the user of the process."
    },
    {
        "function": "read",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Attempts to read characters into the specified character buffer."
    },
    {
        "function": "run",
        "parameters": [
            ""
        ],
        "comments": "When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread."
    },
    {
        "function": "getByteCodeIndex",
        "parameters": [
            ""
        ],
        "comments": "Returns the index to the code array of the Code attribute containing the execution point represented by this stack frame."
    },
    {
        "function": "getClassName",
        "parameters": [
            ""
        ],
        "comments": "Gets the binary name of the declaring class of the method represented by this stack frame."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Gets the declaring Class for the method represented by this stack frame."
    },
    {
        "function": "getDescriptor",
        "parameters": [
            ""
        ],
        "comments": "Returns the descriptor of the method represented by this stack frame as defined by The Java Virtual Machine Specification."
    },
    {
        "function": "getFileName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the source file containing the execution point represented by this stack frame."
    },
    {
        "function": "getLineNumber",
        "parameters": [
            ""
        ],
        "comments": "Returns the line number of the source line containing the execution point represented by this stack frame."
    },
    {
        "function": "getMethodName",
        "parameters": [
            ""
        ],
        "comments": "Gets the name of the method represented by this stack frame."
    },
    {
        "function": "getMethodType",
        "parameters": [
            ""
        ],
        "comments": "Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame."
    },
    {
        "function": "isNativeMethod",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the method containing the execution point represented by this stack frame is a native method."
    },
    {
        "function": "toStackTraceElement",
        "parameters": [
            ""
        ],
        "comments": "Gets a StackTraceElement for this stack frame."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this logger."
    },
    {
        "function": "isLoggable",
        "parameters": [
            "System.Logger.Level"
        ],
        "comments": "Checks if a message of the given level would be logged by this logger."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "Object"
        ],
        "comments": "Logs a message produced from the given object."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "String"
        ],
        "comments": "Logs a message."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "String",
            "Object..."
        ],
        "comments": "Logs a message with an optional list of parameters."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "String",
            "Throwable"
        ],
        "comments": "Logs a message associated with a given throwable."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "Supplier<String>"
        ],
        "comments": "Logs a lazily supplied message."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "Supplier<String>",
            "Throwable"
        ],
        "comments": "Logs a lazily supplied message associated with a given throwable."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "ResourceBundle",
            "String",
            "Object..."
        ],
        "comments": "Logs a message with resource bundle and an optional list of parameters."
    },
    {
        "function": "log",
        "parameters": [
            "System.Logger.Level",
            "ResourceBundle",
            "String",
            "Throwable"
        ],
        "comments": "Logs a localized message associated with a given throwable."
    },
    {
        "function": "booleanValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Boolean"
        ],
        "comments": "Returns the value of this Boolean object as a boolean primitive."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares two boolean values."
    },
    {
        "function": "getBoolean",
        "parameters": [
            "String"
        ],
        "comments": "Compares this Boolean instance with another."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object."
    },
    {
        "function": "hashCode",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns true if and only if the system property named by the argument exists and is equal to, ignoring case, the string \"true\"."
    },
    {
        "function": "logicalAnd",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Returns a hash code for this Boolean object."
    },
    {
        "function": "logicalOr",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Returns a hash code for a boolean value; compatible with Boolean.hashCode()."
    },
    {
        "function": "logicalXor",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Returns the result of applying the logical AND operator to the specified boolean operands."
    },
    {
        "function": "parseBoolean",
        "parameters": [
            "String"
        ],
        "comments": "Returns the result of applying the logical OR operator to the specified boolean operands."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the result of applying the logical XOR operator to the specified boolean operands."
    },
    {
        "function": "toString",
        "parameters": [
            "boolean"
        ],
        "comments": "Parses the string argument as a boolean."
    },
    {
        "function": "valueOf",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns a String object representing this Boolean's value."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns a String object representing the specified boolean."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "byte",
            "byte"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Byte"
        ],
        "comments": "Returns the value of this Byte as a byte."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "byte",
            "byte"
        ],
        "comments": "Compares two byte values numerically."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Compares two Byte objects numerically."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Compares two byte values numerically treating the values as unsigned."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Decodes a String into a Byte."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Byte as a double after a widening primitive conversion."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            "byte"
        ],
        "comments": "Returns the value of this Byte as a float after a widening primitive conversion."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this Byte; equal to the result of invoking intValue()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for a byte value; compatible with Byte.hashCode()."
    },
    {
        "function": "parseByte",
        "parameters": [
            "String"
        ],
        "comments": "Returns the value of this Byte as an int after a widening primitive conversion."
    },
    {
        "function": "parseByte",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the value of this Byte as a long after a widening primitive conversion."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Parses the string argument as a signed decimal  byte."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Parses the string argument as a signed byte in the radix specified by the second argument."
    },
    {
        "function": "toString",
        "parameters": [
            "byte"
        ],
        "comments": "Returns the value of this Byte as a short after a widening primitive conversion."
    },
    {
        "function": "toUnsignedInt",
        "parameters": [
            "byte"
        ],
        "comments": "Returns a String object representing this Byte's value."
    },
    {
        "function": "toUnsignedLong",
        "parameters": [
            "byte"
        ],
        "comments": "Returns a new String object representing the specified byte."
    },
    {
        "function": "valueOf",
        "parameters": [
            "byte"
        ],
        "comments": "Converts the argument to an int by an unsigned conversion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Converts the argument to a long by an unsigned conversion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns a Byte instance representing the specified byte value."
    },
    {
        "function": "charCount",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "charValue",
        "parameters": [
            ""
        ],
        "comments": "Determines the number of char values needed to represent the specified character (Unicode code point)."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "char[]",
            "int"
        ],
        "comments": "Returns the value of this Character object."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns the code point at the given index of the char array."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "CharSequence",
            "int"
        ],
        "comments": "Returns the code point at the given index of the char array, where only array elements with index less than limit can be used."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "char[]",
            "int"
        ],
        "comments": "Returns the code point at the given index of the CharSequence."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns the code point preceding the given index of the char array."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "CharSequence",
            "int"
        ],
        "comments": "Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used."
    },
    {
        "function": "codePointCount",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns the code point preceding the given index of the CharSequence."
    },
    {
        "function": "codePointCount",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Returns the number of Unicode code points in a subarray of the char array argument."
    },
    {
        "function": "codePointOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns the number of Unicode code points in the text range of the specified char sequence."
    },
    {
        "function": "compare",
        "parameters": [
            "char",
            "char"
        ],
        "comments": "Returns the code point value of the Unicode character specified by the given Unicode character name."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Character"
        ],
        "comments": "Compares two char values numerically."
    },
    {
        "function": "digit",
        "parameters": [
            "char",
            "int"
        ],
        "comments": "Compares two Character objects numerically."
    },
    {
        "function": "digit",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the numeric value of the character ch in the specified radix."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the numeric value of the specified character (Unicode code point) in the specified radix."
    },
    {
        "function": "forDigit",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "getDirectionality",
        "parameters": [
            "char"
        ],
        "comments": "Determines the character representation for a specific digit in the specified radix."
    },
    {
        "function": "getDirectionality",
        "parameters": [
            "int"
        ],
        "comments": "Returns the Unicode directionality property for the given character."
    },
    {
        "function": "getName",
        "parameters": [
            "int"
        ],
        "comments": "Returns the Unicode directionality property for the given character (Unicode code point)."
    },
    {
        "function": "getNumericValue",
        "parameters": [
            "char"
        ],
        "comments": "Returns the Unicode name of the specified character codePoint, or null if the code point is unassigned."
    },
    {
        "function": "getNumericValue",
        "parameters": [
            "int"
        ],
        "comments": "Returns the int value that the specified Unicode character represents."
    },
    {
        "function": "getType",
        "parameters": [
            "char"
        ],
        "comments": "Returns the int value that the specified character (Unicode code point) represents."
    },
    {
        "function": "getType",
        "parameters": [
            "int"
        ],
        "comments": "Returns a value indicating a character's general category."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a value indicating a character's general category."
    },
    {
        "function": "hashCode",
        "parameters": [
            "char"
        ],
        "comments": "Returns a hash code for this Character; equal to the result of invoking charValue()."
    },
    {
        "function": "highSurrogate",
        "parameters": [
            "int"
        ],
        "comments": "Returns a hash code for a char value; compatible with Character.hashCode()."
    },
    {
        "function": "isAlphabetic",
        "parameters": [
            "int"
        ],
        "comments": "Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding."
    },
    {
        "function": "isBmpCodePoint",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character (Unicode code point) is an alphabet."
    },
    {
        "function": "isDefined",
        "parameters": [
            "char"
        ],
        "comments": "Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP)."
    },
    {
        "function": "isDefined",
        "parameters": [
            "int"
        ],
        "comments": "Determines if a character is defined in Unicode."
    },
    {
        "function": "isDigit",
        "parameters": [
            "char"
        ],
        "comments": "Determines if a character (Unicode code point) is defined in Unicode."
    },
    {
        "function": "isDigit",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a digit."
    },
    {
        "function": "isHighSurrogate",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a digit."
    },
    {
        "function": "isIdentifierIgnorable",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit)."
    },
    {
        "function": "isIdentifierIgnorable",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier."
    },
    {
        "function": "isIdeographic",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier."
    },
    {
        "function": "isISOControl",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard."
    },
    {
        "function": "isISOControl",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is an ISO control character."
    },
    {
        "function": "isJavaIdentifierPart",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the referenced character (Unicode code point) is an ISO control character."
    },
    {
        "function": "isJavaIdentifierPart",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character may be part of a Java identifier as other than the first character."
    },
    {
        "function": "isJavaIdentifierStart",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character."
    },
    {
        "function": "isJavaIdentifierStart",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is permissible as the first character in a Java identifier."
    },
    {
        "function": "isJavaLetter",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the character (Unicode code point) is permissible as the first character in a Java identifier."
    },
    {
        "function": "isJavaLetterOrDigit",
        "parameters": [
            "char"
        ],
        "comments": "Deprecated.Replaced by isJavaIdentifierStart(char)."
    },
    {
        "function": "isLetter",
        "parameters": [
            "char"
        ],
        "comments": "Deprecated.Replaced by isJavaIdentifierPart(char)."
    },
    {
        "function": "isLetter",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a letter."
    },
    {
        "function": "isLetterOrDigit",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a letter."
    },
    {
        "function": "isLetterOrDigit",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a letter or digit."
    },
    {
        "function": "isLowerCase",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a letter or digit."
    },
    {
        "function": "isLowerCase",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a lowercase character."
    },
    {
        "function": "isLowSurrogate",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a lowercase character."
    },
    {
        "function": "isMirrored",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit)."
    },
    {
        "function": "isMirrored",
        "parameters": [
            "int"
        ],
        "comments": "Determines whether the character is mirrored according to the Unicode specification."
    },
    {
        "function": "isSpace",
        "parameters": [
            "char"
        ],
        "comments": "Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification."
    },
    {
        "function": "isSpaceChar",
        "parameters": [
            "char"
        ],
        "comments": "Deprecated.Replaced by isWhitespace(char)."
    },
    {
        "function": "isSpaceChar",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a Unicode space character."
    },
    {
        "function": "isSupplementaryCodePoint",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a Unicode space character."
    },
    {
        "function": "isSurrogate",
        "parameters": [
            "char"
        ],
        "comments": "Determines whether the specified character (Unicode code point) is in the supplementary character range."
    },
    {
        "function": "isSurrogatePair",
        "parameters": [
            "char",
            "char"
        ],
        "comments": "Determines if the given char value is a Unicode surrogate code unit."
    },
    {
        "function": "isTitleCase",
        "parameters": [
            "char"
        ],
        "comments": "Determines whether the specified pair of char values is a valid  Unicode surrogate pair."
    },
    {
        "function": "isTitleCase",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is a titlecase character."
    },
    {
        "function": "isUnicodeIdentifierPart",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is a titlecase character."
    },
    {
        "function": "isUnicodeIdentifierPart",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character may be part of a Unicode identifier as other than the first character."
    },
    {
        "function": "isUnicodeIdentifierStart",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character."
    },
    {
        "function": "isUnicodeIdentifierStart",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is permissible as the first character in a Unicode identifier."
    },
    {
        "function": "isUpperCase",
        "parameters": [
            "char"
        ],
        "comments": "Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier."
    },
    {
        "function": "isUpperCase",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is an uppercase character."
    },
    {
        "function": "isValidCodePoint",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character (Unicode code point) is an uppercase character."
    },
    {
        "function": "isWhitespace",
        "parameters": [
            "char"
        ],
        "comments": "Determines whether the specified code point is a valid  Unicode code point value."
    },
    {
        "function": "isWhitespace",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character is white space according to Java."
    },
    {
        "function": "lowSurrogate",
        "parameters": [
            "int"
        ],
        "comments": "Determines if the specified character (Unicode code point) is white space according to Java."
    },
    {
        "function": "offsetByCodePoints",
        "parameters": [
            "char[]",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding."
    },
    {
        "function": "offsetByCodePoints",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Returns the index within the given char subarray that is offset from the given index by codePointOffset code points."
    },
    {
        "function": "reverseBytes",
        "parameters": [
            "char"
        ],
        "comments": "Returns the index within the given char sequence that is offset from the given index by codePointOffset code points."
    },
    {
        "function": "toChars",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value obtained by reversing the order of the bytes in the specified char value."
    },
    {
        "function": "toChars",
        "parameters": [
            "int",
            "char[]",
            "int"
        ],
        "comments": "Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array."
    },
    {
        "function": "toCodePoint",
        "parameters": [
            "char",
            "char"
        ],
        "comments": "Converts the specified character (Unicode code point) to its UTF-16 representation."
    },
    {
        "function": "toLowerCase",
        "parameters": [
            "char"
        ],
        "comments": "Converts the specified surrogate pair to its supplementary code point value."
    },
    {
        "function": "toLowerCase",
        "parameters": [
            "int"
        ],
        "comments": "Converts the character argument to lowercase using case mapping information from the UnicodeData file."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file."
    },
    {
        "function": "toString",
        "parameters": [
            "char"
        ],
        "comments": "Returns a String object representing this Character's value."
    },
    {
        "function": "toString",
        "parameters": [
            "int"
        ],
        "comments": "Returns a String object representing the specified char."
    },
    {
        "function": "toTitleCase",
        "parameters": [
            "char"
        ],
        "comments": "Returns a String object representing the specified character (Unicode code point)."
    },
    {
        "function": "toTitleCase",
        "parameters": [
            "int"
        ],
        "comments": "Converts the character argument to titlecase using case mapping information from the UnicodeData file."
    },
    {
        "function": "toUpperCase",
        "parameters": [
            "char"
        ],
        "comments": "Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file."
    },
    {
        "function": "toUpperCase",
        "parameters": [
            "int"
        ],
        "comments": "Converts the character argument to uppercase using case mapping information from the UnicodeData file."
    },
    {
        "function": "valueOf",
        "parameters": [
            "char"
        ],
        "comments": "Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new Subset instance."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares two Subset objects for equality."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the standard hash code as defined by the Object.hashCode() method."
    },
    {
        "function": "forName",
        "parameters": [
            "String"
        ],
        "comments": "Returns the UnicodeBlock with the given name."
    },
    {
        "function": "of",
        "parameters": [
            "char"
        ],
        "comments": "Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block."
    },
    {
        "function": "command",
        "parameters": [
            "Object"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "compileClass",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Examines the argument type and its fields and perform some documented operation."
    },
    {
        "function": "compileClasses",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "disable",
        "parameters": [
            ""
        ],
        "comments": "Compiles the specified class."
    },
    {
        "function": "enable",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Double"
        ],
        "comments": "Returns the value of this Double as a byte after a narrowing primitive conversion."
    },
    {
        "function": "doubleToLongBits",
        "parameters": [
            "double"
        ],
        "comments": "Compares the two specified double values."
    },
    {
        "function": "doubleToRawLongBits",
        "parameters": [
            "double"
        ],
        "comments": "Compares two Double objects numerically."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout, preserving Not-a-Number (NaN) values."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the double value of this Double object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            "double"
        ],
        "comments": "Returns the value of this Double as a float after a narrowing primitive conversion."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this Double object."
    },
    {
        "function": "isFinite",
        "parameters": [
            "double"
        ],
        "comments": "Returns a hash code for a double value; compatible with Double.hashCode()."
    },
    {
        "function": "isInfinite",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Double as an int after a narrowing primitive conversion."
    },
    {
        "function": "isInfinite",
        "parameters": [
            "double"
        ],
        "comments": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."
    },
    {
        "function": "isNaN",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this Double value is infinitely large in magnitude, false otherwise."
    },
    {
        "function": "isNaN",
        "parameters": [
            "double"
        ],
        "comments": "Returns true if the specified number is infinitely large in magnitude, false otherwise."
    },
    {
        "function": "longBitsToDouble",
        "parameters": [
            "long"
        ],
        "comments": "Returns true if this Double value is a Not-a-Number (NaN), false otherwise."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
    },
    {
        "function": "max",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the double value corresponding to a given bit representation."
    },
    {
        "function": "min",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the value of this Double as a long after a narrowing primitive conversion."
    },
    {
        "function": "parseDouble",
        "parameters": [
            "String"
        ],
        "comments": "Returns the greater of two double values as if by calling Math.max."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the smaller of two double values as if by calling Math.min."
    },
    {
        "function": "sum",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double."
    },
    {
        "function": "toHexString",
        "parameters": [
            "double"
        ],
        "comments": "Returns the value of this Double as a short after a narrowing primitive conversion."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Adds two double values together as per the + operator."
    },
    {
        "function": "toString",
        "parameters": [
            "double"
        ],
        "comments": "Returns a hexadecimal string representation of the double argument."
    },
    {
        "function": "valueOf",
        "parameters": [
            "double"
        ],
        "comments": "Returns a string representation of this Double object."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns a string representation of the double argument."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Float"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Float as a byte after a narrowing primitive conversion."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the two specified float values."
    },
    {
        "function": "floatToIntBits",
        "parameters": [
            "float"
        ],
        "comments": "Compares two Float objects numerically."
    },
    {
        "function": "floatToRawIntBits",
        "parameters": [
            "float"
        ],
        "comments": "Returns the value of this Float as a double after a widening primitive conversion."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout."
    },
    {
        "function": "hashCode",
        "parameters": [
            "float"
        ],
        "comments": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout, preserving Not-a-Number (NaN) values."
    },
    {
        "function": "intBitsToFloat",
        "parameters": [
            "int"
        ],
        "comments": "Returns the float value of this Float object."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this Float object."
    },
    {
        "function": "isFinite",
        "parameters": [
            "float"
        ],
        "comments": "Returns a hash code for a float value; compatible with Float.hashCode()."
    },
    {
        "function": "isInfinite",
        "parameters": [
            ""
        ],
        "comments": "Returns the float value corresponding to a given bit representation."
    },
    {
        "function": "isInfinite",
        "parameters": [
            "float"
        ],
        "comments": "Returns the value of this Float as an int after a narrowing primitive conversion."
    },
    {
        "function": "isNaN",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."
    },
    {
        "function": "isNaN",
        "parameters": [
            "float"
        ],
        "comments": "Returns true if this Float value is infinitely large in magnitude, false otherwise."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified number is infinitely large in magnitude, false otherwise."
    },
    {
        "function": "max",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns true if this Float value is a Not-a-Number (NaN), false otherwise."
    },
    {
        "function": "min",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
    },
    {
        "function": "parseFloat",
        "parameters": [
            "String"
        ],
        "comments": "Returns value of this Float as a long after a narrowing primitive conversion."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the greater of two float values as if by calling Math.max."
    },
    {
        "function": "sum",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the smaller of two float values as if by calling Math.min."
    },
    {
        "function": "toHexString",
        "parameters": [
            "float"
        ],
        "comments": "Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Float as a short after a narrowing primitive conversion."
    },
    {
        "function": "toString",
        "parameters": [
            "float"
        ],
        "comments": "Adds two float values together as per the + operator."
    },
    {
        "function": "valueOf",
        "parameters": [
            "float"
        ],
        "comments": "Returns a hexadecimal string representation of the float argument."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns a string representation of this Float object."
    },
    {
        "function": "bitCount",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the number of one-bits in the two's complement binary representation of the specified int value."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Integer"
        ],
        "comments": "Returns the value of this Integer as a byte after a narrowing primitive conversion."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Compares two int values numerically."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Compares two Integer objects numerically."
    },
    {
        "function": "divideUnsigned",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Compares two int values numerically treating the values as unsigned."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Decodes a String into an Integer."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Integer as a double after a widening primitive conversion."
    },
    {
        "function": "getInteger",
        "parameters": [
            "String"
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "getInteger",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the value of this Integer as a float after a widening primitive conversion."
    },
    {
        "function": "getInteger",
        "parameters": [
            "String",
            "Integer"
        ],
        "comments": "Determines the integer value of the system property with the specified name."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Determines the integer value of the system property with the specified name."
    },
    {
        "function": "hashCode",
        "parameters": [
            "int"
        ],
        "comments": "Returns the integer value of the system property with the specified name."
    },
    {
        "function": "highestOneBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns a hash code for this Integer."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for an int value; compatible with Integer.hashCode()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns an int value with at most a single one-bit, in the position of the highest-order (\"leftmost\") one-bit in the specified int value."
    },
    {
        "function": "lowestOneBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value of this Integer as an int."
    },
    {
        "function": "max",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the value of this Integer as a long after a widening primitive conversion."
    },
    {
        "function": "min",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns an int value with at most a single one-bit, in the position of the lowest-order (\"rightmost\") one-bit in the specified int value."
    },
    {
        "function": "numberOfLeadingZeros",
        "parameters": [
            "int"
        ],
        "comments": "Returns the greater of two int values as if by calling Math.max."
    },
    {
        "function": "numberOfTrailingZeros",
        "parameters": [
            "int"
        ],
        "comments": "Returns the smaller of two int values as if by calling Math.min."
    },
    {
        "function": "parseInt",
        "parameters": [
            "CharSequence",
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified int value."
    },
    {
        "function": "parseInt",
        "parameters": [
            "String"
        ],
        "comments": "Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified int value."
    },
    {
        "function": "parseInt",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Parses the CharSequence argument as a signed int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1."
    },
    {
        "function": "parseUnsignedInt",
        "parameters": [
            "CharSequence",
            "int",
            "int",
            "int"
        ],
        "comments": "Parses the string argument as a signed decimal integer."
    },
    {
        "function": "parseUnsignedInt",
        "parameters": [
            "String"
        ],
        "comments": "Parses the string argument as a signed integer in the radix specified by the second argument."
    },
    {
        "function": "parseUnsignedInt",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Parses the CharSequence argument as an unsigned int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1."
    },
    {
        "function": "remainderUnsigned",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Parses the string argument as an unsigned decimal integer."
    },
    {
        "function": "reverse",
        "parameters": [
            "int"
        ],
        "comments": "Parses the string argument as an unsigned integer in the radix specified by the second argument."
    },
    {
        "function": "reverseBytes",
        "parameters": [
            "int"
        ],
        "comments": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value."
    },
    {
        "function": "rotateLeft",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value."
    },
    {
        "function": "rotateRight",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits."
    },
    {
        "function": "signum",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits."
    },
    {
        "function": "sum",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the value of this Integer as a short after a narrowing primitive conversion."
    },
    {
        "function": "toBinaryString",
        "parameters": [
            "int"
        ],
        "comments": "Returns the signum function of the specified int value."
    },
    {
        "function": "toHexString",
        "parameters": [
            "int"
        ],
        "comments": "Adds two integers together as per the + operator."
    },
    {
        "function": "toOctalString",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string representation of the integer argument as an unsigned integer in base\u00a02."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the integer argument as an unsigned integer in base\u00a016."
    },
    {
        "function": "toString",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string representation of the integer argument as an unsigned integer in base\u00a08."
    },
    {
        "function": "toString",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a String object representing this Integer's value."
    },
    {
        "function": "toUnsignedLong",
        "parameters": [
            "int"
        ],
        "comments": "Returns a String object representing the specified integer."
    },
    {
        "function": "toUnsignedString",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string representation of the first argument in the radix specified by the second argument."
    },
    {
        "function": "toUnsignedString",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Converts the argument to a long by an unsigned conversion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string representation of the argument as an unsigned decimal value."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns an Integer instance representing the specified int value."
    },
    {
        "function": "bitCount",
        "parameters": [
            "long"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the number of one-bits in the two's complement binary representation of the specified long value."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Long"
        ],
        "comments": "Returns the value of this Long as a byte after a narrowing primitive conversion."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Compares two long values numerically."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Compares two Long objects numerically."
    },
    {
        "function": "divideUnsigned",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Compares two long values numerically treating the values as unsigned."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Decodes a String into a Long."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Long as a double after a widening primitive conversion."
    },
    {
        "function": "getLong",
        "parameters": [
            "String"
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "getLong",
        "parameters": [
            "String",
            "long"
        ],
        "comments": "Returns the value of this Long as a float after a widening primitive conversion."
    },
    {
        "function": "getLong",
        "parameters": [
            "String",
            "Long"
        ],
        "comments": "Determines the long value of the system property with the specified name."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Determines the long value of the system property with the specified name."
    },
    {
        "function": "hashCode",
        "parameters": [
            "long"
        ],
        "comments": "Returns the long value of the system property with the specified name."
    },
    {
        "function": "highestOneBit",
        "parameters": [
            "long"
        ],
        "comments": "Returns a hash code for this Long."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for a long value; compatible with Long.hashCode()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a long value with at most a single one-bit, in the position of the highest-order (\"leftmost\") one-bit in the specified long value."
    },
    {
        "function": "lowestOneBit",
        "parameters": [
            "long"
        ],
        "comments": "Returns the value of this Long as an int after a narrowing primitive conversion."
    },
    {
        "function": "max",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the value of this Long as a long value."
    },
    {
        "function": "min",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns a long value with at most a single one-bit, in the position of the lowest-order (\"rightmost\") one-bit in the specified long value."
    },
    {
        "function": "numberOfLeadingZeros",
        "parameters": [
            "long"
        ],
        "comments": "Returns the greater of two long values as if by calling Math.max."
    },
    {
        "function": "numberOfTrailingZeros",
        "parameters": [
            "long"
        ],
        "comments": "Returns the smaller of two long values as if by calling Math.min."
    },
    {
        "function": "parseLong",
        "parameters": [
            "CharSequence",
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified long value."
    },
    {
        "function": "parseLong",
        "parameters": [
            "String"
        ],
        "comments": "Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified long value."
    },
    {
        "function": "parseLong",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1."
    },
    {
        "function": "parseUnsignedLong",
        "parameters": [
            "CharSequence",
            "int",
            "int",
            "int"
        ],
        "comments": "Parses the string argument as a signed decimal long."
    },
    {
        "function": "parseUnsignedLong",
        "parameters": [
            "String"
        ],
        "comments": "Parses the string argument as a signed long in the radix specified by the second argument."
    },
    {
        "function": "parseUnsignedLong",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1."
    },
    {
        "function": "remainderUnsigned",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Parses the string argument as an unsigned decimal long."
    },
    {
        "function": "reverse",
        "parameters": [
            "long"
        ],
        "comments": "Parses the string argument as an unsigned long in the radix specified by the second argument."
    },
    {
        "function": "reverseBytes",
        "parameters": [
            "long"
        ],
        "comments": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value."
    },
    {
        "function": "rotateLeft",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value."
    },
    {
        "function": "rotateRight",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits."
    },
    {
        "function": "signum",
        "parameters": [
            "long"
        ],
        "comments": "Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits."
    },
    {
        "function": "sum",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the value of this Long as a short after a narrowing primitive conversion."
    },
    {
        "function": "toBinaryString",
        "parameters": [
            "long"
        ],
        "comments": "Returns the signum function of the specified long value."
    },
    {
        "function": "toHexString",
        "parameters": [
            "long"
        ],
        "comments": "Adds two long values together as per the + operator."
    },
    {
        "function": "toOctalString",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string representation of the long argument as an unsigned integer in base\u00a02."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the long argument as an unsigned integer in base\u00a016."
    },
    {
        "function": "toString",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string representation of the long argument as an unsigned integer in base\u00a08."
    },
    {
        "function": "toString",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns a String object representing this Long's value."
    },
    {
        "function": "toUnsignedString",
        "parameters": [
            "long"
        ],
        "comments": "Returns a String object representing the specified long."
    },
    {
        "function": "toUnsignedString",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns a string representation of the first argument in the radix specified by the second argument."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string representation of the argument as an unsigned decimal value."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns a Long instance representing the specified long value."
    },
    {
        "function": "abs",
        "parameters": [
            "double"
        ],
        "comments": "Returns the absolute value of a double value."
    },
    {
        "function": "abs",
        "parameters": [
            "float"
        ],
        "comments": "Returns the absolute value of a float value."
    },
    {
        "function": "abs",
        "parameters": [
            "int"
        ],
        "comments": "Returns the absolute value of an int value."
    },
    {
        "function": "abs",
        "parameters": [
            "long"
        ],
        "comments": "Returns the absolute value of a long value."
    },
    {
        "function": "acos",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi."
    },
    {
        "function": "addExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the sum of its arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "addExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the sum of its arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "asin",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
        "function": "atan",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
        "function": "atan2",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the angle theta from the conversion of rectangular coordinates (x,\u00a0y) to polar coordinates (r,\u00a0theta)."
    },
    {
        "function": "cbrt",
        "parameters": [
            "double"
        ],
        "comments": "Returns the cube root of a double value."
    },
    {
        "function": "ceil",
        "parameters": [
            "double"
        ],
        "comments": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer."
    },
    {
        "function": "copySign",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
        "function": "copySign",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
        "function": "cos",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric cosine of an angle."
    },
    {
        "function": "cosh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic cosine of a double value."
    },
    {
        "function": "decrementExact",
        "parameters": [
            "int"
        ],
        "comments": "Returns the argument decremented by one, throwing an exception if the result overflows an int."
    },
    {
        "function": "decrementExact",
        "parameters": [
            "long"
        ],
        "comments": "Returns the argument decremented by one, throwing an exception if the result overflows a long."
    },
    {
        "function": "exp",
        "parameters": [
            "double"
        ],
        "comments": "Returns Euler's number e raised to the power of a double value."
    },
    {
        "function": "expm1",
        "parameters": [
            "double"
        ],
        "comments": "Returns ex\u00a0-1."
    },
    {
        "function": "floor",
        "parameters": [
            "double"
        ],
        "comments": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorMod",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the floor modulus of the int arguments."
    },
    {
        "function": "floorMod",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the floor modulus of the long and int arguments."
    },
    {
        "function": "floorMod",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the floor modulus of the long arguments."
    },
    {
        "function": "fma",
        "parameters": [
            "double",
            "double",
            "double"
        ],
        "comments": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double."
    },
    {
        "function": "fma",
        "parameters": [
            "float",
            "float",
            "float"
        ],
        "comments": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float."
    },
    {
        "function": "getExponent",
        "parameters": [
            "double"
        ],
        "comments": "Returns the unbiased exponent used in the representation of a double."
    },
    {
        "function": "getExponent",
        "parameters": [
            "float"
        ],
        "comments": "Returns the unbiased exponent used in the representation of a float."
    },
    {
        "function": "hypot",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns sqrt(x2\u00a0+y2) without intermediate overflow or underflow."
    },
    {
        "function": "IEEEremainder",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard."
    },
    {
        "function": "incrementExact",
        "parameters": [
            "int"
        ],
        "comments": "Returns the argument incremented by one, throwing an exception if the result overflows an int."
    },
    {
        "function": "incrementExact",
        "parameters": [
            "long"
        ],
        "comments": "Returns the argument incremented by one, throwing an exception if the result overflows a long."
    },
    {
        "function": "log",
        "parameters": [
            "double"
        ],
        "comments": "Returns the natural logarithm (base e) of a double value."
    },
    {
        "function": "log10",
        "parameters": [
            "double"
        ],
        "comments": "Returns the base 10 logarithm of a double value."
    },
    {
        "function": "log1p",
        "parameters": [
            "double"
        ],
        "comments": "Returns the natural logarithm of the sum of the argument and 1."
    },
    {
        "function": "max",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the greater of two double values."
    },
    {
        "function": "max",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the greater of two float values."
    },
    {
        "function": "max",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the greater of two int values."
    },
    {
        "function": "max",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the greater of two long values."
    },
    {
        "function": "min",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the smaller of two double values."
    },
    {
        "function": "min",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the smaller of two float values."
    },
    {
        "function": "min",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the smaller of two int values."
    },
    {
        "function": "min",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the smaller of two long values."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "multiplyFull",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the exact mathematical product of the arguments."
    },
    {
        "function": "multiplyHigh",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors."
    },
    {
        "function": "negateExact",
        "parameters": [
            "int"
        ],
        "comments": "Returns the negation of the argument, throwing an exception if the result overflows an int."
    },
    {
        "function": "negateExact",
        "parameters": [
            "long"
        ],
        "comments": "Returns the negation of the argument, throwing an exception if the result overflows a long."
    },
    {
        "function": "nextAfter",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
        "function": "nextAfter",
        "parameters": [
            "float",
            "double"
        ],
        "comments": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
        "function": "nextDown",
        "parameters": [
            "double"
        ],
        "comments": "Returns the floating-point value adjacent to d in the direction of negative infinity."
    },
    {
        "function": "nextDown",
        "parameters": [
            "float"
        ],
        "comments": "Returns the floating-point value adjacent to f in the direction of negative infinity."
    },
    {
        "function": "nextUp",
        "parameters": [
            "double"
        ],
        "comments": "Returns the floating-point value adjacent to d in the direction of positive infinity."
    },
    {
        "function": "nextUp",
        "parameters": [
            "float"
        ],
        "comments": "Returns the floating-point value adjacent to f in the direction of positive infinity."
    },
    {
        "function": "pow",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the value of the first argument raised to the power of the second argument."
    },
    {
        "function": "random",
        "parameters": [
            ""
        ],
        "comments": "Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0."
    },
    {
        "function": "rint",
        "parameters": [
            "double"
        ],
        "comments": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer."
    },
    {
        "function": "round",
        "parameters": [
            "double"
        ],
        "comments": "Returns the closest long to the argument, with ties rounding to positive infinity."
    },
    {
        "function": "round",
        "parameters": [
            "float"
        ],
        "comments": "Returns the closest int to the argument, with ties rounding to positive infinity."
    },
    {
        "function": "scalb",
        "parameters": [
            "double",
            "int"
        ],
        "comments": "Returns d \u00d7 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set."
    },
    {
        "function": "scalb",
        "parameters": [
            "float",
            "int"
        ],
        "comments": "Returns f \u00d7 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set."
    },
    {
        "function": "signum",
        "parameters": [
            "double"
        ],
        "comments": "Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero."
    },
    {
        "function": "signum",
        "parameters": [
            "float"
        ],
        "comments": "Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero."
    },
    {
        "function": "sin",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric sine of an angle."
    },
    {
        "function": "sinh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic sine of a double value."
    },
    {
        "function": "sqrt",
        "parameters": [
            "double"
        ],
        "comments": "Returns the correctly rounded positive square root of a double value."
    },
    {
        "function": "subtractExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the difference of the arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "subtractExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the difference of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "tan",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric tangent of an angle."
    },
    {
        "function": "tanh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic tangent of a double value."
    },
    {
        "function": "toDegrees",
        "parameters": [
            "double"
        ],
        "comments": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees."
    },
    {
        "function": "toIntExact",
        "parameters": [
            "long"
        ],
        "comments": "Returns the value of the long argument; throwing an exception if the value overflows an int."
    },
    {
        "function": "toRadians",
        "parameters": [
            "double"
        ],
        "comments": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians."
    },
    {
        "function": "ulp",
        "parameters": [
            "double"
        ],
        "comments": "Returns the size of an ulp of the argument."
    },
    {
        "function": "ulp",
        "parameters": [
            "float"
        ],
        "comments": "Returns the size of an ulp of the argument."
    },
    {
        "function": "addExports",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "If the caller's module is this module then update this module to export the given package to the given module."
    },
    {
        "function": "addOpens",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "If this module has opened a package to at least the caller module then update this module to open the package to the given module."
    },
    {
        "function": "addReads",
        "parameters": [
            "Module"
        ],
        "comments": "If the caller's module is this module then update this module to read the given module."
    },
    {
        "function": "addUses",
        "parameters": [
            "Class<?>"
        ],
        "comments": "If the caller's module is this module then update this module to add a service dependence on the given service type."
    },
    {
        "function": "canRead",
        "parameters": [
            "Module"
        ],
        "comments": "Indicates if this module reads the given module."
    },
    {
        "function": "canUse",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Indicates if this module has a service dependence on the given service type."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are present on this element."
    },
    {
        "function": "getClassLoader",
        "parameters": [
            ""
        ],
        "comments": "Returns the ClassLoader for this module."
    },
    {
        "function": "getDeclaredAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are directly present on this element."
    },
    {
        "function": "getDescriptor",
        "parameters": [
            ""
        ],
        "comments": "Returns the module descriptor for this module or null if this module is an unnamed module."
    },
    {
        "function": "getLayer",
        "parameters": [
            ""
        ],
        "comments": "Returns the module layer that contains this module or null if this module is not in a module layer."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the module name or null if this module is an unnamed module."
    },
    {
        "function": "getPackages",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of package names for the packages in this module."
    },
    {
        "function": "getResourceAsStream",
        "parameters": [
            "String"
        ],
        "comments": "Returns an input stream for reading a resource in this module."
    },
    {
        "function": "isExported",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if this module exports the given package unconditionally."
    },
    {
        "function": "isExported",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "Returns true if this module exports the given package to at least the given module."
    },
    {
        "function": "isNamed",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this module is a named module."
    },
    {
        "function": "isOpen",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if this module has opened a package unconditionally."
    },
    {
        "function": "isOpen",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "Returns true if this module has opened a package to at least the given module."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this module."
    },
    {
        "function": "boot",
        "parameters": [
            ""
        ],
        "comments": "Returns the boot layer."
    },
    {
        "function": "configuration",
        "parameters": [
            ""
        ],
        "comments": "Returns the configuration for this layer."
    },
    {
        "function": "defineModules",
        "parameters": [
            "Configuration",
            "Function<String",
            "ClassLoader>"
        ],
        "comments": "Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine."
    },
    {
        "function": "defineModules",
        "parameters": [
            "Configuration",
            "List<ModuleLayer>",
            "Function<String",
            "ClassLoader>"
        ],
        "comments": "Creates a new module layer by defining the modules in the given  Configuration to the Java virtual machine."
    },
    {
        "function": "defineModulesWithManyLoaders",
        "parameters": [
            "Configuration",
            "ClassLoader"
        ],
        "comments": "Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine."
    },
    {
        "function": "defineModulesWithManyLoaders",
        "parameters": [
            "Configuration",
            "List<ModuleLayer>",
            "ClassLoader"
        ],
        "comments": "Creates a new module layer by defining the modules in the given  Configuration to the Java virtual machine."
    },
    {
        "function": "defineModulesWithOneLoader",
        "parameters": [
            "Configuration",
            "ClassLoader"
        ],
        "comments": "Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine."
    },
    {
        "function": "defineModulesWithOneLoader",
        "parameters": [
            "Configuration",
            "List<ModuleLayer>",
            "ClassLoader"
        ],
        "comments": "Creates a new module layer by defining the modules in the given  Configuration to the Java virtual machine."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns the empty layer."
    },
    {
        "function": "findLoader",
        "parameters": [
            "String"
        ],
        "comments": "Returns the ClassLoader for the module with the given name."
    },
    {
        "function": "findModule",
        "parameters": [
            "String"
        ],
        "comments": "Returns the module with the given name in this layer, or if not in this layer, the parent layers."
    },
    {
        "function": "modules",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of the modules in this layer."
    },
    {
        "function": "parents",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of this layer's parents unless this is the empty layer, which has no parents and so an empty list is returned."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this module layer."
    },
    {
        "function": "addExports",
        "parameters": [
            "Module",
            "String",
            "Module"
        ],
        "comments": "Updates module source in the layer to export a package to module target."
    },
    {
        "function": "addOpens",
        "parameters": [
            "Module",
            "String",
            "Module"
        ],
        "comments": "Updates module source in the layer to open a package to module target."
    },
    {
        "function": "addReads",
        "parameters": [
            "Module",
            "Module"
        ],
        "comments": "Updates module source in the layer to read module target."
    },
    {
        "function": "layer",
        "parameters": [
            ""
        ],
        "comments": "Returns the layer that this object controls."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as a byte."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as a double."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as a float."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as an int."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as a long."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified number as a short."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates and returns a copy of this object."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Indicates whether some other object is \"equal to\" this one."
    },
    {
        "function": "getClass",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The finalization mechanism is inherently problematic."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the runtime class of this Object."
    },
    {
        "function": "notify",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for the object."
    },
    {
        "function": "notifyAll",
        "parameters": [
            ""
        ],
        "comments": "Wakes up a single thread that is waiting on this object's monitor."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Wakes up all threads that are waiting on this object's monitor."
    },
    {
        "function": "wait",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the object."
    },
    {
        "function": "wait",
        "parameters": [
            "long"
        ],
        "comments": "Causes the current thread to wait until it is awakened, typically by being notified or interrupted."
    },
    {
        "function": "wait",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<A>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are present on this element."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<A>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getDeclaredAnnotation",
        "parameters": [
            "Class<A>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is directly present, else null."
    },
    {
        "function": "getDeclaredAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are directly present on this element."
    },
    {
        "function": "getDeclaredAnnotationsByType",
        "parameters": [
            "Class<A>"
        ],
        "comments": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present."
    },
    {
        "function": "getImplementationTitle",
        "parameters": [
            ""
        ],
        "comments": "Return the title of this package."
    },
    {
        "function": "getImplementationVendor",
        "parameters": [
            ""
        ],
        "comments": "Returns the vendor that implemented this package, null is returned if it is not known."
    },
    {
        "function": "getImplementationVersion",
        "parameters": [
            ""
        ],
        "comments": "Return the version of this implementation."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Return the name of this package."
    },
    {
        "function": "getPackage",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.If multiple class loaders delegate to each other and define classes with the same package name, and one such loader relies on the lookup behavior of getPackage to return a Package from a parent loader, then the properties exposed by the Package may not be as expected in the rest of the program."
    },
    {
        "function": "getPackages",
        "parameters": [
            ""
        ],
        "comments": "Returns all of the Packages defined by the caller's class loader and its ancestors."
    },
    {
        "function": "getSpecificationTitle",
        "parameters": [
            ""
        ],
        "comments": "Return the title of the specification that this package implements."
    },
    {
        "function": "getSpecificationVendor",
        "parameters": [
            ""
        ],
        "comments": "Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package."
    },
    {
        "function": "getSpecificationVersion",
        "parameters": [
            ""
        ],
        "comments": "Returns the version number of the specification that this package implements."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Return the hash code computed from the package name."
    },
    {
        "function": "isAnnotationPresent",
        "parameters": [
            "Class<?"
        ],
        "comments": "Returns true if an annotation for the specified type is present on this element, else false."
    },
    {
        "function": "isCompatibleWith",
        "parameters": [
            "String"
        ],
        "comments": "Compare this package's specification version with a desired version."
    },
    {
        "function": "isSealed",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this package is sealed."
    },
    {
        "function": "isSealed",
        "parameters": [
            "URL"
        ],
        "comments": "Returns true if this package is sealed with respect to the specified code source url."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this Package."
    },
    {
        "function": "children",
        "parameters": [
            ""
        ],
        "comments": "Default constructor for Process."
    },
    {
        "function": "descendants",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of the direct children of the process."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of the descendants of the process."
    },
    {
        "function": "destroyForcibly",
        "parameters": [
            ""
        ],
        "comments": "Kills the process."
    },
    {
        "function": "exitValue",
        "parameters": [
            ""
        ],
        "comments": "Kills the process forcibly."
    },
    {
        "function": "getErrorStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the exit value for the process."
    },
    {
        "function": "getInputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the input stream connected to the error output of the process."
    },
    {
        "function": "getOutputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the input stream connected to the normal output of the process."
    },
    {
        "function": "info",
        "parameters": [
            ""
        ],
        "comments": "Returns the output stream connected to the normal input of the process."
    },
    {
        "function": "isAlive",
        "parameters": [
            ""
        ],
        "comments": "Returns a snapshot of information about the process."
    },
    {
        "function": "onExit",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the process represented by this Process is alive."
    },
    {
        "function": "pid",
        "parameters": [
            ""
        ],
        "comments": "Returns a CompletableFuture<Process> for the termination of the Process."
    },
    {
        "function": "supportsNormalTermination",
        "parameters": [
            ""
        ],
        "comments": "Returns the native process ID of the process."
    },
    {
        "function": "toHandle",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the implementation of destroy() is to normally terminate the process, Returns false if the implementation of destroy forcibly and immediately terminates the process."
    },
    {
        "function": "waitFor",
        "parameters": [
            ""
        ],
        "comments": "Returns a ProcessHandle for the Process."
    },
    {
        "function": "waitFor",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated."
    },
    {
        "function": "command",
        "parameters": [
            ""
        ],
        "comments": "Constructs a process builder with the specified operating system program and arguments."
    },
    {
        "function": "command",
        "parameters": [
            "String..."
        ],
        "comments": "Constructs a process builder with the specified operating system program and arguments."
    },
    {
        "function": "command",
        "parameters": [
            "List<String>"
        ],
        "comments": "Returns this process builder's operating system program and arguments."
    },
    {
        "function": "directory",
        "parameters": [
            ""
        ],
        "comments": "Sets this process builder's operating system program and arguments."
    },
    {
        "function": "directory",
        "parameters": [
            "File"
        ],
        "comments": "Sets this process builder's operating system program and arguments."
    },
    {
        "function": "environment",
        "parameters": [
            ""
        ],
        "comments": "Returns this process builder's working directory."
    },
    {
        "function": "inheritIO",
        "parameters": [
            ""
        ],
        "comments": "Sets this process builder's working directory."
    },
    {
        "function": "redirectError",
        "parameters": [
            ""
        ],
        "comments": "Returns a string map view of this process builder's environment."
    },
    {
        "function": "redirectError",
        "parameters": [
            "File"
        ],
        "comments": "Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process."
    },
    {
        "function": "redirectError",
        "parameters": [
            "ProcessBuilder.Redirect"
        ],
        "comments": "Returns this process builder's standard error destination."
    },
    {
        "function": "redirectErrorStream",
        "parameters": [
            ""
        ],
        "comments": "Sets this process builder's standard error destination to a file."
    },
    {
        "function": "redirectErrorStream",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets this process builder's standard error destination."
    },
    {
        "function": "redirectInput",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this process builder merges standard error and standard output."
    },
    {
        "function": "redirectInput",
        "parameters": [
            "File"
        ],
        "comments": "Sets this process builder's redirectErrorStream property."
    },
    {
        "function": "redirectInput",
        "parameters": [
            "ProcessBuilder.Redirect"
        ],
        "comments": "Returns this process builder's standard input source."
    },
    {
        "function": "redirectOutput",
        "parameters": [
            ""
        ],
        "comments": "Sets this process builder's standard input source to a file."
    },
    {
        "function": "redirectOutput",
        "parameters": [
            "File"
        ],
        "comments": "Sets this process builder's standard input source."
    },
    {
        "function": "redirectOutput",
        "parameters": [
            "ProcessBuilder.Redirect"
        ],
        "comments": "Returns this process builder's standard output destination."
    },
    {
        "function": "start",
        "parameters": [
            ""
        ],
        "comments": "Sets this process builder's standard output destination to a file."
    },
    {
        "function": "startPipeline",
        "parameters": [
            "List<ProcessBuilder>"
        ],
        "comments": "Sets this process builder's standard output destination."
    },
    {
        "function": "appendTo",
        "parameters": [
            "File"
        ],
        "comments": "Returns a redirect to append to the specified file."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the specified object with this Redirect for equality."
    },
    {
        "function": "file",
        "parameters": [
            ""
        ],
        "comments": "Returns the File source or destination associated with this redirect, or null if there is no such file."
    },
    {
        "function": "from",
        "parameters": [
            "File"
        ],
        "comments": "Returns a redirect to read from the specified file."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for this Redirect."
    },
    {
        "function": "to",
        "parameters": [
            "File"
        ],
        "comments": "Returns a redirect to write to the specified file."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Returns the type of this Redirect."
    },
    {
        "function": "addShutdownHook",
        "parameters": [
            "Thread"
        ],
        "comments": "Registers a new virtual-machine shutdown hook."
    },
    {
        "function": "availableProcessors",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of processors available to the Java virtual machine."
    },
    {
        "function": "exec",
        "parameters": [
            "String"
        ],
        "comments": "Executes the specified string command in a separate process."
    },
    {
        "function": "exec",
        "parameters": [
            "String[]"
        ],
        "comments": "Executes the specified command and arguments in a separate process."
    },
    {
        "function": "exec",
        "parameters": [
            "String[]",
            "String[]"
        ],
        "comments": "Executes the specified command and arguments in a separate process with the specified environment."
    },
    {
        "function": "exec",
        "parameters": [
            "String[]",
            "String[]",
            "File"
        ],
        "comments": "Executes the specified command and arguments in a separate process with the specified environment and working directory."
    },
    {
        "function": "exec",
        "parameters": [
            "String",
            "String[]"
        ],
        "comments": "Executes the specified string command in a separate process with the specified environment."
    },
    {
        "function": "exec",
        "parameters": [
            "String",
            "String[]",
            "File"
        ],
        "comments": "Executes the specified string command in a separate process with the specified environment and working directory."
    },
    {
        "function": "exit",
        "parameters": [
            "int"
        ],
        "comments": "Terminates the currently running Java virtual machine by initiating its shutdown sequence."
    },
    {
        "function": "freeMemory",
        "parameters": [
            ""
        ],
        "comments": "Returns the amount of free memory in the Java Virtual Machine."
    },
    {
        "function": "gc",
        "parameters": [
            ""
        ],
        "comments": "Runs the garbage collector."
    },
    {
        "function": "getRuntime",
        "parameters": [
            ""
        ],
        "comments": "Returns the runtime object associated with the current Java application."
    },
    {
        "function": "halt",
        "parameters": [
            "int"
        ],
        "comments": "Forcibly terminates the currently running Java virtual machine."
    },
    {
        "function": "load",
        "parameters": [
            "String"
        ],
        "comments": "Loads the native library specified by the filename argument."
    },
    {
        "function": "loadLibrary",
        "parameters": [
            "String"
        ],
        "comments": "Loads the native library specified by the libname argument."
    },
    {
        "function": "maxMemory",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum amount of memory that the Java virtual machine will attempt to use."
    },
    {
        "function": "removeShutdownHook",
        "parameters": [
            "Thread"
        ],
        "comments": "De-registers a previously-registered virtual-machine shutdown hook."
    },
    {
        "function": "runFinalization",
        "parameters": [
            ""
        ],
        "comments": "Runs the finalization methods of any objects pending finalization."
    },
    {
        "function": "totalMemory",
        "parameters": [
            ""
        ],
        "comments": "Returns the total amount of memory in the Java virtual machine."
    },
    {
        "function": "traceInstructions",
        "parameters": [
            "boolean"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.This method was intended to control instruction tracing."
    },
    {
        "function": "traceMethodCalls",
        "parameters": [
            "boolean"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.This method was intended to control method call tracing."
    },
    {
        "function": "version",
        "parameters": [
            ""
        ],
        "comments": "Returns the version of the Java Runtime Environment as a Runtime.Version."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Returns the build number."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Runtime.Version"
        ],
        "comments": "Compares this version to another."
    },
    {
        "function": "compareToIgnoreOptional",
        "parameters": [
            "Runtime.Version"
        ],
        "comments": "Compares this version to another disregarding optional build information."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Determines whether this Version is equal to another object."
    },
    {
        "function": "equalsIgnoreOptional",
        "parameters": [
            "Object"
        ],
        "comments": "Determines whether this Version is equal to another disregarding optional build information."
    },
    {
        "function": "feature",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the feature element of the version number."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of this version."
    },
    {
        "function": "interim",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the interim element of the version number, or zero if it is absent."
    },
    {
        "function": "major",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of Java\u00a0SE 10, the first element of a version number is not the major-release number but the feature-release counter, incremented for every time-based release."
    },
    {
        "function": "minor",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of Java\u00a0SE 10, the second element of a version number is not the minor-release number but the interim-release counter, incremented for every interim release."
    },
    {
        "function": "optional",
        "parameters": [
            ""
        ],
        "comments": "Returns optional additional identifying build information."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Parses the given string as a valid version string containing a version number followed by pre-release and build information."
    },
    {
        "function": "patch",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the patch element of the version number, or zero if it is absent."
    },
    {
        "function": "pre",
        "parameters": [
            ""
        ],
        "comments": "Returns the optional pre-release information."
    },
    {
        "function": "security",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of Java\u00a0SE 10, the third element of a version number is not the security level but the update-release counter, incremented for every update release."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of this version."
    },
    {
        "function": "update",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the update element of the version number, or zero if it is absent."
    },
    {
        "function": "version",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable List of the integers represented in the version number."
    },
    {
        "function": "checkAccept",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Constructs a new SecurityManager."
    },
    {
        "function": "checkAccess",
        "parameters": [
            "Thread"
        ],
        "comments": "Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number."
    },
    {
        "function": "checkAccess",
        "parameters": [
            "ThreadGroup"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to modify the thread argument."
    },
    {
        "function": "checkConnect",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to modify the thread group argument."
    },
    {
        "function": "checkConnect",
        "parameters": [
            "String",
            "int",
            "Object"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number."
    },
    {
        "function": "checkCreateClassLoader",
        "parameters": [
            ""
        ],
        "comments": "Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number."
    },
    {
        "function": "checkDelete",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to create a new class loader."
    },
    {
        "function": "checkExec",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to delete the specified file."
    },
    {
        "function": "checkExit",
        "parameters": [
            "int"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to create a subprocess."
    },
    {
        "function": "checkLink",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code."
    },
    {
        "function": "checkListen",
        "parameters": [
            "int"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file."
    },
    {
        "function": "checkMulticast",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number."
    },
    {
        "function": "checkMulticast",
        "parameters": [
            "InetAddress",
            "byte"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast."
    },
    {
        "function": "checkPackageAccess",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.Use #checkPermission(java.security.Permission) instead"
    },
    {
        "function": "checkPackageDefinition",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to access the specified package."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to define classes in the specified package."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Permission",
            "Object"
        ],
        "comments": "Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect."
    },
    {
        "function": "checkPrintJobAccess",
        "parameters": [
            ""
        ],
        "comments": "Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission."
    },
    {
        "function": "checkPropertiesAccess",
        "parameters": [
            ""
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to initiate a print job request."
    },
    {
        "function": "checkPropertyAccess",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to access or modify the system properties."
    },
    {
        "function": "checkRead",
        "parameters": [
            "FileDescriptor"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name."
    },
    {
        "function": "checkRead",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor."
    },
    {
        "function": "checkRead",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument."
    },
    {
        "function": "checkSecurityAccess",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument."
    },
    {
        "function": "checkSetFactory",
        "parameters": [
            ""
        ],
        "comments": "Determines whether the permission with the specified permission target name should be granted or denied."
    },
    {
        "function": "checkWrite",
        "parameters": [
            "FileDescriptor"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL."
    },
    {
        "function": "checkWrite",
        "parameters": [
            "String"
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor."
    },
    {
        "function": "getClassContext",
        "parameters": [
            ""
        ],
        "comments": "Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument."
    },
    {
        "function": "getSecurityContext",
        "parameters": [
            ""
        ],
        "comments": "Returns the current execution stack as an array of classes."
    },
    {
        "function": "getThreadGroup",
        "parameters": [
            ""
        ],
        "comments": "Creates an object that encapsulates the current execution environment."
    },
    {
        "function": "byteValue",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "short",
            "short"
        ],
        "comments": "Deprecated.It is rarely appropriate to use this constructor."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Short"
        ],
        "comments": "Returns the value of this Short as a byte after a narrowing primitive conversion."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "short",
            "short"
        ],
        "comments": "Compares two short values numerically."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Compares two Short objects numerically."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Compares two short values numerically treating the values as unsigned."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Decodes a String into a Short."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this Short as a double after a widening primitive conversion."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            "short"
        ],
        "comments": "Returns the value of this Short as a float after a widening primitive conversion."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this Short; equal to the result of invoking intValue()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for a short value; compatible with Short.hashCode()."
    },
    {
        "function": "parseShort",
        "parameters": [
            "String"
        ],
        "comments": "Returns the value of this Short as an int after a widening primitive conversion."
    },
    {
        "function": "parseShort",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the value of this Short as a long after a widening primitive conversion."
    },
    {
        "function": "reverseBytes",
        "parameters": [
            "short"
        ],
        "comments": "Parses the string argument as a signed decimal  short."
    },
    {
        "function": "shortValue",
        "parameters": [
            ""
        ],
        "comments": "Parses the string argument as a signed short in the radix specified by the second argument."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value."
    },
    {
        "function": "toString",
        "parameters": [
            "short"
        ],
        "comments": "Returns the value of this Short as a short."
    },
    {
        "function": "toUnsignedInt",
        "parameters": [
            "short"
        ],
        "comments": "Returns a String object representing this Short's value."
    },
    {
        "function": "toUnsignedLong",
        "parameters": [
            "short"
        ],
        "comments": "Returns a new String object representing the specified short."
    },
    {
        "function": "valueOf",
        "parameters": [
            "short"
        ],
        "comments": "Converts the argument to an int by an unsigned conversion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Converts the argument to a long by an unsigned conversion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns a Short instance representing the specified short value."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a stack trace element representing the specified execution point."
    },
    {
        "function": "getClassLoaderName",
        "parameters": [
            ""
        ],
        "comments": "Creates a stack trace element representing the specified execution point."
    },
    {
        "function": "getClassName",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance."
    },
    {
        "function": "getFileName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the class loader of the class containing the execution point represented by this stack trace element."
    },
    {
        "function": "getLineNumber",
        "parameters": [
            ""
        ],
        "comments": "Returns the fully qualified name of the class containing the execution point represented by this stack trace element."
    },
    {
        "function": "getMethodName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the source file containing the execution point represented by this stack trace element."
    },
    {
        "function": "getModuleName",
        "parameters": [
            ""
        ],
        "comments": "Returns the line number of the source line containing the execution point represented by this stack trace element."
    },
    {
        "function": "getModuleVersion",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the method containing the execution point represented by this stack trace element."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the module name of the module containing the execution point represented by this stack trace element."
    },
    {
        "function": "isNativeMethod",
        "parameters": [
            ""
        ],
        "comments": "Returns the module version of the module containing the execution point represented by this stack trace element."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for this stack trace element."
    },
    {
        "function": "forEach",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method."
    },
    {
        "function": "getCallerClass",
        "parameters": [
            ""
        ],
        "comments": "Gets the Class object of the caller who invoked the method that invoked getCallerClass."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a StackWalker instance."
    },
    {
        "function": "getInstance",
        "parameters": [
            "StackWalker.Option"
        ],
        "comments": "Returns a StackWalker instance with the given option specifying the stack frame information it can access."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Set<StackWalker.Option>"
        ],
        "comments": "Returns a StackWalker instance with the given options specifying the stack frame information it can access."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Set<StackWalker.Option>",
            "int"
        ],
        "comments": "Returns a StackWalker instance with the given options specifying the stack frame information it can access."
    },
    {
        "function": "walk",
        "parameters": [
            "Function<?",
            "?"
        ],
        "comments": "Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method."
    },
    {
        "function": "abs",
        "parameters": [
            "double"
        ],
        "comments": "Returns the absolute value of a double value."
    },
    {
        "function": "abs",
        "parameters": [
            "float"
        ],
        "comments": "Returns the absolute value of a float value."
    },
    {
        "function": "abs",
        "parameters": [
            "int"
        ],
        "comments": "Returns the absolute value of an int value."
    },
    {
        "function": "abs",
        "parameters": [
            "long"
        ],
        "comments": "Returns the absolute value of a long value."
    },
    {
        "function": "acos",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi."
    },
    {
        "function": "addExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the sum of its arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "addExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the sum of its arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "asin",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
        "function": "atan",
        "parameters": [
            "double"
        ],
        "comments": "Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2."
    },
    {
        "function": "atan2",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the angle theta from the conversion of rectangular coordinates (x,\u00a0y) to polar coordinates (r,\u00a0theta)."
    },
    {
        "function": "cbrt",
        "parameters": [
            "double"
        ],
        "comments": "Returns the cube root of a double value."
    },
    {
        "function": "ceil",
        "parameters": [
            "double"
        ],
        "comments": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer."
    },
    {
        "function": "copySign",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
        "function": "copySign",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the first floating-point argument with the sign of the second floating-point argument."
    },
    {
        "function": "cos",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric cosine of an angle."
    },
    {
        "function": "cosh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic cosine of a double value."
    },
    {
        "function": "exp",
        "parameters": [
            "double"
        ],
        "comments": "Returns Euler's number e raised to the power of a double value."
    },
    {
        "function": "expm1",
        "parameters": [
            "double"
        ],
        "comments": "Returns ex\u00a0-1."
    },
    {
        "function": "floor",
        "parameters": [
            "double"
        ],
        "comments": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorDiv",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient."
    },
    {
        "function": "floorMod",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the floor modulus of the int arguments."
    },
    {
        "function": "floorMod",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the floor modulus of the long and int arguments."
    },
    {
        "function": "floorMod",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the floor modulus of the long arguments."
    },
    {
        "function": "fma",
        "parameters": [
            "double",
            "double",
            "double"
        ],
        "comments": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double."
    },
    {
        "function": "fma",
        "parameters": [
            "float",
            "float",
            "float"
        ],
        "comments": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float."
    },
    {
        "function": "getExponent",
        "parameters": [
            "double"
        ],
        "comments": "Returns the unbiased exponent used in the representation of a double."
    },
    {
        "function": "getExponent",
        "parameters": [
            "float"
        ],
        "comments": "Returns the unbiased exponent used in the representation of a float."
    },
    {
        "function": "hypot",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns sqrt(x2\u00a0+y2) without intermediate overflow or underflow."
    },
    {
        "function": "IEEEremainder",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard."
    },
    {
        "function": "log",
        "parameters": [
            "double"
        ],
        "comments": "Returns the natural logarithm (base e) of a double value."
    },
    {
        "function": "log10",
        "parameters": [
            "double"
        ],
        "comments": "Returns the base 10 logarithm of a double value."
    },
    {
        "function": "log1p",
        "parameters": [
            "double"
        ],
        "comments": "Returns the natural logarithm of the sum of the argument and 1."
    },
    {
        "function": "max",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the greater of two double values."
    },
    {
        "function": "max",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the greater of two float values."
    },
    {
        "function": "max",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the greater of two int values."
    },
    {
        "function": "max",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the greater of two long values."
    },
    {
        "function": "min",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the smaller of two double values."
    },
    {
        "function": "min",
        "parameters": [
            "float",
            "float"
        ],
        "comments": "Returns the smaller of two float values."
    },
    {
        "function": "min",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the smaller of two int values."
    },
    {
        "function": "min",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the smaller of two long values."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "multiplyExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the product of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "multiplyFull",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the exact mathematical product of the arguments."
    },
    {
        "function": "multiplyHigh",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors."
    },
    {
        "function": "nextAfter",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
        "function": "nextAfter",
        "parameters": [
            "float",
            "double"
        ],
        "comments": "Returns the floating-point number adjacent to the first argument in the direction of the second argument."
    },
    {
        "function": "nextDown",
        "parameters": [
            "double"
        ],
        "comments": "Returns the floating-point value adjacent to d in the direction of negative infinity."
    },
    {
        "function": "nextDown",
        "parameters": [
            "float"
        ],
        "comments": "Returns the floating-point value adjacent to f in the direction of negative infinity."
    },
    {
        "function": "nextUp",
        "parameters": [
            "double"
        ],
        "comments": "Returns the floating-point value adjacent to d in the direction of positive infinity."
    },
    {
        "function": "nextUp",
        "parameters": [
            "float"
        ],
        "comments": "Returns the floating-point value adjacent to f in the direction of positive infinity."
    },
    {
        "function": "pow",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns the value of the first argument raised to the power of the second argument."
    },
    {
        "function": "random",
        "parameters": [
            ""
        ],
        "comments": "Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0."
    },
    {
        "function": "rint",
        "parameters": [
            "double"
        ],
        "comments": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer."
    },
    {
        "function": "round",
        "parameters": [
            "double"
        ],
        "comments": "Returns the closest long to the argument, with ties rounding to positive infinity."
    },
    {
        "function": "round",
        "parameters": [
            "float"
        ],
        "comments": "Returns the closest int to the argument, with ties rounding to positive infinity."
    },
    {
        "function": "scalb",
        "parameters": [
            "double",
            "int"
        ],
        "comments": "Returns d \u00d7 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set."
    },
    {
        "function": "scalb",
        "parameters": [
            "float",
            "int"
        ],
        "comments": "Returns f \u00d7 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set."
    },
    {
        "function": "signum",
        "parameters": [
            "double"
        ],
        "comments": "Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero."
    },
    {
        "function": "signum",
        "parameters": [
            "float"
        ],
        "comments": "Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero."
    },
    {
        "function": "sin",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric sine of an angle."
    },
    {
        "function": "sinh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic sine of a double value."
    },
    {
        "function": "sqrt",
        "parameters": [
            "double"
        ],
        "comments": "Returns the correctly rounded positive square root of a double value."
    },
    {
        "function": "subtractExact",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the difference of the arguments, throwing an exception if the result overflows an int."
    },
    {
        "function": "subtractExact",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the difference of the arguments, throwing an exception if the result overflows a long."
    },
    {
        "function": "tan",
        "parameters": [
            "double"
        ],
        "comments": "Returns the trigonometric tangent of an angle."
    },
    {
        "function": "tanh",
        "parameters": [
            "double"
        ],
        "comments": "Returns the hyperbolic tangent of a double value."
    },
    {
        "function": "toDegrees",
        "parameters": [
            "double"
        ],
        "comments": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees."
    },
    {
        "function": "toIntExact",
        "parameters": [
            "long"
        ],
        "comments": "Returns the value of the long argument; throwing an exception if the value overflows an int."
    },
    {
        "function": "toRadians",
        "parameters": [
            "double"
        ],
        "comments": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians."
    },
    {
        "function": "ulp",
        "parameters": [
            "double"
        ],
        "comments": "Returns the size of an ulp of the argument."
    },
    {
        "function": "ulp",
        "parameters": [
            "float"
        ],
        "comments": "Returns the size of an ulp of the argument."
    },
    {
        "function": "charAt",
        "parameters": [
            "int"
        ],
        "comments": "Initializes a newly created String object so that it represents an empty character sequence."
    },
    {
        "function": "chars",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new String by decoding the specified array of bytes using the platform's default charset."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.This method does not properly convert bytes into characters."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "int"
        ],
        "comments": "Constructs a new String by decoding the specified subarray of bytes using the platform's default charset."
    },
    {
        "function": "codePointCount",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Deprecated.This method does not properly convert bytes into characters."
    },
    {
        "function": "codePoints",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new String by decoding the specified subarray of bytes using the specified charset."
    },
    {
        "function": "compareTo",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new String by decoding the specified subarray of bytes using the specified charset."
    },
    {
        "function": "compareToIgnoreCase",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new String by decoding the specified array of bytes using the specified charset."
    },
    {
        "function": "concat",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new String by decoding the specified array of bytes using the specified charset."
    },
    {
        "function": "contains",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Allocates a new String so that it represents the sequence of characters currently contained in the character array argument."
    },
    {
        "function": "contentEquals",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Allocates a new String that contains characters from a subarray of the character array argument."
    },
    {
        "function": "contentEquals",
        "parameters": [
            "StringBuffer"
        ],
        "comments": "Allocates a new String that contains characters from a subarray of the Unicode code point array argument."
    },
    {
        "function": "copyValueOf",
        "parameters": [
            "char[]"
        ],
        "comments": "Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string."
    },
    {
        "function": "copyValueOf",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Allocates a new string that contains the sequence of characters currently contained in the string buffer argument."
    },
    {
        "function": "endsWith",
        "parameters": [
            "String"
        ],
        "comments": "Allocates a new string that contains the sequence of characters currently contained in the string builder argument."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the char value at the specified index."
    },
    {
        "function": "equalsIgnoreCase",
        "parameters": [
            "String"
        ],
        "comments": "Returns a stream of int zero-extending the char values from this sequence."
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Returns the character (Unicode code point) at the specified index."
    },
    {
        "function": "format",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Returns the character (Unicode code point) before the specified index."
    },
    {
        "function": "getBytes",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of Unicode code points in the specified text range of this String."
    },
    {
        "function": "getBytes",
        "parameters": [
            "int",
            "int",
            "byte[]",
            "int"
        ],
        "comments": "Returns a stream of code point values from this sequence."
    },
    {
        "function": "getBytes",
        "parameters": [
            "String"
        ],
        "comments": "Compares two strings lexicographically."
    },
    {
        "function": "getBytes",
        "parameters": [
            "Charset"
        ],
        "comments": "Compares two strings lexicographically, ignoring case differences."
    },
    {
        "function": "getChars",
        "parameters": [
            "int",
            "int",
            "char[]",
            "int"
        ],
        "comments": "Concatenates the specified string to the end of this string."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns true if and only if this string contains the specified sequence of char values."
    },
    {
        "function": "indexOf",
        "parameters": [
            "int"
        ],
        "comments": "Compares this string to the specified CharSequence."
    },
    {
        "function": "indexOf",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Compares this string to the specified StringBuffer."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String"
        ],
        "comments": "Equivalent to valueOf(char[])."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Equivalent to valueOf(char[], int, int)."
    },
    {
        "function": "intern",
        "parameters": [
            ""
        ],
        "comments": "Tests if this string ends with the specified suffix."
    },
    {
        "function": "isBlank",
        "parameters": [
            ""
        ],
        "comments": "Compares this string to the specified object."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "Compares this String to another String, ignoring case considerations."
    },
    {
        "function": "join",
        "parameters": [
            "CharSequence",
            "CharSequence..."
        ],
        "comments": "Returns a formatted string using the specified format string and arguments."
    },
    {
        "function": "join",
        "parameters": [
            "CharSequence",
            "Iterable<?"
        ],
        "comments": "Returns a formatted string using the specified locale, format string, and arguments."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "int"
        ],
        "comments": "Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Deprecated.This method does not properly convert characters into bytes."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String"
        ],
        "comments": "Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Copies characters from this string into the destination character array."
    },
    {
        "function": "lines",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this string."
    },
    {
        "function": "matches",
        "parameters": [
            "String"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified character."
    },
    {
        "function": "offsetByCodePoints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index."
    },
    {
        "function": "regionMatches",
        "parameters": [
            "boolean",
            "int",
            "String",
            "int",
            "int"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring."
    },
    {
        "function": "regionMatches",
        "parameters": [
            "int",
            "String",
            "int",
            "int"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
    },
    {
        "function": "repeat",
        "parameters": [
            "int"
        ],
        "comments": "Returns a canonical representation for the string object."
    },
    {
        "function": "replace",
        "parameters": [
            "char",
            "char"
        ],
        "comments": "Returns true if the string is empty or contains only white space codepoints, otherwise false."
    },
    {
        "function": "replace",
        "parameters": [
            "CharSequence",
            "CharSequence"
        ],
        "comments": "Returns true if, and only if, length() is 0."
    },
    {
        "function": "replaceAll",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter."
    },
    {
        "function": "replaceFirst",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter."
    },
    {
        "function": "split",
        "parameters": [
            "String"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified character."
    },
    {
        "function": "split",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index."
    },
    {
        "function": "startsWith",
        "parameters": [
            "String"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring."
    },
    {
        "function": "startsWith",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
    },
    {
        "function": "strip",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of this string."
    },
    {
        "function": "stripLeading",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of lines extracted from this string, separated by line terminators."
    },
    {
        "function": "stripTrailing",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this string matches the given regular expression."
    },
    {
        "function": "subSequence",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the index within this String that is offset from the given index by codePointOffset code points."
    },
    {
        "function": "substring",
        "parameters": [
            "int"
        ],
        "comments": "Tests if two string regions are equal."
    },
    {
        "function": "substring",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Tests if two string regions are equal."
    },
    {
        "function": "toCharArray",
        "parameters": [
            ""
        ],
        "comments": "Returns a string whose value is the concatenation of this string repeated count times."
    },
    {
        "function": "toLowerCase",
        "parameters": [
            ""
        ],
        "comments": "Returns a string resulting from replacing all occurrences of oldChar in this string with newChar."
    },
    {
        "function": "toLowerCase",
        "parameters": [
            "Locale"
        ],
        "comments": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Replaces each substring of this string that matches the given regular expression with the given replacement."
    },
    {
        "function": "toUpperCase",
        "parameters": [
            ""
        ],
        "comments": "Replaces the first substring of this string that matches the given regular expression with the given replacement."
    },
    {
        "function": "toUpperCase",
        "parameters": [
            "Locale"
        ],
        "comments": "Splits this string around matches of the given regular expression."
    },
    {
        "function": "trim",
        "parameters": [
            ""
        ],
        "comments": "Splits this string around matches of the given regular expression."
    },
    {
        "function": "valueOf",
        "parameters": [
            "boolean"
        ],
        "comments": "Tests if this string starts with the specified prefix."
    },
    {
        "function": "valueOf",
        "parameters": [
            "char"
        ],
        "comments": "Tests if the substring of this string beginning at the specified index starts with the specified prefix."
    },
    {
        "function": "valueOf",
        "parameters": [
            "char[]"
        ],
        "comments": "Returns a string whose value is this string, with all leading and trailing white space removed."
    },
    {
        "function": "valueOf",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns a string whose value is this string, with all leading white space removed."
    },
    {
        "function": "valueOf",
        "parameters": [
            "double"
        ],
        "comments": "Returns a string whose value is this string, with all trailing white space removed."
    },
    {
        "function": "valueOf",
        "parameters": [
            "float"
        ],
        "comments": "Returns a character sequence that is a subsequence of this sequence."
    },
    {
        "function": "valueOf",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string that is a substring of this string."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string that is a substring of this string."
    },
    {
        "function": "valueOf",
        "parameters": [
            "Object"
        ],
        "comments": "Converts this string to a new character array."
    },
    {
        "function": "append",
        "parameters": [
            "boolean"
        ],
        "comments": "Constructs a string buffer with no characters in it and an initial capacity of 16 characters."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Constructs a string buffer with no characters in it and the specified initial capacity."
    },
    {
        "function": "append",
        "parameters": [
            "char[]"
        ],
        "comments": "Constructs a string buffer that contains the same characters as the specified CharSequence."
    },
    {
        "function": "append",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Constructs a string buffer initialized to the contents of the specified string."
    },
    {
        "function": "append",
        "parameters": [
            "double"
        ],
        "comments": "Appends the string representation of the boolean argument to the sequence."
    },
    {
        "function": "append",
        "parameters": [
            "float"
        ],
        "comments": "Appends the string representation of the char argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "int"
        ],
        "comments": "Appends the string representation of the char array argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "long"
        ],
        "comments": "Appends the string representation of a subarray of the char array argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Appends the string representation of the double argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends the string representation of the float argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "Object"
        ],
        "comments": "Appends the string representation of the int argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "String"
        ],
        "comments": "Appends the string representation of the long argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "StringBuffer"
        ],
        "comments": "Appends the specified CharSequence to this sequence."
    },
    {
        "function": "appendCodePoint",
        "parameters": [
            "int"
        ],
        "comments": "Appends a subsequence of the specified CharSequence to this sequence."
    },
    {
        "function": "capacity",
        "parameters": [
            ""
        ],
        "comments": "Appends the string representation of the Object argument."
    },
    {
        "function": "charAt",
        "parameters": [
            "int"
        ],
        "comments": "Appends the specified string to this character sequence."
    },
    {
        "function": "chars",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified StringBuffer to this sequence."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "int"
        ],
        "comments": "Appends the string representation of the codePoint argument to this sequence."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current capacity."
    },
    {
        "function": "codePointCount",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the char value in this sequence at the specified index."
    },
    {
        "function": "codePoints",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of int zero-extending the char values from this sequence."
    },
    {
        "function": "compareTo",
        "parameters": [
            "StringBuffer"
        ],
        "comments": "Returns the character (Unicode code point) at the specified index."
    },
    {
        "function": "delete",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the character (Unicode code point) before the specified index."
    },
    {
        "function": "deleteCharAt",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of Unicode code points in the specified text range of this sequence."
    },
    {
        "function": "ensureCapacity",
        "parameters": [
            "int"
        ],
        "comments": "Returns a stream of code point values from this sequence."
    },
    {
        "function": "getChars",
        "parameters": [
            "int",
            "int",
            "char[]",
            "int"
        ],
        "comments": "Compares two StringBuffer instances lexicographically."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String"
        ],
        "comments": "Removes the characters in a substring of this sequence."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Removes the char at the specified position in this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Ensures that the capacity is at least equal to the specified minimum."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Characters are copied from this sequence into the destination character array dst."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char[]"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "double"
        ],
        "comments": "Inserts the string representation of the boolean argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "float"
        ],
        "comments": "Inserts the string representation of the char argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Inserts the string representation of the char array argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Inserts the string representation of a subarray of the str array argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "CharSequence"
        ],
        "comments": "Inserts the string representation of the double argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Inserts the string representation of the float argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "Object"
        ],
        "comments": "Inserts the string representation of the second int argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "String"
        ],
        "comments": "Inserts the string representation of the long argument into this sequence."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String"
        ],
        "comments": "Inserts the specified CharSequence into this sequence."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Inserts a subsequence of the specified CharSequence into this sequence."
    },
    {
        "function": "offsetByCodePoints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Inserts the string representation of the Object argument into this character sequence."
    },
    {
        "function": "replace",
        "parameters": [
            "int",
            "int",
            "String"
        ],
        "comments": "Inserts the string into this character sequence."
    },
    {
        "function": "reverse",
        "parameters": [
            ""
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring."
    },
    {
        "function": "setCharAt",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
    },
    {
        "function": "setLength",
        "parameters": [
            "int"
        ],
        "comments": "Returns the index within this sequence that is offset from the given index by codePointOffset code points."
    },
    {
        "function": "subSequence",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Replaces the characters in a substring of this sequence with characters in the specified String."
    },
    {
        "function": "substring",
        "parameters": [
            "int"
        ],
        "comments": "Causes this character sequence to be replaced by the reverse of the sequence."
    },
    {
        "function": "substring",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "The character at the specified index is set to ch."
    },
    {
        "function": "trimToSize",
        "parameters": [
            ""
        ],
        "comments": "Sets the length of the character sequence."
    },
    {
        "function": "append",
        "parameters": [
            "boolean"
        ],
        "comments": "Constructs a string builder with no characters in it and an initial capacity of 16 characters."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Constructs a string builder with no characters in it and an initial capacity specified by the capacity argument."
    },
    {
        "function": "append",
        "parameters": [
            "char[]"
        ],
        "comments": "Constructs a string builder that contains the same characters as the specified CharSequence."
    },
    {
        "function": "append",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Constructs a string builder initialized to the contents of the specified string."
    },
    {
        "function": "append",
        "parameters": [
            "double"
        ],
        "comments": "Appends the string representation of the boolean argument to the sequence."
    },
    {
        "function": "append",
        "parameters": [
            "float"
        ],
        "comments": "Appends the string representation of the char argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "int"
        ],
        "comments": "Appends the string representation of the char array argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "long"
        ],
        "comments": "Appends the string representation of a subarray of the char array argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Appends the string representation of the double argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends the string representation of the float argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "Object"
        ],
        "comments": "Appends the string representation of the int argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "String"
        ],
        "comments": "Appends the string representation of the long argument to this sequence."
    },
    {
        "function": "append",
        "parameters": [
            "StringBuffer"
        ],
        "comments": "Appends the specified character sequence to this Appendable."
    },
    {
        "function": "appendCodePoint",
        "parameters": [
            "int"
        ],
        "comments": "Appends a subsequence of the specified CharSequence to this sequence."
    },
    {
        "function": "capacity",
        "parameters": [
            ""
        ],
        "comments": "Appends the string representation of the Object argument."
    },
    {
        "function": "charAt",
        "parameters": [
            "int"
        ],
        "comments": "Appends the specified string to this character sequence."
    },
    {
        "function": "chars",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified StringBuffer to this sequence."
    },
    {
        "function": "codePointAt",
        "parameters": [
            "int"
        ],
        "comments": "Appends the string representation of the codePoint argument to this sequence."
    },
    {
        "function": "codePointBefore",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current capacity."
    },
    {
        "function": "codePointCount",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the char value in this sequence at the specified index."
    },
    {
        "function": "codePoints",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of int zero-extending the char values from this sequence."
    },
    {
        "function": "compareTo",
        "parameters": [
            "StringBuilder"
        ],
        "comments": "Returns the character (Unicode code point) at the specified index."
    },
    {
        "function": "delete",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the character (Unicode code point) before the specified index."
    },
    {
        "function": "deleteCharAt",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of Unicode code points in the specified text range of this sequence."
    },
    {
        "function": "ensureCapacity",
        "parameters": [
            "int"
        ],
        "comments": "Returns a stream of code point values from this sequence."
    },
    {
        "function": "getChars",
        "parameters": [
            "int",
            "int",
            "char[]",
            "int"
        ],
        "comments": "Compares two StringBuilder instances lexicographically."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String"
        ],
        "comments": "Removes the characters in a substring of this sequence."
    },
    {
        "function": "indexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Removes the char at the specified position in this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Ensures that the capacity is at least equal to the specified minimum."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Characters are copied from this sequence into the destination character array dst."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char[]"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "double"
        ],
        "comments": "Inserts the string representation of the boolean argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "float"
        ],
        "comments": "Inserts the string representation of the char argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Inserts the string representation of the char array argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Inserts the string representation of a subarray of the str array argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "CharSequence"
        ],
        "comments": "Inserts the string representation of the double argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Inserts the string representation of the float argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "Object"
        ],
        "comments": "Inserts the string representation of the second int argument into this sequence."
    },
    {
        "function": "insert",
        "parameters": [
            "int",
            "String"
        ],
        "comments": "Inserts the string representation of the long argument into this sequence."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String"
        ],
        "comments": "Inserts the specified CharSequence into this sequence."
    },
    {
        "function": "lastIndexOf",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Inserts a subsequence of the specified CharSequence into this sequence."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Inserts the string representation of the Object argument into this character sequence."
    },
    {
        "function": "offsetByCodePoints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Inserts the string into this character sequence."
    },
    {
        "function": "replace",
        "parameters": [
            "int",
            "int",
            "String"
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring."
    },
    {
        "function": "reverse",
        "parameters": [
            ""
        ],
        "comments": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index."
    },
    {
        "function": "setCharAt",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Returns the length (character count)."
    },
    {
        "function": "setLength",
        "parameters": [
            "int"
        ],
        "comments": "Returns the index within this sequence that is offset from the given index by codePointOffset code points."
    },
    {
        "function": "subSequence",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Replaces the characters in a substring of this sequence with characters in the specified String."
    },
    {
        "function": "substring",
        "parameters": [
            "int"
        ],
        "comments": "Causes this character sequence to be replaced by the reverse of the sequence."
    },
    {
        "function": "substring",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "The character at the specified index is set to ch."
    },
    {
        "function": "trimToSize",
        "parameters": [
            ""
        ],
        "comments": "Sets the length of the character sequence."
    },
    {
        "function": "arraycopy",
        "parameters": [
            "Object",
            "int",
            "Object",
            "int",
            "int"
        ],
        "comments": "Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array."
    },
    {
        "function": "clearProperty",
        "parameters": [
            "String"
        ],
        "comments": "Removes the system property indicated by the specified key."
    },
    {
        "function": "console",
        "parameters": [
            ""
        ],
        "comments": "Returns the unique Console object associated with the current Java virtual machine, if any."
    },
    {
        "function": "currentTimeMillis",
        "parameters": [
            ""
        ],
        "comments": "Returns the current time in milliseconds."
    },
    {
        "function": "exit",
        "parameters": [
            "int"
        ],
        "comments": "Terminates the currently running Java Virtual Machine."
    },
    {
        "function": "gc",
        "parameters": [
            ""
        ],
        "comments": "Runs the garbage collector."
    },
    {
        "function": "getenv",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable string map view of the current system environment."
    },
    {
        "function": "getenv",
        "parameters": [
            "String"
        ],
        "comments": "Gets the value of the specified environment variable."
    },
    {
        "function": "getLogger",
        "parameters": [
            "String"
        ],
        "comments": "Returns an instance of Logger for the caller's use."
    },
    {
        "function": "getLogger",
        "parameters": [
            "String",
            "ResourceBundle"
        ],
        "comments": "Returns a localizable instance of Logger for the caller's use."
    },
    {
        "function": "getProperties",
        "parameters": [
            ""
        ],
        "comments": "Determines the current system properties."
    },
    {
        "function": "getProperty",
        "parameters": [
            "String"
        ],
        "comments": "Gets the system property indicated by the specified key."
    },
    {
        "function": "getProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Gets the system property indicated by the specified key."
    },
    {
        "function": "getSecurityManager",
        "parameters": [
            ""
        ],
        "comments": "Gets the system security interface."
    },
    {
        "function": "identityHashCode",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode()."
    },
    {
        "function": "inheritedChannel",
        "parameters": [
            ""
        ],
        "comments": "Returns the channel inherited from the entity that created this Java virtual machine."
    },
    {
        "function": "lineSeparator",
        "parameters": [
            ""
        ],
        "comments": "Returns the system-dependent line separator string."
    },
    {
        "function": "load",
        "parameters": [
            "String"
        ],
        "comments": "Loads the native library specified by the filename argument."
    },
    {
        "function": "loadLibrary",
        "parameters": [
            "String"
        ],
        "comments": "Loads the native library specified by the libname argument."
    },
    {
        "function": "mapLibraryName",
        "parameters": [
            "String"
        ],
        "comments": "Maps a library name into a platform-specific string representing a native library."
    },
    {
        "function": "nanoTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds."
    },
    {
        "function": "runFinalization",
        "parameters": [
            ""
        ],
        "comments": "Runs the finalization methods of any objects pending finalization."
    },
    {
        "function": "setErr",
        "parameters": [
            "PrintStream"
        ],
        "comments": "Reassigns the \"standard\" error output stream."
    },
    {
        "function": "setIn",
        "parameters": [
            "InputStream"
        ],
        "comments": "Reassigns the \"standard\" input stream."
    },
    {
        "function": "setOut",
        "parameters": [
            "PrintStream"
        ],
        "comments": "Reassigns the \"standard\" output stream."
    },
    {
        "function": "setProperties",
        "parameters": [
            "Properties"
        ],
        "comments": "Sets the system properties to the Properties argument."
    },
    {
        "function": "setProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Sets the system property indicated by the specified key."
    },
    {
        "function": "setSecurityManager",
        "parameters": [
            "SecurityManager"
        ],
        "comments": "Sets the System security."
    },
    {
        "function": "getLocalizedLogger",
        "parameters": [
            "String",
            "ResourceBundle",
            "Module"
        ],
        "comments": "Creates a new instance of LoggerFinder."
    },
    {
        "function": "getLogger",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "Returns a localizable instance of Logger for the given module."
    },
    {
        "function": "getLoggerFinder",
        "parameters": [
            ""
        ],
        "comments": "Returns an instance of Logger for the given module."
    },
    {
        "function": "activeCount",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "checkAccess",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "countStackFrames",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "currentThread",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "dumpStack",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group."
    },
    {
        "function": "enumerate",
        "parameters": [
            "Thread[]"
        ],
        "comments": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size."
    },
    {
        "function": "getAllStackTraces",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, belongs to the thread group referred to by group, has the specified stackSize, and inherits initial values for inheritable thread-local variables if inheritThreadLocals is true."
    },
    {
        "function": "getContextClassLoader",
        "parameters": [
            ""
        ],
        "comments": "Allocates a new Thread object."
    },
    {
        "function": "getDefaultUncaughtExceptionHandler",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of active threads in the current thread's thread group and its subgroups."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Determines if the currently running thread has permission to modify this thread."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned."
    },
    {
        "function": "getPriority",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.The definition of this call depends on suspend(),             which is deprecated."
    },
    {
        "function": "getStackTrace",
        "parameters": [
            ""
        ],
        "comments": "Returns a reference to the currently executing thread object."
    },
    {
        "function": "getState",
        "parameters": [
            ""
        ],
        "comments": "Prints a stack trace of the current thread to the standard error stream."
    },
    {
        "function": "getThreadGroup",
        "parameters": [
            ""
        ],
        "comments": "Copies into the specified array every active thread in the current thread's thread group and its subgroups."
    },
    {
        "function": "getUncaughtExceptionHandler",
        "parameters": [
            ""
        ],
        "comments": "Returns a map of stack traces for all live threads."
    },
    {
        "function": "holdsLock",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the context ClassLoader for this thread."
    },
    {
        "function": "interrupt",
        "parameters": [
            ""
        ],
        "comments": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception."
    },
    {
        "function": "interrupted",
        "parameters": [
            ""
        ],
        "comments": "Returns the identifier of this Thread."
    },
    {
        "function": "isAlive",
        "parameters": [
            ""
        ],
        "comments": "Returns this thread's name."
    },
    {
        "function": "isDaemon",
        "parameters": [
            ""
        ],
        "comments": "Returns this thread's priority."
    },
    {
        "function": "isInterrupted",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of stack trace elements representing the stack dump of this thread."
    },
    {
        "function": "join",
        "parameters": [
            ""
        ],
        "comments": "Returns the state of this thread."
    },
    {
        "function": "join",
        "parameters": [
            "long"
        ],
        "comments": "Returns the thread group to which this thread belongs."
    },
    {
        "function": "join",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception."
    },
    {
        "function": "onSpinWait",
        "parameters": [
            ""
        ],
        "comments": "Returns true if and only if the current thread holds the monitor lock on the specified object."
    },
    {
        "function": "resume",
        "parameters": [
            ""
        ],
        "comments": "Interrupts this thread."
    },
    {
        "function": "run",
        "parameters": [
            ""
        ],
        "comments": "Tests whether the current thread has been interrupted."
    },
    {
        "function": "setContextClassLoader",
        "parameters": [
            "ClassLoader"
        ],
        "comments": "Tests if this thread is alive."
    },
    {
        "function": "setDaemon",
        "parameters": [
            "boolean"
        ],
        "comments": "Tests if this thread is a daemon thread."
    },
    {
        "function": "setDefaultUncaughtExceptionHandler",
        "parameters": [
            "Thread.UncaughtExceptionHandler"
        ],
        "comments": "Tests whether this thread has been interrupted."
    },
    {
        "function": "setName",
        "parameters": [
            "String"
        ],
        "comments": "Waits for this thread to die."
    },
    {
        "function": "setPriority",
        "parameters": [
            "int"
        ],
        "comments": "Waits at most millis milliseconds for this thread to die."
    },
    {
        "function": "setUncaughtExceptionHandler",
        "parameters": [
            "Thread.UncaughtExceptionHandler"
        ],
        "comments": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die."
    },
    {
        "function": "sleep",
        "parameters": [
            "long"
        ],
        "comments": "Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities."
    },
    {
        "function": "sleep",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Deprecated.This method exists solely for use with suspend(),     which has been deprecated because it is deadlock-prone."
    },
    {
        "function": "start",
        "parameters": [
            ""
        ],
        "comments": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns."
    },
    {
        "function": "stop",
        "parameters": [
            ""
        ],
        "comments": "Sets the context ClassLoader for this Thread."
    },
    {
        "function": "suspend",
        "parameters": [
            ""
        ],
        "comments": "Marks this thread as either a daemon thread or a user thread."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread."
    },
    {
        "function": "yield",
        "parameters": [
            ""
        ],
        "comments": "Changes the name of this thread to be equal to the argument name."
    },
    {
        "function": "activeCount",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new thread group."
    },
    {
        "function": "activeGroupCount",
        "parameters": [
            ""
        ],
        "comments": "Creates a new thread group."
    },
    {
        "function": "allowThreadSuspension",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns an estimate of the number of active threads in this thread group and its subgroups."
    },
    {
        "function": "checkAccess",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of active groups in this thread group and its subgroups."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The definition of this call depends on suspend(),             which is deprecated."
    },
    {
        "function": "enumerate",
        "parameters": [
            "Thread[]"
        ],
        "comments": "Determines if the currently running thread has permission to modify this thread group."
    },
    {
        "function": "enumerate",
        "parameters": [
            "Thread[]",
            "boolean"
        ],
        "comments": "Destroys this thread group and all of its subgroups."
    },
    {
        "function": "enumerate",
        "parameters": [
            "ThreadGroup[]"
        ],
        "comments": "Copies into the specified array every active thread in this thread group and its subgroups."
    },
    {
        "function": "enumerate",
        "parameters": [
            "ThreadGroup[]",
            "boolean"
        ],
        "comments": "Copies into the specified array every active thread in this thread group."
    },
    {
        "function": "getMaxPriority",
        "parameters": [
            ""
        ],
        "comments": "Copies into the specified array references to every active subgroup in this thread group and its subgroups."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Copies into the specified array references to every active subgroup in this thread group."
    },
    {
        "function": "getParent",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum priority of this thread group."
    },
    {
        "function": "interrupt",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this thread group."
    },
    {
        "function": "isDaemon",
        "parameters": [
            ""
        ],
        "comments": "Returns the parent of this thread group."
    },
    {
        "function": "isDestroyed",
        "parameters": [
            ""
        ],
        "comments": "Interrupts all threads in this thread group."
    },
    {
        "function": "list",
        "parameters": [
            ""
        ],
        "comments": "Tests if this thread group is a daemon thread group."
    },
    {
        "function": "parentOf",
        "parameters": [
            "ThreadGroup"
        ],
        "comments": "Tests if this thread group has been destroyed."
    },
    {
        "function": "resume",
        "parameters": [
            ""
        ],
        "comments": "Prints information about this thread group to the standard output."
    },
    {
        "function": "setDaemon",
        "parameters": [
            "boolean"
        ],
        "comments": "Tests if this thread group is either the thread group argument or one of its ancestor thread groups."
    },
    {
        "function": "setMaxPriority",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.This method is used solely in conjunction with       Thread.suspend and ThreadGroup.suspend,       both of which have been deprecated, as they are inherently       deadlock-prone."
    },
    {
        "function": "stop",
        "parameters": [
            ""
        ],
        "comments": "Changes the daemon status of this thread group."
    },
    {
        "function": "suspend",
        "parameters": [
            ""
        ],
        "comments": "Sets the maximum priority of the group."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.This method is inherently unsafe."
    },
    {
        "function": "uncaughtException",
        "parameters": [
            "Thread",
            "Throwable"
        ],
        "comments": "Deprecated.This method is inherently deadlock-prone."
    },
    {
        "function": "addSuppressed",
        "parameters": [
            "Throwable"
        ],
        "comments": "Constructs a new throwable with null as its detail message."
    },
    {
        "function": "fillInStackTrace",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new throwable with the specified detail message."
    },
    {
        "function": "getCause",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new throwable with the specified detail message and cause."
    },
    {
        "function": "getLocalizedMessage",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new throwable with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled."
    },
    {
        "function": "getMessage",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new throwable with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause)."
    },
    {
        "function": "getStackTrace",
        "parameters": [
            ""
        ],
        "comments": "Appends the specified exception to the exceptions that were suppressed in order to deliver this exception."
    },
    {
        "function": "getSuppressed",
        "parameters": [
            ""
        ],
        "comments": "Fills in the execution stack trace."
    },
    {
        "function": "initCause",
        "parameters": [
            "Throwable"
        ],
        "comments": "Returns the cause of this throwable or null if the cause is nonexistent or unknown."
    },
    {
        "function": "printStackTrace",
        "parameters": [
            ""
        ],
        "comments": "Creates a localized description of this throwable."
    },
    {
        "function": "printStackTrace",
        "parameters": [
            "PrintStream"
        ],
        "comments": "Returns the detail message string of this throwable."
    },
    {
        "function": "printStackTrace",
        "parameters": [
            "PrintWriter"
        ],
        "comments": "Provides programmatic access to the stack trace information printed by printStackTrace()."
    },
    {
        "function": "setStackTrace",
        "parameters": [
            "StackTraceElement[]"
        ],
        "comments": "Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Initializes the cause of this throwable to the specified value."
    },
    {
        "function": "forName",
        "parameters": [
            "String"
        ],
        "comments": "Unicode script \"Adlam\"."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Unicode script \"Ahom\"."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Unicode script \"Anatolian Hieroglyphs\"."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Unicode script \"Arabic\"."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The type of redirects returned from Redirect.appendTo(File)."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The type of Redirect.INHERIT."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Retains Class object in StackFrames walked by this StackWalker."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Shows all hidden frames."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "A marker to indicate that all levels are enabled."
    },
    {
        "function": "getSeverity",
        "parameters": [
            ""
        ],
        "comments": "DEBUG level: usually used to log debug information traces."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "ERROR level: usually used to log error messages."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "INFO level: usually used to log information messages."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Thread state for a thread blocked waiting for a monitor lock."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Thread state for a thread which has not yet started."
    },
    {
        "function": "annotationType",
        "parameters": [
            ""
        ],
        "comments": "Returns the annotation type of this annotation."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if the specified object represents an annotation that is logically equivalent to this one."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of this annotation, as defined below:"
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of this annotation."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Annotation type declaration"
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Constructor declaration"
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Annotations are to be recorded in the class file by the compiler but need not be retained by the VM at run time."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the class in which the cracked method handle's underlying member was defined."
    },
    {
        "function": "getMethodType",
        "parameters": [
            ""
        ],
        "comments": "Returns the nominal type of the cracked symbolic reference, expressed as a method type."
    },
    {
        "function": "getModifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the access modifiers of the underlying member."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the cracked method handle's underlying member."
    },
    {
        "function": "getReferenceKind",
        "parameters": [
            ""
        ],
        "comments": "Returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field."
    },
    {
        "function": "isVarArgs",
        "parameters": [
            ""
        ],
        "comments": "Determines if the underlying member was a variable arity method or constructor."
    },
    {
        "function": "referenceKindToString",
        "parameters": [
            "int"
        ],
        "comments": "Returns the descriptive name of the given reference kind, as defined in the table above."
    },
    {
        "function": "reflectAs",
        "parameters": [
            "Class<T>",
            "MethodHandles.Lookup"
        ],
        "comments": "Reflects the underlying member as a method, constructor, or field object."
    },
    {
        "function": "toString",
        "parameters": [
            "int",
            "Class<?>",
            "String",
            "MethodType"
        ],
        "comments": "Returns a string representation for a MethodHandleInfo, given the four parts of its symbolic reference."
    },
    {
        "function": "dynamicInvoker",
        "parameters": [
            ""
        ],
        "comments": "Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site."
    },
    {
        "function": "getTarget",
        "parameters": [
            ""
        ],
        "comments": "Returns the target method of the call site, according to the behavior defined by this call site's specific class."
    },
    {
        "function": "setTarget",
        "parameters": [
            "MethodHandle"
        ],
        "comments": "Updates the target method of this call site, according to the behavior defined by this call site's specific class."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Returns the type of this call site's target."
    },
    {
        "function": "arrayVarHandle",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<VarHandle>",
            "Class<?>"
        ],
        "comments": "Finds a VarHandle for an array type."
    },
    {
        "function": "enumConstant",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<E>"
        ],
        "comments": "Returns an enum constant of the type specified by type with the name specified by name."
    },
    {
        "function": "fieldVarHandle",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<VarHandle>",
            "Class<?>",
            "Class<?>"
        ],
        "comments": "Finds a VarHandle for an instance field."
    },
    {
        "function": "getStaticFinal",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<?>"
        ],
        "comments": "Returns the value of a static final field declared in the class which is the same as the field's type (or, for primitive-valued fields, declared in the wrapper class.)"
    },
    {
        "function": "getStaticFinal",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<?>",
            "Class<?>"
        ],
        "comments": "Returns the value of a static final field."
    },
    {
        "function": "invoke",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<?>",
            "MethodHandle",
            "Object..."
        ],
        "comments": "Returns the result of invoking a method handle with the provided arguments."
    },
    {
        "function": "nullConstant",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<?>"
        ],
        "comments": "Returns a null object reference for the reference type specified by type."
    },
    {
        "function": "primitiveClass",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<?>"
        ],
        "comments": "Returns a Class mirror for the primitive type whose type descriptor is specified by name."
    },
    {
        "function": "staticFieldVarHandle",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "Class<VarHandle>",
            "Class<?>",
            "Class<?>"
        ],
        "comments": "Finds a VarHandle for a static field."
    },
    {
        "function": "dynamicInvoker",
        "parameters": [
            ""
        ],
        "comments": "Creates a call site with a permanent target."
    },
    {
        "function": "getTarget",
        "parameters": [
            ""
        ],
        "comments": "Creates a call site with a permanent target, possibly bound to the call site itself."
    },
    {
        "function": "setTarget",
        "parameters": [
            "MethodHandle"
        ],
        "comments": "Returns this call site's permanent target."
    },
    {
        "function": "altMetafactory",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "MethodType",
            "Object..."
        ],
        "comments": "Facilitates the creation of simple \"function objects\" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments."
    },
    {
        "function": "metafactory",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "MethodType",
            "MethodType",
            "MethodHandle",
            "MethodType"
        ],
        "comments": "Facilitates the creation of simple \"function objects\" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments."
    },
    {
        "function": "asCollector",
        "parameters": [
            "int",
            "Class<?>",
            "int"
        ],
        "comments": "Makes an array-collecting method handle, which accepts a given number of positional arguments starting at a given position, and collects them into an array argument."
    },
    {
        "function": "asCollector",
        "parameters": [
            "Class<?>",
            "int"
        ],
        "comments": "Makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument."
    },
    {
        "function": "asFixedArity",
        "parameters": [
            ""
        ],
        "comments": "Makes a fixed arity method handle which is otherwise equivalent to the current method handle."
    },
    {
        "function": "asSpreader",
        "parameters": [
            "int",
            "Class<?>",
            "int"
        ],
        "comments": "Makes an array-spreading method handle, which accepts an array argument at a given position and spreads its elements as positional arguments in place of the array."
    },
    {
        "function": "asSpreader",
        "parameters": [
            "Class<?>",
            "int"
        ],
        "comments": "Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments."
    },
    {
        "function": "asType",
        "parameters": [
            "MethodType"
        ],
        "comments": "Produces an adapter method handle which adapts the type of the current method handle to a new type."
    },
    {
        "function": "asVarargsCollector",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument."
    },
    {
        "function": "bindTo",
        "parameters": [
            "Object"
        ],
        "comments": "Binds a value x to the first argument of a method handle, without invoking it."
    },
    {
        "function": "invoke",
        "parameters": [
            "Object..."
        ],
        "comments": "Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values."
    },
    {
        "function": "invokeExact",
        "parameters": [
            "Object..."
        ],
        "comments": "Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match."
    },
    {
        "function": "invokeWithArguments",
        "parameters": [
            "Object..."
        ],
        "comments": "Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument array."
    },
    {
        "function": "invokeWithArguments",
        "parameters": [
            "List<?>"
        ],
        "comments": "Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument list."
    },
    {
        "function": "isVarargsCollector",
        "parameters": [
            ""
        ],
        "comments": "Determines if this method handle supports variable arity calls."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the method handle, starting with the string \"MethodHandle\" and ending with the string representation of the method handle's type."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Reports the type of this method handle."
    },
    {
        "function": "withVarargs",
        "parameters": [
            "boolean"
        ],
        "comments": "Adapts this method handle to be variable arity if the boolean flag is true, else fixed arity."
    },
    {
        "function": "asInterfaceInstance",
        "parameters": [
            "Class<T>",
            "MethodHandle"
        ],
        "comments": "Produces an instance of the given single-method interface which redirects its calls to the given method handle."
    },
    {
        "function": "isWrapperInstance",
        "parameters": [
            "Object"
        ],
        "comments": "Determines if the given object was produced by a call to asInterfaceInstance."
    },
    {
        "function": "wrapperInstanceTarget",
        "parameters": [
            "Object"
        ],
        "comments": "Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance."
    },
    {
        "function": "wrapperInstanceType",
        "parameters": [
            "Object"
        ],
        "comments": "Recovers the unique single-method interface type for which this wrapper instance was created."
    },
    {
        "function": "arrayConstructor",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a method handle constructing arrays of a desired type, as if by the anewarray bytecode."
    },
    {
        "function": "arrayElementGetter",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a method handle giving read access to elements of an array, as if by the aaload bytecode."
    },
    {
        "function": "arrayElementSetter",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a method handle giving write access to elements of an array, as if by the astore bytecode."
    },
    {
        "function": "arrayElementVarHandle",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a VarHandle giving access to elements of an array of type arrayClass."
    },
    {
        "function": "arrayLength",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a method handle returning the length of an array, as if by the arraylength bytecode."
    },
    {
        "function": "byteArrayViewVarHandle",
        "parameters": [
            "Class<?>",
            "ByteOrder"
        ],
        "comments": "Produces a VarHandle giving access to elements of a byte[] array viewed as if it were a different primitive array type, such as int[] or long[]."
    },
    {
        "function": "byteBufferViewVarHandle",
        "parameters": [
            "Class<?>",
            "ByteOrder"
        ],
        "comments": "Produces a VarHandle giving access to elements of a ByteBuffer viewed as if it were an array of elements of a different primitive component type to that of byte, such as int[] or long[]."
    },
    {
        "function": "catchException",
        "parameters": [
            "MethodHandle",
            "Class<?",
            "MethodHandle"
        ],
        "comments": "Makes a method handle which adapts a target method handle, by running it inside an exception handler."
    },
    {
        "function": "collectArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "MethodHandle"
        ],
        "comments": "Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle)."
    },
    {
        "function": "constant",
        "parameters": [
            "Class<?>",
            "Object"
        ],
        "comments": "Produces a method handle of the requested return type which returns the given constant value every time it is invoked."
    },
    {
        "function": "countedLoop",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Constructs a loop that runs a given number of iterations."
    },
    {
        "function": "countedLoop",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Constructs a loop that counts over a range of numbers."
    },
    {
        "function": "doWhileLoop",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Constructs a do-while loop from an initializer, a body, and a predicate."
    },
    {
        "function": "dropArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "Class<?>..."
        ],
        "comments": "Produces a method handle which will discard some dummy arguments before calling some other specified target method handle."
    },
    {
        "function": "dropArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "List<Class<?>>"
        ],
        "comments": "Produces a method handle which will discard some dummy arguments before calling some other specified target method handle."
    },
    {
        "function": "dropArgumentsToMatch",
        "parameters": [
            "MethodHandle",
            "int",
            "List<Class<?>>",
            "int"
        ],
        "comments": "Adapts a target method handle to match the given parameter type list."
    },
    {
        "function": "empty",
        "parameters": [
            "MethodType"
        ],
        "comments": "Produces a method handle of the requested type which ignores any arguments, does nothing, and returns a suitable default depending on the return type."
    },
    {
        "function": "exactInvoker",
        "parameters": [
            "MethodType"
        ],
        "comments": "Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by invokeExact."
    },
    {
        "function": "explicitCastArguments",
        "parameters": [
            "MethodHandle",
            "MethodType"
        ],
        "comments": "Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion."
    },
    {
        "function": "filterArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "MethodHandle..."
        ],
        "comments": "Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function."
    },
    {
        "function": "filterReturnValue",
        "parameters": [
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle)."
    },
    {
        "function": "foldArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "MethodHandle"
        ],
        "comments": "Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments just before the folded arguments."
    },
    {
        "function": "foldArguments",
        "parameters": [
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments."
    },
    {
        "function": "guardWithTest",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle."
    },
    {
        "function": "identity",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a method handle which returns its sole argument when invoked."
    },
    {
        "function": "insertArguments",
        "parameters": [
            "MethodHandle",
            "int",
            "Object..."
        ],
        "comments": "Provides a target method handle with one or more bound arguments in advance of the method handle's invocation."
    },
    {
        "function": "invoker",
        "parameters": [
            "MethodType"
        ],
        "comments": "Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by invoke."
    },
    {
        "function": "iteratedLoop",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Constructs a loop that ranges over the values produced by an Iterator<T>."
    },
    {
        "function": "lookup",
        "parameters": [
            ""
        ],
        "comments": "Returns a lookup object with full capabilities to emulate all supported bytecode behaviors of the caller."
    },
    {
        "function": "loop",
        "parameters": [
            "MethodHandle[]..."
        ],
        "comments": "Constructs a method handle representing a loop with several loop variables that are updated and checked upon each iteration."
    },
    {
        "function": "permuteArguments",
        "parameters": [
            "MethodHandle",
            "MethodType",
            "int..."
        ],
        "comments": "Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments."
    },
    {
        "function": "privateLookupIn",
        "parameters": [
            "Class<?>",
            "MethodHandles.Lookup"
        ],
        "comments": "Returns a lookup object with full capabilities to emulate all supported bytecode behaviors, including  private access, on a target class."
    },
    {
        "function": "publicLookup",
        "parameters": [
            ""
        ],
        "comments": "Returns a lookup object which is trusted minimally."
    },
    {
        "function": "reflectAs",
        "parameters": [
            "Class<T>",
            "MethodHandle"
        ],
        "comments": "Performs an unchecked \"crack\" of a direct method handle."
    },
    {
        "function": "spreadInvoker",
        "parameters": [
            "MethodType",
            "int"
        ],
        "comments": "Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array."
    },
    {
        "function": "throwException",
        "parameters": [
            "Class<?>",
            "Class<?"
        ],
        "comments": "Produces a method handle which will throw exceptions of the given exType."
    },
    {
        "function": "tryFinally",
        "parameters": [
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Makes a method handle that adapts a target method handle by wrapping it in a try-finally block."
    },
    {
        "function": "varHandleExactInvoker",
        "parameters": [
            "VarHandle.AccessMode",
            "MethodType"
        ],
        "comments": "Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type."
    },
    {
        "function": "varHandleInvoker",
        "parameters": [
            "VarHandle.AccessMode",
            "MethodType"
        ],
        "comments": "Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type."
    },
    {
        "function": "whileLoop",
        "parameters": [
            "MethodHandle",
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Constructs a while loop from an initializer, a body, and a predicate."
    },
    {
        "function": "zero",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked."
    },
    {
        "function": "accessClass",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Determines if a class can be accessed from the lookup context defined by this Lookup object."
    },
    {
        "function": "bind",
        "parameters": [
            "Object",
            "String",
            "MethodType"
        ],
        "comments": "Produces an early-bound method handle for a non-static method."
    },
    {
        "function": "defineClass",
        "parameters": [
            "byte[]"
        ],
        "comments": "Defines a class to the same class loader and in the same runtime package and protection domain as this lookup's lookup class."
    },
    {
        "function": "dropLookupMode",
        "parameters": [
            "int"
        ],
        "comments": "Creates a lookup on the same lookup class which this lookup object finds members, but with a lookup mode that has lost the given lookup mode."
    },
    {
        "function": "findClass",
        "parameters": [
            "String"
        ],
        "comments": "Looks up a class by name from the lookup context defined by this Lookup object."
    },
    {
        "function": "findConstructor",
        "parameters": [
            "Class<?>",
            "MethodType"
        ],
        "comments": "Produces a method handle which creates an object and initializes it, using the constructor of the specified type."
    },
    {
        "function": "findGetter",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a method handle giving read access to a non-static field."
    },
    {
        "function": "findSetter",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a method handle giving write access to a non-static field."
    },
    {
        "function": "findSpecial",
        "parameters": [
            "Class<?>",
            "String",
            "MethodType",
            "Class<?>"
        ],
        "comments": "Produces an early-bound method handle for a virtual method."
    },
    {
        "function": "findStatic",
        "parameters": [
            "Class<?>",
            "String",
            "MethodType"
        ],
        "comments": "Produces a method handle for a static method."
    },
    {
        "function": "findStaticGetter",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a method handle giving read access to a static field."
    },
    {
        "function": "findStaticSetter",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a method handle giving write access to a static field."
    },
    {
        "function": "findStaticVarHandle",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a VarHandle giving access to a static field name of type type declared in a class of type decl."
    },
    {
        "function": "findVarHandle",
        "parameters": [
            "Class<?>",
            "String",
            "Class<?>"
        ],
        "comments": "Produces a VarHandle giving access to a non-static field name of type type declared in a class of type recv."
    },
    {
        "function": "findVirtual",
        "parameters": [
            "Class<?>",
            "String",
            "MethodType"
        ],
        "comments": "Produces a method handle for a virtual method."
    },
    {
        "function": "hasPrivateAccess",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this lookup has PRIVATE access."
    },
    {
        "function": "in",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Creates a lookup on the specified new lookup class."
    },
    {
        "function": "lookupClass",
        "parameters": [
            ""
        ],
        "comments": "Tells which class is performing the lookup."
    },
    {
        "function": "lookupModes",
        "parameters": [
            ""
        ],
        "comments": "Tells which access-protection classes of members this lookup object can produce."
    },
    {
        "function": "revealDirect",
        "parameters": [
            "MethodHandle"
        ],
        "comments": "Cracks a direct method handle created by this lookup object or a similar one."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Displays the name of the class from which lookups are to be made."
    },
    {
        "function": "unreflect",
        "parameters": [
            "Method"
        ],
        "comments": "Makes a direct method handle to m, if the lookup class has permission."
    },
    {
        "function": "unreflectConstructor",
        "parameters": [
            "Constructor<?>"
        ],
        "comments": "Produces a method handle for a reflected constructor."
    },
    {
        "function": "unreflectGetter",
        "parameters": [
            "Field"
        ],
        "comments": "Produces a method handle giving read access to a reflected field."
    },
    {
        "function": "unreflectSetter",
        "parameters": [
            "Field"
        ],
        "comments": "Produces a method handle giving write access to a reflected field."
    },
    {
        "function": "unreflectSpecial",
        "parameters": [
            "Method",
            "Class<?>"
        ],
        "comments": "Produces a method handle for a reflected method."
    },
    {
        "function": "unreflectVarHandle",
        "parameters": [
            "Field"
        ],
        "comments": "Produces a VarHandle giving access to a reflected field f of type T declared in a class of type R."
    },
    {
        "function": "appendParameterTypes",
        "parameters": [
            "Class<?>..."
        ],
        "comments": "Finds or creates a method type with additional parameter types."
    },
    {
        "function": "appendParameterTypes",
        "parameters": [
            "List<Class<?>>"
        ],
        "comments": "Finds or creates a method type with additional parameter types."
    },
    {
        "function": "changeParameterType",
        "parameters": [
            "int",
            "Class<?>"
        ],
        "comments": "Finds or creates a method type with a single different parameter type."
    },
    {
        "function": "changeReturnType",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Finds or creates a method type with a different return type."
    },
    {
        "function": "dropParameterTypes",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Finds or creates a method type with some parameter types omitted."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the specified object with this type for equality."
    },
    {
        "function": "erase",
        "parameters": [
            ""
        ],
        "comments": "Erases all reference types to Object."
    },
    {
        "function": "fromMethodDescriptorString",
        "parameters": [
            "String",
            "ClassLoader"
        ],
        "comments": "Finds or creates an instance of a method type, given the spelling of its bytecode descriptor."
    },
    {
        "function": "generic",
        "parameters": [
            ""
        ],
        "comments": "Converts all types, both reference and primitive, to Object."
    },
    {
        "function": "genericMethodType",
        "parameters": [
            "int"
        ],
        "comments": "Finds or creates a method type whose components are all Object."
    },
    {
        "function": "genericMethodType",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Finds or creates a method type whose components are Object with an optional trailing Object[] array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this method type."
    },
    {
        "function": "hasPrimitives",
        "parameters": [
            ""
        ],
        "comments": "Reports if this type contains a primitive argument or return value."
    },
    {
        "function": "hasWrappers",
        "parameters": [
            ""
        ],
        "comments": "Reports if this type contains a wrapper argument or return value."
    },
    {
        "function": "insertParameterTypes",
        "parameters": [
            "int",
            "Class<?>..."
        ],
        "comments": "Finds or creates a method type with additional parameter types."
    },
    {
        "function": "insertParameterTypes",
        "parameters": [
            "int",
            "List<Class<?>>"
        ],
        "comments": "Finds or creates a method type with additional parameter types."
    },
    {
        "function": "lastParameterType",
        "parameters": [
            ""
        ],
        "comments": "Returns the last parameter type of this method type."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Finds or creates a method type with the given components."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>",
            "Class<?>"
        ],
        "comments": "Finds or creates a method type with the given components."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>",
            "Class<?>[]"
        ],
        "comments": "Finds or creates an instance of the given method type."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>",
            "Class<?>",
            "Class<?>..."
        ],
        "comments": "Finds or creates a method type with the given components."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>",
            "MethodType"
        ],
        "comments": "Finds or creates a method type with the given components."
    },
    {
        "function": "methodType",
        "parameters": [
            "Class<?>",
            "List<Class<?>>"
        ],
        "comments": "Finds or creates a method type with the given components."
    },
    {
        "function": "parameterArray",
        "parameters": [
            ""
        ],
        "comments": "Presents the parameter types as an array (a convenience method)."
    },
    {
        "function": "parameterCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of parameter types in this method type."
    },
    {
        "function": "parameterList",
        "parameters": [
            ""
        ],
        "comments": "Presents the parameter types as a list (a convenience method)."
    },
    {
        "function": "parameterType",
        "parameters": [
            "int"
        ],
        "comments": "Returns the parameter type at the specified index, within this method type."
    },
    {
        "function": "returnType",
        "parameters": [
            ""
        ],
        "comments": "Returns the return type of this method type."
    },
    {
        "function": "toMethodDescriptorString",
        "parameters": [
            ""
        ],
        "comments": "Produces a bytecode descriptor representation of the method type."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the method type, of the form \"(PT0,PT1...)RT\"."
    },
    {
        "function": "unwrap",
        "parameters": [
            ""
        ],
        "comments": "Converts all wrapper types to their corresponding primitive types."
    },
    {
        "function": "wrap",
        "parameters": [
            ""
        ],
        "comments": "Converts all primitive types to their corresponding wrapper types."
    },
    {
        "function": "getTarget",
        "parameters": [
            ""
        ],
        "comments": "Creates a call site object with an initial target method handle."
    },
    {
        "function": "setTarget",
        "parameters": [
            "MethodHandle"
        ],
        "comments": "Creates a blank call site object with the given method type."
    },
    {
        "function": "syncAll",
        "parameters": [
            "MutableCallSite[]"
        ],
        "comments": "Returns the target method of the call site, which behaves like a normal field of the MutableCallSite."
    },
    {
        "function": "getCapturedArg",
        "parameters": [
            "int"
        ],
        "comments": "Create a SerializedLambda from the low-level information present at the lambda factory site."
    },
    {
        "function": "getCapturedArgCount",
        "parameters": [
            ""
        ],
        "comments": "Get a dynamic argument to the lambda capture site."
    },
    {
        "function": "getCapturingClass",
        "parameters": [
            ""
        ],
        "comments": "Get the count of dynamic arguments to the lambda capture site."
    },
    {
        "function": "getFunctionalInterfaceClass",
        "parameters": [
            ""
        ],
        "comments": "Get the name of the class that captured this lambda."
    },
    {
        "function": "getFunctionalInterfaceMethodName",
        "parameters": [
            ""
        ],
        "comments": "Get the name of the invoked type to which this lambda has been converted"
    },
    {
        "function": "getFunctionalInterfaceMethodSignature",
        "parameters": [
            ""
        ],
        "comments": "Get the name of the primary method for the functional interface to which this lambda has been converted."
    },
    {
        "function": "getImplClass",
        "parameters": [
            ""
        ],
        "comments": "Get the signature of the primary method for the functional interface to which this lambda has been converted."
    },
    {
        "function": "getImplMethodKind",
        "parameters": [
            ""
        ],
        "comments": "Get the name of the class containing the implementation method."
    },
    {
        "function": "getImplMethodName",
        "parameters": [
            ""
        ],
        "comments": "Get the method handle kind (see MethodHandleInfo) of the implementation method."
    },
    {
        "function": "getImplMethodSignature",
        "parameters": [
            ""
        ],
        "comments": "Get the name of the implementation method."
    },
    {
        "function": "getInstantiatedMethodType",
        "parameters": [
            ""
        ],
        "comments": "Get the signature of the implementation method."
    },
    {
        "function": "makeConcat",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "MethodType"
        ],
        "comments": "Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments."
    },
    {
        "function": "makeConcatWithConstants",
        "parameters": [
            "MethodHandles.Lookup",
            "String",
            "MethodType",
            "String",
            "Object..."
        ],
        "comments": "Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments."
    },
    {
        "function": "guardWithTest",
        "parameters": [
            "MethodHandle",
            "MethodHandle"
        ],
        "comments": "Creates a new switch point."
    },
    {
        "function": "hasBeenInvalidated",
        "parameters": [
            ""
        ],
        "comments": "Returns a method handle which always delegates either to the target or the fallback."
    },
    {
        "function": "invalidateAll",
        "parameters": [
            "SwitchPoint[]"
        ],
        "comments": "Determines if this switch point has been invalidated yet."
    },
    {
        "function": "accessModeType",
        "parameters": [
            "VarHandle.AccessMode"
        ],
        "comments": "Obtains the access mode type for this VarHandle and a given access mode."
    },
    {
        "function": "acquireFence",
        "parameters": [
            ""
        ],
        "comments": "Ensures that loads before the fence will not be reordered with loads and stores after the fence."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of setVolatile(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of set(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of setRelease(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of setVolatile(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "coordinateTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns the coordinate types for this VarHandle."
    },
    {
        "function": "fullFence",
        "parameters": [
            ""
        ],
        "comments": "Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence."
    },
    {
        "function": "get",
        "parameters": [
            "Object..."
        ],
        "comments": "Returns the value of a variable, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "getAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Returns the value of a variable, and ensures that subsequent loads and stores are not reordered before this access."
    },
    {
        "function": "getAndAdd",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically adds the value to the current value of a variable with the memory semantics of setVolatile(java.lang.Object...), and returns the variable's previous value, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAddAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically adds the value to the current value of a variable with the memory semantics of set(java.lang.Object...), and returns the variable's previous value, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndAddRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically adds the value to the current value of a variable with the memory semantics of setRelease(java.lang.Object...), and returns the variable's previous value, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseAnd",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of setVolatile(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseAndAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of set(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseAndRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of setRelease(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseOr",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of setVolatile(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseOrAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of set(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseOrRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of setRelease(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseXor",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of setVolatile(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseXorAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of set(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndBitwiseXorRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of setRelease(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of setVolatile(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndSetAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of set(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndSetRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Atomically sets the value of a variable to the newValue with the memory semantics of setRelease(java.lang.Object...) and returns the variable's previous value, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            "Object..."
        ],
        "comments": "Returns the value of a variable, accessed in program order, but with no assurance of memory ordering effects with respect to other threads."
    },
    {
        "function": "getVolatile",
        "parameters": [
            "Object..."
        ],
        "comments": "Returns the value of a variable, with memory semantics of reading as if the variable was declared volatile."
    },
    {
        "function": "isAccessModeSupported",
        "parameters": [
            "VarHandle.AccessMode"
        ],
        "comments": "Returns true if the given access mode is supported, otherwise false."
    },
    {
        "function": "loadLoadFence",
        "parameters": [
            ""
        ],
        "comments": "Ensures that loads before the fence will not be reordered with loads after the fence."
    },
    {
        "function": "releaseFence",
        "parameters": [
            ""
        ],
        "comments": "Ensures that loads and stores before the fence will not be reordered with stores after the fence."
    },
    {
        "function": "set",
        "parameters": [
            "Object..."
        ],
        "comments": "Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "Object..."
        ],
        "comments": "Sets the value of a variable to the newValue, in program order, but with no assurance of memory ordering effects with respect to other threads."
    },
    {
        "function": "setRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Sets the value of a variable to the newValue, and ensures that prior loads and stores are not reordered after this access."
    },
    {
        "function": "setVolatile",
        "parameters": [
            "Object..."
        ],
        "comments": "Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared volatile."
    },
    {
        "function": "storeStoreFence",
        "parameters": [
            ""
        ],
        "comments": "Ensures that stores before the fence will not be reordered with stores after the fence."
    },
    {
        "function": "toMethodHandle",
        "parameters": [
            "VarHandle.AccessMode"
        ],
        "comments": "Obtains a method handle bound to this VarHandle and the given access mode."
    },
    {
        "function": "varType",
        "parameters": [
            ""
        ],
        "comments": "Returns the variable type of variables referenced by this VarHandle."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "Object..."
        ],
        "comments": "Possibly atomically sets the value of a variable to the newValue with the memory semantics of setVolatile(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of getVolatile(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "Object..."
        ],
        "comments": "Possibly atomically sets the value of a variable to the newValue with the semantics of set(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of getAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "Object..."
        ],
        "comments": "Possibly atomically sets the value of a variable to the newValue with the semantics of set(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "Object..."
        ],
        "comments": "Possibly atomically sets the value of a variable to the newValue with the semantics of setRelease(java.lang.Object...) if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of get(java.lang.Object...)."
    },
    {
        "function": "getTarget",
        "parameters": [
            ""
        ],
        "comments": "Creates a call site with a volatile binding to its target."
    },
    {
        "function": "setTarget",
        "parameters": [
            "MethodHandle"
        ],
        "comments": "Creates a call site with a volatile binding to its target."
    },
    {
        "function": "methodName",
        "parameters": [
            ""
        ],
        "comments": "The access mode whose access is specified by the corresponding method VarHandle.compareAndExchange"
    },
    {
        "function": "valueFromMethodName",
        "parameters": [
            "String"
        ],
        "comments": "The access mode whose access is specified by the corresponding method VarHandle.compareAndExchangeAcquire"
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The access mode whose access is specified by the corresponding method VarHandle.compareAndExchangeRelease"
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The access mode whose access is specified by the corresponding method VarHandle.compareAndSet"
    },
    {
        "function": "compose",
        "parameters": [
            "ModuleFinder..."
        ],
        "comments": "Returns a module finder that is composed from a sequence of zero or more module finders."
    },
    {
        "function": "find",
        "parameters": [
            "String"
        ],
        "comments": "Finds a reference to a module of a given name."
    },
    {
        "function": "findAll",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of all module references that this finder can locate."
    },
    {
        "function": "of",
        "parameters": [
            "Path..."
        ],
        "comments": "Returns a module finder that locates modules on the file system by searching a sequence of directories and/or packaged modules."
    },
    {
        "function": "ofSystem",
        "parameters": [
            ""
        ],
        "comments": "Returns a module finder that locates the system modules."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes the module reader."
    },
    {
        "function": "find",
        "parameters": [
            "String"
        ],
        "comments": "Finds a resource, returning a URI to the resource in the module."
    },
    {
        "function": "list",
        "parameters": [
            ""
        ],
        "comments": "Lists the contents of the module, returning a stream of elements that are the names of all resources in the module."
    },
    {
        "function": "open",
        "parameters": [
            "String"
        ],
        "comments": "Opens a resource, returning an input stream to read the resource in the module."
    },
    {
        "function": "read",
        "parameters": [
            "String"
        ],
        "comments": "Reads a resource, returning a byte buffer with the contents of the resource."
    },
    {
        "function": "release",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Release a byte buffer."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns the empty configuration."
    },
    {
        "function": "findModule",
        "parameters": [
            "String"
        ],
        "comments": "Finds a resolved module in this configuration, or if not in this configuration, the parent configurations."
    },
    {
        "function": "modules",
        "parameters": [
            ""
        ],
        "comments": "Returns an immutable set of the resolved modules in this configuration."
    },
    {
        "function": "parents",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable list of this configuration's parents, in search order."
    },
    {
        "function": "resolve",
        "parameters": [
            "ModuleFinder",
            "ModuleFinder",
            "Collection<String>"
        ],
        "comments": "Resolves a collection of root modules, with this configuration as its parent, to create a new configuration."
    },
    {
        "function": "resolve",
        "parameters": [
            "ModuleFinder",
            "List<Configuration>",
            "ModuleFinder",
            "Collection<String>"
        ],
        "comments": "Resolves a collection of root modules to create a configuration."
    },
    {
        "function": "resolveAndBind",
        "parameters": [
            "ModuleFinder",
            "ModuleFinder",
            "Collection<String>"
        ],
        "comments": "Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration."
    },
    {
        "function": "resolveAndBind",
        "parameters": [
            "ModuleFinder",
            "List<Configuration>",
            "ModuleFinder",
            "Collection<String>"
        ],
        "comments": "Resolves a collection of root modules, with service binding, to create configuration."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this configuration."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor"
        ],
        "comments": "Compares this module descriptor to another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this module descriptor for equality with the given object."
    },
    {
        "function": "exports",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of Exports objects representing the exported packages."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this module descriptor."
    },
    {
        "function": "isAutomatic",
        "parameters": [
            ""
        ],
        "comments": " Returns true if this is an automatic module."
    },
    {
        "function": "isOpen",
        "parameters": [
            ""
        ],
        "comments": " Returns true if this is an open module."
    },
    {
        "function": "mainClass",
        "parameters": [
            ""
        ],
        "comments": " Returns the module main class."
    },
    {
        "function": "modifiers",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of module modifiers."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": " Returns the module name."
    },
    {
        "function": "newAutomaticModule",
        "parameters": [
            "String"
        ],
        "comments": "Instantiates a builder to build a module descriptor for an automatic module."
    },
    {
        "function": "newModule",
        "parameters": [
            "String"
        ],
        "comments": "Instantiates a builder to build a module descriptor for a normal module."
    },
    {
        "function": "newModule",
        "parameters": [
            "String",
            "Set<ModuleDescriptor.Modifier>"
        ],
        "comments": "Instantiates a builder to build a module descriptor."
    },
    {
        "function": "newOpenModule",
        "parameters": [
            "String"
        ],
        "comments": "Instantiates a builder to build a module descriptor for an open module."
    },
    {
        "function": "opens",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of Opens objects representing the open packages."
    },
    {
        "function": "packages",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of packages in the module."
    },
    {
        "function": "provides",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of Provides objects representing the services that the module provides."
    },
    {
        "function": "rawVersion",
        "parameters": [
            ""
        ],
        "comments": " Returns the string with the possibly-unparseable version of the module"
    },
    {
        "function": "read",
        "parameters": [
            "InputStream"
        ],
        "comments": "Reads the binary form of a module declaration from an input stream as a module descriptor."
    },
    {
        "function": "read",
        "parameters": [
            "InputStream",
            "Supplier<Set<String>>"
        ],
        "comments": "Reads the binary form of a module declaration from an input stream as a module descriptor."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Reads the binary form of a module declaration from a byte buffer as a module descriptor."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "Supplier<Set<String>>"
        ],
        "comments": "Reads the binary form of a module declaration from a byte buffer as a module descriptor."
    },
    {
        "function": "requires",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of Requires objects representing the module dependences."
    },
    {
        "function": "toNameAndVersion",
        "parameters": [
            ""
        ],
        "comments": " Returns a string containing the module name and, if present, its version."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": " Returns a string describing the module."
    },
    {
        "function": "uses",
        "parameters": [
            ""
        ],
        "comments": " Returns the set of service dependences."
    },
    {
        "function": "version",
        "parameters": [
            ""
        ],
        "comments": " Returns the module version."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Builds and returns a ModuleDescriptor from its components."
    },
    {
        "function": "exports",
        "parameters": [
            "ModuleDescriptor.Exports"
        ],
        "comments": "Adds an exported package."
    },
    {
        "function": "exports",
        "parameters": [
            "String"
        ],
        "comments": "Adds an exported package."
    },
    {
        "function": "exports",
        "parameters": [
            "String",
            "Set<String>"
        ],
        "comments": "Adds an exported package."
    },
    {
        "function": "exports",
        "parameters": [
            "Set<ModuleDescriptor.Exports.Modifier>",
            "String"
        ],
        "comments": "Adds an exported package with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "exports",
        "parameters": [
            "Set<ModuleDescriptor.Exports.Modifier>",
            "String",
            "Set<String>"
        ],
        "comments": "Adds an exported package with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "mainClass",
        "parameters": [
            "String"
        ],
        "comments": "Sets the module main class."
    },
    {
        "function": "opens",
        "parameters": [
            "ModuleDescriptor.Opens"
        ],
        "comments": "Adds an open package."
    },
    {
        "function": "opens",
        "parameters": [
            "String"
        ],
        "comments": "Adds an open package."
    },
    {
        "function": "opens",
        "parameters": [
            "String",
            "Set<String>"
        ],
        "comments": "Adds an open package."
    },
    {
        "function": "opens",
        "parameters": [
            "Set<ModuleDescriptor.Opens.Modifier>",
            "String"
        ],
        "comments": "Adds an open package with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "opens",
        "parameters": [
            "Set<ModuleDescriptor.Opens.Modifier>",
            "String",
            "Set<String>"
        ],
        "comments": "Adds an open package with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "packages",
        "parameters": [
            "Set<String>"
        ],
        "comments": "Adds packages to the module."
    },
    {
        "function": "provides",
        "parameters": [
            "ModuleDescriptor.Provides"
        ],
        "comments": "Provides a service with one or more implementations."
    },
    {
        "function": "provides",
        "parameters": [
            "String",
            "List<String>"
        ],
        "comments": "Provides implementations of a service."
    },
    {
        "function": "requires",
        "parameters": [
            "ModuleDescriptor.Requires"
        ],
        "comments": "Adds a dependence on a module."
    },
    {
        "function": "requires",
        "parameters": [
            "String"
        ],
        "comments": "Adds a dependence on a module with an empty set of modifiers."
    },
    {
        "function": "requires",
        "parameters": [
            "Set<ModuleDescriptor.Requires.Modifier>",
            "String"
        ],
        "comments": "Adds a dependence on a module with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "requires",
        "parameters": [
            "Set<ModuleDescriptor.Requires.Modifier>",
            "String",
            "ModuleDescriptor.Version"
        ],
        "comments": "Adds a dependence on a module with the given (and possibly empty) set of modifiers."
    },
    {
        "function": "uses",
        "parameters": [
            "String"
        ],
        "comments": "Adds a service dependence."
    },
    {
        "function": "version",
        "parameters": [
            "ModuleDescriptor.Version"
        ],
        "comments": "Sets the module version."
    },
    {
        "function": "version",
        "parameters": [
            "String"
        ],
        "comments": "Sets the module version."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor.Exports"
        ],
        "comments": "Compares this module export to another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this module export for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this module export."
    },
    {
        "function": "isQualified",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this is a qualified export."
    },
    {
        "function": "modifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of modifiers."
    },
    {
        "function": "source",
        "parameters": [
            ""
        ],
        "comments": "Returns the package name."
    },
    {
        "function": "targets",
        "parameters": [
            ""
        ],
        "comments": "For a qualified export, returns the non-empty and immutable set of the module names to which the package is exported."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing the exported package."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor.Opens"
        ],
        "comments": "Compares this module opens to another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this module opens for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this module opens."
    },
    {
        "function": "isQualified",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this is a qualified opens."
    },
    {
        "function": "modifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of modifiers."
    },
    {
        "function": "source",
        "parameters": [
            ""
        ],
        "comments": "Returns the package name."
    },
    {
        "function": "targets",
        "parameters": [
            ""
        ],
        "comments": "For a qualified opens, returns the non-empty and immutable set of the module names to which the package is open."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing the open package."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor.Provides"
        ],
        "comments": "Compares this provides to another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this provides for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this provides."
    },
    {
        "function": "providers",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of the fully qualified class names of the providers or provider factories."
    },
    {
        "function": "service",
        "parameters": [
            ""
        ],
        "comments": "Returns the fully qualified class name of the service type."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this provides."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor.Requires"
        ],
        "comments": "Compares this module dependence to another."
    },
    {
        "function": "compiledVersion",
        "parameters": [
            ""
        ],
        "comments": "Returns the version of the module if recorded at compile-time."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this module dependence for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this module dependence."
    },
    {
        "function": "modifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of modifiers."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Return the module name."
    },
    {
        "function": "rawCompiledVersion",
        "parameters": [
            ""
        ],
        "comments": "Returns the string with the possibly-unparseable version of the module if recorded at compile-time."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this module dependence."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ModuleDescriptor.Version"
        ],
        "comments": "Compares this module version to another module version."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this module version for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this module version."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Parses the given string as a version string."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string from which this version was parsed."
    },
    {
        "function": "descriptor",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new instance of this class."
    },
    {
        "function": "location",
        "parameters": [
            ""
        ],
        "comments": "Returns the module descriptor."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Returns the location of this module's content, if known."
    },
    {
        "function": "configuration",
        "parameters": [
            ""
        ],
        "comments": "Returns the configuration that this resolved module is in."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this resolved module for equality with the given object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this resolved module."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the module name."
    },
    {
        "function": "reads",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of resolved modules that this resolved module reads."
    },
    {
        "function": "reference",
        "parameters": [
            ""
        ],
        "comments": "Returns the reference to the module's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this resolved module."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The export was implicitly declared in the source of the module declaration."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The export was not explicitly or implicitly declared in the source of the module declaration."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "An automatic module."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The module was implicitly declared."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The open package was implicitly declared in the source of the module declaration."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The open package was not explicitly or implicitly declared in the source of the module declaration."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The dependence was implicitly declared in the source of the module declaration."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The dependence is mandatory in the static phase, during compilation, but is optional in the dynamic phase, during execution."
    },
    {
        "function": "clean",
        "parameters": [
            ""
        ],
        "comments": "Unregisters the cleanable and invokes the cleaning action."
    },
    {
        "function": "create",
        "parameters": [
            ""
        ],
        "comments": "Returns a new Cleaner."
    },
    {
        "function": "create",
        "parameters": [
            "ThreadFactory"
        ],
        "comments": "Returns a new Cleaner using a Thread from the ThreadFactory."
    },
    {
        "function": "register",
        "parameters": [
            "Object",
            "Runnable"
        ],
        "comments": "Registers an object and a cleaning action to run when the object becomes phantom reachable."
    },
    {
        "function": "getAnnotatedGenericComponentType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated generic component type of this array type."
    },
    {
        "function": "getAnnotatedOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are present on this element."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getDeclaredAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is directly present, else null."
    },
    {
        "function": "getDeclaredAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are directly present on this element."
    },
    {
        "function": "getDeclaredAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present."
    },
    {
        "function": "isAnnotationPresent",
        "parameters": [
            "Class<?"
        ],
        "comments": "Returns true if an annotation for the specified type is present on this element, else false."
    },
    {
        "function": "getAnnotatedActualTypeArguments",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated actual type arguments of this parameterized type."
    },
    {
        "function": "getAnnotatedOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type."
    },
    {
        "function": "getAnnotatedOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns the underlying type that this annotated type represents."
    },
    {
        "function": "getAnnotatedBounds",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated bounds of this type variable."
    },
    {
        "function": "getAnnotatedOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type."
    },
    {
        "function": "getAnnotatedLowerBounds",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated lower bounds of this wildcard type."
    },
    {
        "function": "getAnnotatedOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type."
    },
    {
        "function": "getAnnotatedUpperBounds",
        "parameters": [
            ""
        ],
        "comments": "Returns the potentially annotated upper bounds of this wildcard type."
    },
    {
        "function": "getGenericComponentType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Type object representing the component type of this array."
    },
    {
        "function": "getTypeParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
    },
    {
        "function": "invoke",
        "parameters": [
            "Object",
            "Method",
            "Object[]"
        ],
        "comments": "Processes a method invocation on a proxy instance and returns the result."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the Class object representing the class or interface that declares the member or constructor represented by this Member."
    },
    {
        "function": "getModifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the Java language modifiers for the member or constructor represented by this Member, as an integer."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the simple name of the underlying member or constructor represented by this Member."
    },
    {
        "function": "isSynthetic",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this member was introduced by the compiler; returns false otherwise."
    },
    {
        "function": "getActualTypeArguments",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects representing the actual type arguments to this type."
    },
    {
        "function": "getOwnerType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Type object representing the type that this type is a member of."
    },
    {
        "function": "getRawType",
        "parameters": [
            ""
        ],
        "comments": "Returns the Type object representing the class or interface that declared this type."
    },
    {
        "function": "getTypeName",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this type, including information about any type parameters."
    },
    {
        "function": "getLowerBounds",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects representing the lower bound(s) of this type variable."
    },
    {
        "function": "getUpperBounds",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects representing the  upper bound(s) of this type variable."
    },
    {
        "function": "canAccess",
        "parameters": [
            "Object"
        ],
        "comments": "Constructor: only used by the Java Virtual Machine."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Test if the caller can access this reflected object."
    },
    {
        "function": "getAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are present on this element."
    },
    {
        "function": "getDeclaredAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getDeclaredAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is directly present, else null."
    },
    {
        "function": "getDeclaredAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are directly present on this element."
    },
    {
        "function": "isAccessible",
        "parameters": [
            ""
        ],
        "comments": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present."
    },
    {
        "function": "isAnnotationPresent",
        "parameters": [
            "Class<?"
        ],
        "comments": "Deprecated.This method is deprecated because its name hints that it checks if the reflected object is accessible when it actually indicates if the checks for Java language access control are suppressed."
    },
    {
        "function": "setAccessible",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns true if an annotation for the specified type is present on this element, else false."
    },
    {
        "function": "setAccessible",
        "parameters": [
            "AccessibleObject[]",
            "boolean"
        ],
        "comments": "Set the accessible flag for this reflected object to the indicated boolean value."
    },
    {
        "function": "trySetAccessible",
        "parameters": [
            ""
        ],
        "comments": "Convenience method to set the accessible flag for an array of reflected objects with a single security check (for efficiency)."
    },
    {
        "function": "get",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object."
    },
    {
        "function": "getBoolean",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a boolean."
    },
    {
        "function": "getByte",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a byte."
    },
    {
        "function": "getChar",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a char."
    },
    {
        "function": "getDouble",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a double."
    },
    {
        "function": "getFloat",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a float."
    },
    {
        "function": "getInt",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as an int."
    },
    {
        "function": "getLength",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the length of the specified array object, as an int."
    },
    {
        "function": "getLong",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a long."
    },
    {
        "function": "getShort",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Returns the value of the indexed component in the specified array object, as a short."
    },
    {
        "function": "newInstance",
        "parameters": [
            "Class<?>",
            "int"
        ],
        "comments": "Creates a new array with the specified component type and length."
    },
    {
        "function": "newInstance",
        "parameters": [
            "Class<?>",
            "int..."
        ],
        "comments": "Creates a new array with the specified component type and dimensions."
    },
    {
        "function": "set",
        "parameters": [
            "Object",
            "int",
            "Object"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified new value."
    },
    {
        "function": "setBoolean",
        "parameters": [
            "Object",
            "int",
            "boolean"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified boolean value."
    },
    {
        "function": "setByte",
        "parameters": [
            "Object",
            "int",
            "byte"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified byte value."
    },
    {
        "function": "setChar",
        "parameters": [
            "Object",
            "int",
            "char"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified char value."
    },
    {
        "function": "setDouble",
        "parameters": [
            "Object",
            "int",
            "double"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified double value."
    },
    {
        "function": "setFloat",
        "parameters": [
            "Object",
            "int",
            "float"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified float value."
    },
    {
        "function": "setInt",
        "parameters": [
            "Object",
            "int",
            "int"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified int value."
    },
    {
        "function": "setLong",
        "parameters": [
            "Object",
            "int",
            "long"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified long value."
    },
    {
        "function": "setShort",
        "parameters": [
            "Object",
            "int",
            "short"
        ],
        "comments": "Sets the value of the indexed component of the specified array object to the specified short value."
    },
    {
        "function": "getAnnotatedExceptionTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of AnnotatedType objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable."
    },
    {
        "function": "getAnnotatedParameterTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of AnnotatedType objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable."
    },
    {
        "function": "getAnnotatedReceiverType",
        "parameters": [
            ""
        ],
        "comments": "Returns an AnnotatedType object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object."
    },
    {
        "function": "getAnnotatedReturnType",
        "parameters": [
            ""
        ],
        "comments": "Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the Class object representing the class or interface that declares the executable represented by this object."
    },
    {
        "function": "getExceptionTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object."
    },
    {
        "function": "getGenericExceptionTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object."
    },
    {
        "function": "getGenericParameterTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
    },
    {
        "function": "getModifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the Java language modifiers for the executable represented by this object."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the executable represented by this object."
    },
    {
        "function": "getParameterAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object."
    },
    {
        "function": "getParameterCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object."
    },
    {
        "function": "getParameterTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
    },
    {
        "function": "getTypeParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
    },
    {
        "function": "isSynthetic",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this executable is a synthetic construct; returns false otherwise."
    },
    {
        "function": "isVarArgs",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise."
    },
    {
        "function": "toGenericString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this Executable, including any type parameters."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this Field against the specified object."
    },
    {
        "function": "get",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the value of the field represented by this Field, on the specified object."
    },
    {
        "function": "getAnnotatedType",
        "parameters": [
            ""
        ],
        "comments": "Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getBoolean",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance boolean field."
    },
    {
        "function": "getByte",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance byte field."
    },
    {
        "function": "getChar",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the Class object representing the class or interface that declares the field represented by this Field object."
    },
    {
        "function": "getDouble",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion."
    },
    {
        "function": "getFloat",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion."
    },
    {
        "function": "getGenericType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Type object that represents the declared type for the field represented by this Field object."
    },
    {
        "function": "getInt",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion."
    },
    {
        "function": "getLong",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion."
    },
    {
        "function": "getModifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the Java language modifiers for the field represented by this Field object, as an integer."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the field represented by this Field object."
    },
    {
        "function": "getShort",
        "parameters": [
            "Object"
        ],
        "comments": "Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Class object that identifies the declared type for the field represented by this Field object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this Field."
    },
    {
        "function": "isEnumConstant",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this field represents an element of an enumerated type; returns false otherwise."
    },
    {
        "function": "isSynthetic",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this field is a synthetic field; returns false otherwise."
    },
    {
        "function": "set",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Sets the field represented by this Field object on the specified object argument to the specified new value."
    },
    {
        "function": "setAccessible",
        "parameters": [
            "boolean"
        ],
        "comments": "Set the accessible flag for this reflected object to the indicated boolean value."
    },
    {
        "function": "setBoolean",
        "parameters": [
            "Object",
            "boolean"
        ],
        "comments": "Sets the value of a field as a boolean on the specified object."
    },
    {
        "function": "setByte",
        "parameters": [
            "Object",
            "byte"
        ],
        "comments": "Sets the value of a field as a byte on the specified object."
    },
    {
        "function": "setChar",
        "parameters": [
            "Object",
            "char"
        ],
        "comments": "Sets the value of a field as a char on the specified object."
    },
    {
        "function": "setDouble",
        "parameters": [
            "Object",
            "double"
        ],
        "comments": "Sets the value of a field as a double on the specified object."
    },
    {
        "function": "setFloat",
        "parameters": [
            "Object",
            "float"
        ],
        "comments": "Sets the value of a field as a float on the specified object."
    },
    {
        "function": "setInt",
        "parameters": [
            "Object",
            "int"
        ],
        "comments": "Sets the value of a field as an int on the specified object."
    },
    {
        "function": "setLong",
        "parameters": [
            "Object",
            "long"
        ],
        "comments": "Sets the value of a field as a long on the specified object."
    },
    {
        "function": "setShort",
        "parameters": [
            "Object",
            "short"
        ],
        "comments": "Sets the value of a field as a short on the specified object."
    },
    {
        "function": "toGenericString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this Field, including its generic type."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this Field."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this Method against the specified object."
    },
    {
        "function": "getAnnotatedReturnType",
        "parameters": [
            ""
        ],
        "comments": "Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getDeclaredAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns annotations that are directly present on this element."
    },
    {
        "function": "getDeclaringClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the Class object representing the class or interface that declares the method represented by this object."
    },
    {
        "function": "getDefaultValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the default value for the annotation member represented by this Method instance."
    },
    {
        "function": "getGenericExceptionTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object."
    },
    {
        "function": "getGenericParameterTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object."
    },
    {
        "function": "getGenericReturnType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Type object that represents the formal return type of the method represented by this Method object."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the method represented by this Method object, as a String."
    },
    {
        "function": "getParameterAnnotations",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object."
    },
    {
        "function": "getParameterCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object."
    },
    {
        "function": "getReturnType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Class object that represents the formal return type of the method represented by this Method object."
    },
    {
        "function": "getTypeParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this Method."
    },
    {
        "function": "invoke",
        "parameters": [
            "Object",
            "Object..."
        ],
        "comments": "Invokes the underlying method represented by this Method object, on the specified object with the specified parameters."
    },
    {
        "function": "isBridge",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this method is a bridge method; returns false otherwise."
    },
    {
        "function": "isDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this method is a default method; returns false otherwise."
    },
    {
        "function": "isSynthetic",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this executable is a synthetic construct; returns false otherwise."
    },
    {
        "function": "isVarArgs",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise."
    },
    {
        "function": "setAccessible",
        "parameters": [
            "boolean"
        ],
        "comments": "Set the accessible flag for this reflected object to the indicated boolean value."
    },
    {
        "function": "toGenericString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this Method, including type parameters."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this Method."
    },
    {
        "function": "classModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to a class."
    },
    {
        "function": "constructorModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to a constructor."
    },
    {
        "function": "fieldModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to a field."
    },
    {
        "function": "interfaceModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to an interface."
    },
    {
        "function": "isAbstract",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the abstract modifier, false otherwise."
    },
    {
        "function": "isFinal",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the final modifier, false otherwise."
    },
    {
        "function": "isInterface",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the interface modifier, false otherwise."
    },
    {
        "function": "isNative",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the native modifier, false otherwise."
    },
    {
        "function": "isPrivate",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the private modifier, false otherwise."
    },
    {
        "function": "isProtected",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the protected modifier, false otherwise."
    },
    {
        "function": "isPublic",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the public modifier, false otherwise."
    },
    {
        "function": "isStatic",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the static modifier, false otherwise."
    },
    {
        "function": "isStrict",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the strictfp modifier, false otherwise."
    },
    {
        "function": "isSynchronized",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the synchronized modifier, false otherwise."
    },
    {
        "function": "isTransient",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the transient modifier, false otherwise."
    },
    {
        "function": "isVolatile",
        "parameters": [
            "int"
        ],
        "comments": "Return true if the integer argument includes the volatile modifier, false otherwise."
    },
    {
        "function": "methodModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to a method."
    },
    {
        "function": "parameterModifiers",
        "parameters": [
            ""
        ],
        "comments": "Return an int value OR-ing together the source language modifiers that can be applied to a parameter."
    },
    {
        "function": "toString",
        "parameters": [
            "int"
        ],
        "comments": "Return a string describing the access modifier flags in the specified modifier."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares based on the executable and the index."
    },
    {
        "function": "getAnnotatedType",
        "parameters": [
            ""
        ],
        "comments": "Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter."
    },
    {
        "function": "getAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is present, else null."
    },
    {
        "function": "getAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns annotations that are associated with this element."
    },
    {
        "function": "getDeclaredAnnotation",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation for the specified type if such an annotation is directly present, else null."
    },
    {
        "function": "getDeclaredAnnotationsByType",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present."
    },
    {
        "function": "getDeclaringExecutable",
        "parameters": [
            ""
        ],
        "comments": "Return the Executable which declares this parameter."
    },
    {
        "function": "getModifiers",
        "parameters": [
            ""
        ],
        "comments": "Get the modifier flags for this the parameter represented by this Parameter object."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the parameter."
    },
    {
        "function": "getParameterizedType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Class object that identifies the declared type for the parameter represented by this Parameter object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code based on the executable's hash code and the index."
    },
    {
        "function": "isImplicit",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this parameter is implicitly declared in source code; returns false otherwise."
    },
    {
        "function": "isNamePresent",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the parameter has a name according to the class file; returns false otherwise."
    },
    {
        "function": "isSynthetic",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise."
    },
    {
        "function": "isVarArgs",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this parameter represents a variable argument list; returns false otherwise."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this parameter."
    },
    {
        "function": "getInvocationHandler",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new Proxy instance from a subclass (typically, a dynamic proxy class) with the specified value for its invocation handler."
    },
    {
        "function": "getProxyClass",
        "parameters": [
            "ClassLoader",
            "Class<?>..."
        ],
        "comments": "Returns the invocation handler for the specified proxy instance."
    },
    {
        "function": "isProxyClass",
        "parameters": [
            "Class<?>"
        ],
        "comments": "Deprecated.Proxy classes generated in a named module are encapsulated      and not accessible to code outside its module."
    },
    {
        "function": "newProxyInstance",
        "parameters": [
            "ClassLoader",
            "Class<?>[]",
            "InvocationHandler"
        ],
        "comments": "Returns true if the given class is a proxy class."
    },
    {
        "function": "abs",
        "parameters": [
            ""
        ],
        "comments": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor."
    },
    {
        "function": "abs",
        "parameters": [
            "MathContext"
        ],
        "comments": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor, while allowing a sub-array to be specified."
    },
    {
        "function": "add",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor, while allowing a sub-array to be specified and with rounding according to the context settings."
    },
    {
        "function": "add",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor and with rounding according to the context settings."
    },
    {
        "function": "byteValueExact",
        "parameters": [
            ""
        ],
        "comments": "Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value."
    },
    {
        "function": "compareTo",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Translates a double into a BigDecimal, with rounding according to the context settings."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Translates an int into a BigDecimal."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal",
            "int"
        ],
        "comments": "Translates an int into a BigDecimal, with rounding according to the context settings."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal",
            "int",
            "int"
        ],
        "comments": "Translates a long into a BigDecimal."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal",
            "int",
            "RoundingMode"
        ],
        "comments": "Translates a long into a BigDecimal, with rounding according to the context settings."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Translates the string representation of a BigDecimal into a BigDecimal."
    },
    {
        "function": "divide",
        "parameters": [
            "BigDecimal",
            "RoundingMode"
        ],
        "comments": "Translates the string representation of a BigDecimal into a BigDecimal, accepting the same strings as the BigDecimal(String) constructor, with rounding according to the context settings."
    },
    {
        "function": "divideAndRemainder",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Translates a BigInteger into a BigDecimal."
    },
    {
        "function": "divideAndRemainder",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Translates a BigInteger unscaled value and an int scale into a BigDecimal."
    },
    {
        "function": "divideToIntegralValue",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Translates a BigInteger unscaled value and an int scale into a BigDecimal, with rounding according to the context settings."
    },
    {
        "function": "divideToIntegralValue",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Translates a BigInteger into a BigDecimal rounding according to the context settings."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale()."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigDecimal to a byte, checking for lost information."
    },
    {
        "function": "intValueExact",
        "parameters": [
            ""
        ],
        "comments": "Compares this BigDecimal with the specified BigDecimal."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown."
    },
    {
        "function": "longValueExact",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The method divide(BigDecimal, RoundingMode) should be used in preference to this legacy method."
    },
    {
        "function": "max",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Deprecated.The method divide(BigDecimal, int, RoundingMode) should be used in preference to this legacy method."
    },
    {
        "function": "min",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified."
    },
    {
        "function": "movePointLeft",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings."
    },
    {
        "function": "movePointRight",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale()."
    },
    {
        "function": "multiply",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands."
    },
    {
        "function": "multiply",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings."
    },
    {
        "function": "negate",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down."
    },
    {
        "function": "negate",
        "parameters": [
            "MathContext"
        ],
        "comments": "Returns a BigDecimal whose value is the integer part of (this / divisor)."
    },
    {
        "function": "plus",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigDecimal to a double."
    },
    {
        "function": "plus",
        "parameters": [
            "MathContext"
        ],
        "comments": "Compares this BigDecimal with the specified Object for equality."
    },
    {
        "function": "pow",
        "parameters": [
            "int"
        ],
        "comments": "Converts this BigDecimal to a float."
    },
    {
        "function": "pow",
        "parameters": [
            "int",
            "MathContext"
        ],
        "comments": "Returns the hash code for this BigDecimal."
    },
    {
        "function": "precision",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigDecimal to an int."
    },
    {
        "function": "remainder",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Converts this BigDecimal to an int, checking for lost information."
    },
    {
        "function": "remainder",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Converts this BigDecimal to a long."
    },
    {
        "function": "round",
        "parameters": [
            "MathContext"
        ],
        "comments": "Converts this BigDecimal to a long, checking for lost information."
    },
    {
        "function": "scale",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum of this BigDecimal and val."
    },
    {
        "function": "scaleByPowerOfTen",
        "parameters": [
            "int"
        ],
        "comments": "Returns the minimum of this BigDecimal and val."
    },
    {
        "function": "setScale",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left."
    },
    {
        "function": "setScale",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right."
    },
    {
        "function": "setScale",
        "parameters": [
            "int",
            "RoundingMode"
        ],
        "comments": "Returns a BigDecimal whose value is (this \u00d7 multiplicand), and whose scale is (this.scale() + multiplicand.scale())."
    },
    {
        "function": "shortValueExact",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this \u00d7 multiplicand), with rounding according to the context settings."
    },
    {
        "function": "signum",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (-this), and whose scale is this.scale()."
    },
    {
        "function": "sqrt",
        "parameters": [
            "MathContext"
        ],
        "comments": "Returns a BigDecimal whose value is (-this), with rounding according to the context settings."
    },
    {
        "function": "stripTrailingZeros",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (+this), and whose scale is this.scale()."
    },
    {
        "function": "subtract",
        "parameters": [
            "BigDecimal"
        ],
        "comments": "Returns a BigDecimal whose value is (+this), with rounding according to the context settings."
    },
    {
        "function": "subtract",
        "parameters": [
            "BigDecimal",
            "MathContext"
        ],
        "comments": "Returns a BigDecimal whose value is (thisn), The power is computed exactly, to unlimited precision."
    },
    {
        "function": "toBigInteger",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (thisn)."
    },
    {
        "function": "toBigIntegerExact",
        "parameters": [
            ""
        ],
        "comments": "Returns the precision of this BigDecimal."
    },
    {
        "function": "toEngineeringString",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this % divisor)."
    },
    {
        "function": "toPlainString",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal rounded according to the MathContext settings."
    },
    {
        "function": "ulp",
        "parameters": [
            ""
        ],
        "comments": "Returns the scale of this BigDecimal."
    },
    {
        "function": "unscaledValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigDecimal whose numerical value is equal to (this * 10n)."
    },
    {
        "function": "valueOf",
        "parameters": [
            "double"
        ],
        "comments": "Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long"
        ],
        "comments": "Deprecated.The method setScale(int, RoundingMode) should be used in preference to this legacy method."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long",
            "int"
        ],
        "comments": "Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value."
    },
    {
        "function": "abs",
        "parameters": [
            ""
        ],
        "comments": "Translates a byte array containing the two's-complement binary representation of a BigInteger into a BigInteger."
    },
    {
        "function": "add",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Translates a byte sub-array containing the two's-complement binary representation of a BigInteger into a BigInteger."
    },
    {
        "function": "and",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Translates the sign-magnitude representation of a BigInteger into a BigInteger."
    },
    {
        "function": "andNot",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Translates the sign-magnitude representation of a BigInteger into a BigInteger."
    },
    {
        "function": "bitCount",
        "parameters": [
            ""
        ],
        "comments": "Constructs a randomly generated positive BigInteger that is probably prime, with the specified bitLength."
    },
    {
        "function": "bitLength",
        "parameters": [
            ""
        ],
        "comments": "Constructs a randomly generated BigInteger, uniformly distributed over the range 0 to (2numBits - 1), inclusive."
    },
    {
        "function": "byteValueExact",
        "parameters": [
            ""
        ],
        "comments": "Translates the decimal String representation of a BigInteger into a BigInteger."
    },
    {
        "function": "clearBit",
        "parameters": [
            "int"
        ],
        "comments": "Translates the String representation of a BigInteger in the specified radix into a BigInteger."
    },
    {
        "function": "compareTo",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is the absolute value of this BigInteger."
    },
    {
        "function": "divide",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is (this + val)."
    },
    {
        "function": "divideAndRemainder",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is (this & val)."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (this & ~val)."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit."
    },
    {
        "function": "flipBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigInteger to a byte, checking for lost information."
    },
    {
        "function": "gcd",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared."
    },
    {
        "function": "getLowestSetBit",
        "parameters": [
            ""
        ],
        "comments": "Compares this BigInteger with the specified BigInteger."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (this / val)."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of two BigIntegers containing (this / val) followed by (this % val)."
    },
    {
        "function": "intValueExact",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigInteger to a double."
    },
    {
        "function": "isProbablePrime",
        "parameters": [
            "int"
        ],
        "comments": "Compares this BigInteger with the specified Object for equality."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped."
    },
    {
        "function": "longValueExact",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigInteger to a float."
    },
    {
        "function": "max",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val)."
    },
    {
        "function": "min",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit)."
    },
    {
        "function": "mod",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns the hash code for this BigInteger."
    },
    {
        "function": "modInverse",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Converts this BigInteger to an int."
    },
    {
        "function": "modPow",
        "parameters": [
            "BigInteger",
            "BigInteger"
        ],
        "comments": "Converts this BigInteger to an int, checking for lost information."
    },
    {
        "function": "multiply",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns true if this BigInteger is probably prime, false if it's definitely composite."
    },
    {
        "function": "negate",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigInteger to a long."
    },
    {
        "function": "nextProbablePrime",
        "parameters": [
            ""
        ],
        "comments": "Converts this BigInteger to a long, checking for lost information."
    },
    {
        "function": "not",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum of this BigInteger and val."
    },
    {
        "function": "or",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns the minimum of this BigInteger and val."
    },
    {
        "function": "pow",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigInteger whose value is (this mod m)."
    },
    {
        "function": "probablePrime",
        "parameters": [
            "int",
            "Random"
        ],
        "comments": "Returns a BigInteger whose value is (this-1 mod m)."
    },
    {
        "function": "remainder",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is (thisexponent mod m)."
    },
    {
        "function": "setBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigInteger whose value is (this * val)."
    },
    {
        "function": "shiftLeft",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigInteger whose value is (-this)."
    },
    {
        "function": "shiftRight",
        "parameters": [
            "int"
        ],
        "comments": "Returns the first integer greater than this BigInteger that is probably prime."
    },
    {
        "function": "shortValueExact",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (~this)."
    },
    {
        "function": "signum",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (this | val)."
    },
    {
        "function": "sqrt",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (thisexponent)."
    },
    {
        "function": "sqrtAndRemainder",
        "parameters": [
            ""
        ],
        "comments": "Returns a positive BigInteger that is probably prime, with the specified bitLength."
    },
    {
        "function": "subtract",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns a BigInteger whose value is (this % val)."
    },
    {
        "function": "testBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set."
    },
    {
        "function": "toByteArray",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (this << n)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a BigInteger whose value is (this >> n)."
    },
    {
        "function": "toString",
        "parameters": [
            "int"
        ],
        "comments": "Converts this BigInteger to a short, checking for lost information."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long"
        ],
        "comments": "Returns the signum function of this BigInteger."
    },
    {
        "function": "xor",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Returns the integer square root of this BigInteger."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new MathContext with the specified precision and the HALF_UP rounding mode."
    },
    {
        "function": "getPrecision",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new MathContext with a specified precision and rounding mode."
    },
    {
        "function": "getRoundingMode",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new MathContext from a string."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this MathContext with the specified Object for equality."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the precision setting."
    },
    {
        "function": "valueOf",
        "parameters": [
            "int"
        ],
        "comments": "Rounding mode to round towards positive infinity."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Rounding mode to round towards zero."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Rounding mode to round towards negative infinity."
    },
    {
        "function": "createContentHandler",
        "parameters": [
            "String"
        ],
        "comments": "Creates a new ContentHandler to read an object from a URLStreamHandler."
    },
    {
        "function": "shouldAccept",
        "parameters": [
            "URI",
            "HttpCookie"
        ],
        "comments": "Will be called to see whether or not this cookie should be accepted."
    },
    {
        "function": "add",
        "parameters": [
            "URI",
            "HttpCookie"
        ],
        "comments": "Adds one HTTP cookie to the store."
    },
    {
        "function": "get",
        "parameters": [
            "URI"
        ],
        "comments": "Retrieve cookies associated with given URI, or whose domain matches the given URI."
    },
    {
        "function": "getCookies",
        "parameters": [
            ""
        ],
        "comments": "Get all not-expired cookies in cookie store."
    },
    {
        "function": "getURIs",
        "parameters": [
            ""
        ],
        "comments": "Get all URIs which identify the cookies in this cookie store."
    },
    {
        "function": "remove",
        "parameters": [
            "URI",
            "HttpCookie"
        ],
        "comments": "Remove a cookie from store."
    },
    {
        "function": "removeAll",
        "parameters": [
            ""
        ],
        "comments": "Remove all cookies in this cookie store."
    },
    {
        "function": "createDatagramSocketImpl",
        "parameters": [
            ""
        ],
        "comments": "Creates a new DatagramSocketImpl instance."
    },
    {
        "function": "getContentTypeFor",
        "parameters": [
            "String"
        ],
        "comments": "Gets the MIME type for the specified file name."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the protocol family."
    },
    {
        "function": "createSocketImpl",
        "parameters": [
            ""
        ],
        "comments": "Creates a new SocketImpl instance."
    },
    {
        "function": "getOption",
        "parameters": [
            "int"
        ],
        "comments": "Fetch the value of an option."
    },
    {
        "function": "setOption",
        "parameters": [
            "int",
            "Object"
        ],
        "comments": "Enable/disable the option specified by optID."
    },
    {
        "function": "createURLStreamHandler",
        "parameters": [
            "String"
        ],
        "comments": "Creates a new URLStreamHandler instance with the specified protocol."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the default authenticator."
    },
    {
        "function": "getPasswordAuthentication",
        "parameters": [
            ""
        ],
        "comments": "Called when password authorization is needed."
    },
    {
        "function": "getRequestingHost",
        "parameters": [
            ""
        ],
        "comments": "Gets the hostname of the site or proxy requesting authentication, or null if not available."
    },
    {
        "function": "getRequestingPort",
        "parameters": [
            ""
        ],
        "comments": "Gets the port number for the requested connection."
    },
    {
        "function": "getRequestingPrompt",
        "parameters": [
            ""
        ],
        "comments": "Gets the prompt string given by the requestor."
    },
    {
        "function": "getRequestingProtocol",
        "parameters": [
            ""
        ],
        "comments": "Give the protocol that's requesting the connection."
    },
    {
        "function": "getRequestingScheme",
        "parameters": [
            ""
        ],
        "comments": "Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example)."
    },
    {
        "function": "getRequestingSite",
        "parameters": [
            ""
        ],
        "comments": "Gets the InetAddress of the site requesting authorization, or null if not available."
    },
    {
        "function": "getRequestingURL",
        "parameters": [
            ""
        ],
        "comments": "Returns the URL that resulted in this request for authentication."
    },
    {
        "function": "getRequestorType",
        "parameters": [
            ""
        ],
        "comments": "Returns whether the requestor is a Proxy or a Server."
    },
    {
        "function": "requestPasswordAuthentication",
        "parameters": [
            "String",
            "InetAddress",
            "int",
            "String",
            "String",
            "String"
        ],
        "comments": "Ask the authenticator that has been registered with the system for a password."
    },
    {
        "function": "requestPasswordAuthentication",
        "parameters": [
            "String",
            "InetAddress",
            "int",
            "String",
            "String",
            "String",
            "URL",
            "Authenticator.RequestorType"
        ],
        "comments": "Ask the authenticator that has been registered with the system for a password."
    },
    {
        "function": "requestPasswordAuthentication",
        "parameters": [
            "Authenticator",
            "String",
            "InetAddress",
            "int",
            "String",
            "String",
            "String",
            "URL",
            "Authenticator.RequestorType"
        ],
        "comments": "Ask the given authenticator for a password."
    },
    {
        "function": "requestPasswordAuthentication",
        "parameters": [
            "InetAddress",
            "int",
            "String",
            "String",
            "String"
        ],
        "comments": "Ask the authenticator that has been registered with the system for a password."
    },
    {
        "function": "requestPasswordAuthenticationInstance",
        "parameters": [
            "String",
            "InetAddress",
            "int",
            "String",
            "String",
            "String",
            "URL",
            "Authenticator.RequestorType"
        ],
        "comments": "Ask this authenticator for a password."
    },
    {
        "function": "setDefault",
        "parameters": [
            "Authenticator"
        ],
        "comments": "Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication."
    },
    {
        "function": "abort",
        "parameters": [
            ""
        ],
        "comments": "Aborts the attempt to cache the response."
    },
    {
        "function": "getBody",
        "parameters": [
            ""
        ],
        "comments": "Returns an OutputStream to which the response body can be written."
    },
    {
        "function": "getBody",
        "parameters": [
            ""
        ],
        "comments": "Returns the response body as an InputStream."
    },
    {
        "function": "getHeaders",
        "parameters": [
            ""
        ],
        "comments": "Returns the response headers as a Map."
    },
    {
        "function": "getContent",
        "parameters": [
            "URLConnection"
        ],
        "comments": "Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it."
    },
    {
        "function": "getContent",
        "parameters": [
            "URLConnection",
            "Class[]"
        ],
        "comments": "Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified."
    },
    {
        "function": "get",
        "parameters": [
            "URI",
            "Map<String",
            "List<String>>"
        ],
        "comments": "Gets all the applicable cookies from a cookie cache for the specified uri in the request header."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the system-wide cookie handler."
    },
    {
        "function": "put",
        "parameters": [
            "URI",
            "Map<String",
            "List<String>>"
        ],
        "comments": "Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache."
    },
    {
        "function": "setDefault",
        "parameters": [
            "CookieHandler"
        ],
        "comments": "Sets (or unsets) the system-wide cookie handler."
    },
    {
        "function": "getCookieStore",
        "parameters": [
            ""
        ],
        "comments": "Create a new cookie manager."
    },
    {
        "function": "setCookiePolicy",
        "parameters": [
            "CookiePolicy"
        ],
        "comments": "Create a new cookie manager with specified cookie store and cookie policy."
    },
    {
        "function": "getAddress",
        "parameters": [
            ""
        ],
        "comments": "Constructs a DatagramPacket for receiving packets of length length."
    },
    {
        "function": "getData",
        "parameters": [
            ""
        ],
        "comments": "Constructs a DatagramPacket for receiving packets of length length, specifying an offset into the buffer."
    },
    {
        "function": "getLength",
        "parameters": [
            ""
        ],
        "comments": "Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host."
    },
    {
        "function": "getSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host."
    },
    {
        "function": "setAddress",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received."
    },
    {
        "function": "setData",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the data buffer."
    },
    {
        "function": "setData",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the length of the data to be sent or the length of the data received."
    },
    {
        "function": "setLength",
        "parameters": [
            "int"
        ],
        "comments": "Returns the offset of the data to be sent or the offset of the data received."
    },
    {
        "function": "setPort",
        "parameters": [
            "int"
        ],
        "comments": "Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received."
    },
    {
        "function": "setSocketAddress",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Constructs a datagram socket and binds it to any available port on the local host machine."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Constructs a datagram socket and binds it to the specified port on the local host machine."
    },
    {
        "function": "connect",
        "parameters": [
            "InetAddress",
            "int"
        ],
        "comments": "Creates a datagram socket, bound to the specified local address."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Creates an unbound datagram socket with the specified DatagramSocketImpl."
    },
    {
        "function": "disconnect",
        "parameters": [
            ""
        ],
        "comments": "Creates a datagram socket, bound to the specified local socket address."
    },
    {
        "function": "getBroadcast",
        "parameters": [
            ""
        ],
        "comments": "Binds this DatagramSocket to a specific address and port."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Closes this datagram socket."
    },
    {
        "function": "getInetAddress",
        "parameters": [
            ""
        ],
        "comments": "Connects the socket to a remote address for this socket."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Connects this socket to a remote socket address (IP address + port number)."
    },
    {
        "function": "getLocalPort",
        "parameters": [
            ""
        ],
        "comments": "Disconnects the socket."
    },
    {
        "function": "getLocalSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_BROADCAST is enabled."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Returns the unique DatagramChannel object associated with this datagram socket, if any."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the address to which this socket is connected."
    },
    {
        "function": "getReceiveBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Gets the local address to which the socket is bound."
    },
    {
        "function": "getRemoteSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number on the local host to which this socket is bound."
    },
    {
        "function": "getReuseAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the endpoint this socket is bound to."
    },
    {
        "function": "getSendBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of a socket option."
    },
    {
        "function": "getSoTimeout",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number to which this socket is connected."
    },
    {
        "function": "getTrafficClass",
        "parameters": [
            ""
        ],
        "comments": "Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket."
    },
    {
        "function": "isBound",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected."
    },
    {
        "function": "isClosed",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_REUSEADDR is enabled."
    },
    {
        "function": "isConnected",
        "parameters": [
            ""
        ],
        "comments": "Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket."
    },
    {
        "function": "receive",
        "parameters": [
            "DatagramPacket"
        ],
        "comments": "Retrieve setting for SO_TIMEOUT.  0 returns implies that the option is disabled (i.e., timeout of infinity)."
    },
    {
        "function": "send",
        "parameters": [
            "DatagramPacket"
        ],
        "comments": "Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket."
    },
    {
        "function": "setBroadcast",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the binding state of the socket."
    },
    {
        "function": "setDatagramSocketImplFactory",
        "parameters": [
            "DatagramSocketImplFactory"
        ],
        "comments": "Returns whether the socket is closed or not."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Returns the connection state of the socket."
    },
    {
        "function": "setReceiveBufferSize",
        "parameters": [
            "int"
        ],
        "comments": "Receives a datagram packet from this socket."
    },
    {
        "function": "setReuseAddress",
        "parameters": [
            "boolean"
        ],
        "comments": "Sends a datagram packet from this socket."
    },
    {
        "function": "setSendBufferSize",
        "parameters": [
            "int"
        ],
        "comments": "Enable/disable SO_BROADCAST."
    },
    {
        "function": "setSoTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Sets the datagram socket implementation factory for the application."
    },
    {
        "function": "setTrafficClass",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Sets the SO_RCVBUF option to the specified value for this DatagramSocket."
    },
    {
        "function": "bind",
        "parameters": [
            "int",
            "InetAddress"
        ],
        "comments": "Binds a datagram socket to a local port and address."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Close the socket."
    },
    {
        "function": "connect",
        "parameters": [
            "InetAddress",
            "int"
        ],
        "comments": "Connects a datagram socket to a remote destination."
    },
    {
        "function": "create",
        "parameters": [
            ""
        ],
        "comments": "Creates a datagram socket."
    },
    {
        "function": "disconnect",
        "parameters": [
            ""
        ],
        "comments": "Disconnects a datagram socket from its remote destination."
    },
    {
        "function": "getFileDescriptor",
        "parameters": [
            ""
        ],
        "comments": "Gets the datagram socket file descriptor."
    },
    {
        "function": "getLocalPort",
        "parameters": [
            ""
        ],
        "comments": "Gets the local port."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Called to get a socket option."
    },
    {
        "function": "getTimeToLive",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the TTL (time-to-live) option."
    },
    {
        "function": "getTTL",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.use getTimeToLive instead."
    },
    {
        "function": "join",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Join the multicast group."
    },
    {
        "function": "joinGroup",
        "parameters": [
            "SocketAddress",
            "NetworkInterface"
        ],
        "comments": "Join the multicast group."
    },
    {
        "function": "leave",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Leave the multicast group."
    },
    {
        "function": "leaveGroup",
        "parameters": [
            "SocketAddress",
            "NetworkInterface"
        ],
        "comments": "Leave the multicast group."
    },
    {
        "function": "peek",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Peek at the packet to see who it is from."
    },
    {
        "function": "peekData",
        "parameters": [
            "DatagramPacket"
        ],
        "comments": "Peek at the packet to see who it is from."
    },
    {
        "function": "receive",
        "parameters": [
            "DatagramPacket"
        ],
        "comments": "Receive the datagram packet."
    },
    {
        "function": "send",
        "parameters": [
            "DatagramPacket"
        ],
        "comments": "Sends a datagram packet."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Called to set a socket option."
    },
    {
        "function": "setTimeToLive",
        "parameters": [
            "int"
        ],
        "comments": "Set the TTL (time-to-live) option."
    },
    {
        "function": "setTTL",
        "parameters": [
            "byte"
        ],
        "comments": "Deprecated.use setTimeToLive instead."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of SocketOptions supported by this impl and by this impl's socket (DatagramSocket or MulticastSocket)"
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a cookie with a specified name and value."
    },
    {
        "function": "domainMatches",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Create and return a copy of this object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "The utility method to check whether a host name is in a domain or not."
    },
    {
        "function": "getComment",
        "parameters": [
            ""
        ],
        "comments": "Test the equality of two HTTP cookies."
    },
    {
        "function": "getCommentURL",
        "parameters": [
            ""
        ],
        "comments": "Returns the comment describing the purpose of this cookie, or null if the cookie has no comment."
    },
    {
        "function": "getDiscard",
        "parameters": [
            ""
        ],
        "comments": "Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL."
    },
    {
        "function": "getDomain",
        "parameters": [
            ""
        ],
        "comments": "Returns the discard attribute of the cookie"
    },
    {
        "function": "getMaxAge",
        "parameters": [
            ""
        ],
        "comments": "Returns the domain name set for this cookie."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum age of the cookie, specified in seconds."
    },
    {
        "function": "getPath",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the cookie."
    },
    {
        "function": "getPortlist",
        "parameters": [
            ""
        ],
        "comments": "Returns the path on the server to which the browser returns this cookie."
    },
    {
        "function": "getSecure",
        "parameters": [
            ""
        ],
        "comments": "Returns the port list attribute of the cookie"
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the cookie."
    },
    {
        "function": "hasExpired",
        "parameters": [
            ""
        ],
        "comments": "Returns the version of the protocol this cookie complies with."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Reports whether this HTTP cookie has expired or not."
    },
    {
        "function": "isHttpOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of this HTTP cookie."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if this cookie contains the HttpOnly attribute."
    },
    {
        "function": "setComment",
        "parameters": [
            "String"
        ],
        "comments": "Constructs cookies from set-cookie or set-cookie2 header string."
    },
    {
        "function": "setCommentURL",
        "parameters": [
            "String"
        ],
        "comments": "Specifies a comment that describes a cookie's purpose."
    },
    {
        "function": "setDiscard",
        "parameters": [
            "boolean"
        ],
        "comments": "Specifies a comment URL that describes a cookie's purpose."
    },
    {
        "function": "setDomain",
        "parameters": [
            "String"
        ],
        "comments": "Specify whether user agent should discard the cookie unconditionally."
    },
    {
        "function": "setHttpOnly",
        "parameters": [
            "boolean"
        ],
        "comments": "Specifies the domain within which this cookie should be presented."
    },
    {
        "function": "setMaxAge",
        "parameters": [
            "long"
        ],
        "comments": "Indicates whether the cookie should be considered HTTP Only."
    },
    {
        "function": "setPath",
        "parameters": [
            "String"
        ],
        "comments": "Sets the maximum age of the cookie in seconds."
    },
    {
        "function": "setPortlist",
        "parameters": [
            "String"
        ],
        "comments": "Specifies a path for the cookie to which the client should return the cookie."
    },
    {
        "function": "setSecure",
        "parameters": [
            "boolean"
        ],
        "comments": "Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header."
    },
    {
        "function": "setValue",
        "parameters": [
            "String"
        ],
        "comments": "Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL."
    },
    {
        "function": "setVersion",
        "parameters": [
            "int"
        ],
        "comments": "Assigns a new value to a cookie after the cookie is created."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the version of the cookie protocol this cookie complies with."
    },
    {
        "function": "disconnect",
        "parameters": [
            ""
        ],
        "comments": "Constructor for the HttpURLConnection."
    },
    {
        "function": "getErrorStream",
        "parameters": [
            ""
        ],
        "comments": "Indicates that other requests to the server are unlikely in the near future."
    },
    {
        "function": "getFollowRedirects",
        "parameters": [
            ""
        ],
        "comments": "Returns the error stream if the connection failed but the server sent useful data nonetheless."
    },
    {
        "function": "getHeaderField",
        "parameters": [
            "int"
        ],
        "comments": "Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed."
    },
    {
        "function": "getHeaderFieldKey",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value for the nth header field."
    },
    {
        "function": "getInstanceFollowRedirects",
        "parameters": [
            ""
        ],
        "comments": "Returns the key for the nth header field."
    },
    {
        "function": "getPermission",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this HttpURLConnection's instanceFollowRedirects field."
    },
    {
        "function": "getRequestMethod",
        "parameters": [
            ""
        ],
        "comments": "Returns a SocketPermission object representing the permission necessary to connect to the destination host and port."
    },
    {
        "function": "getResponseCode",
        "parameters": [
            ""
        ],
        "comments": "Get the request method."
    },
    {
        "function": "getResponseMessage",
        "parameters": [
            ""
        ],
        "comments": "Gets the status code from an HTTP response message."
    },
    {
        "function": "setAuthenticator",
        "parameters": [
            "Authenticator"
        ],
        "comments": "Gets the HTTP response message, if any, returned along with the response code from a server."
    },
    {
        "function": "setChunkedStreamingMode",
        "parameters": [
            "int"
        ],
        "comments": "Supplies an Authenticator to be used when authentication is requested through the HTTP protocol for this HttpURLConnection."
    },
    {
        "function": "setFixedLengthStreamingMode",
        "parameters": [
            "int"
        ],
        "comments": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance."
    },
    {
        "function": "setFixedLengthStreamingMode",
        "parameters": [
            "long"
        ],
        "comments": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance."
    },
    {
        "function": "setFollowRedirects",
        "parameters": [
            "boolean"
        ],
        "comments": "This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance."
    },
    {
        "function": "setInstanceFollowRedirects",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets whether HTTP redirects  (requests with response code 3xx) should be automatically followed by this class."
    },
    {
        "function": "setRequestMethod",
        "parameters": [
            "String"
        ],
        "comments": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance."
    },
    {
        "function": "usingProxy",
        "parameters": [
            ""
        ],
        "comments": "Set the method for the URL request, one of:   GET  POST  HEAD  OPTIONS  PUT  DELETE  TRACE  are legal, subject to protocol restrictions."
    },
    {
        "function": "toASCII",
        "parameters": [
            "String"
        ],
        "comments": "Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490."
    },
    {
        "function": "toASCII",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490."
    },
    {
        "function": "toUnicode",
        "parameters": [
            "String"
        ],
        "comments": "Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490."
    },
    {
        "function": "toUnicode",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "getAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw IP address of this InetAddress object."
    },
    {
        "function": "getHostAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the IP address string in textual presentation form."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this IP address."
    },
    {
        "function": "isAnyLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a wildcard address."
    },
    {
        "function": "isLinkLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an link local address."
    },
    {
        "function": "isLoopbackAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a loopback address."
    },
    {
        "function": "isMCGlobal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has global scope."
    },
    {
        "function": "isMCLinkLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has link scope."
    },
    {
        "function": "isMCNodeLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has node scope."
    },
    {
        "function": "isMCOrgLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has organization scope."
    },
    {
        "function": "isMCSiteLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has site scope."
    },
    {
        "function": "isMulticastAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an IP multicast address."
    },
    {
        "function": "isSiteLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a site local address."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "getAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw IP address of this InetAddress object."
    },
    {
        "function": "getByAddress",
        "parameters": [
            "String",
            "byte[]",
            "int"
        ],
        "comments": "Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value."
    },
    {
        "function": "getByAddress",
        "parameters": [
            "String",
            "byte[]",
            "NetworkInterface"
        ],
        "comments": "Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr."
    },
    {
        "function": "getHostAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the IP address string in textual presentation."
    },
    {
        "function": "getScopedInterface",
        "parameters": [
            ""
        ],
        "comments": "Returns the scoped interface, if this instance was created with with a scoped interface."
    },
    {
        "function": "getScopeId",
        "parameters": [
            ""
        ],
        "comments": "Returns the numeric scopeId, if this instance is associated with an interface."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this IP address."
    },
    {
        "function": "isAnyLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a wildcard address."
    },
    {
        "function": "isIPv4CompatibleAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address."
    },
    {
        "function": "isLinkLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an link local address."
    },
    {
        "function": "isLoopbackAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a loopback address."
    },
    {
        "function": "isMCGlobal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has global scope."
    },
    {
        "function": "isMCLinkLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has link scope."
    },
    {
        "function": "isMCNodeLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has node scope."
    },
    {
        "function": "isMCOrgLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has organization scope."
    },
    {
        "function": "isMCSiteLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has site scope."
    },
    {
        "function": "isMulticastAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an IP multicast address. 11111111 at the start of the address identifies the address as being a multicast address."
    },
    {
        "function": "isSiteLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a site local address."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "getAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw IP address of this InetAddress object."
    },
    {
        "function": "getAllByName",
        "parameters": [
            "String"
        ],
        "comments": "Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system."
    },
    {
        "function": "getByAddress",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns an InetAddress object given the raw IP address ."
    },
    {
        "function": "getByAddress",
        "parameters": [
            "String",
            "byte[]"
        ],
        "comments": "Creates an InetAddress based on the provided host name and IP address."
    },
    {
        "function": "getByName",
        "parameters": [
            "String"
        ],
        "comments": "Determines the IP address of a host, given the host's name."
    },
    {
        "function": "getCanonicalHostName",
        "parameters": [
            ""
        ],
        "comments": "Gets the fully qualified domain name for this IP address."
    },
    {
        "function": "getHostAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the IP address string in textual presentation."
    },
    {
        "function": "getHostName",
        "parameters": [
            ""
        ],
        "comments": "Gets the host name for this IP address."
    },
    {
        "function": "getLocalHost",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the local host."
    },
    {
        "function": "getLoopbackAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the loopback address."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this IP address."
    },
    {
        "function": "isAnyLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a wildcard address."
    },
    {
        "function": "isLinkLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an link local address."
    },
    {
        "function": "isLoopbackAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a loopback address."
    },
    {
        "function": "isMCGlobal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has global scope."
    },
    {
        "function": "isMCLinkLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has link scope."
    },
    {
        "function": "isMCNodeLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has node scope."
    },
    {
        "function": "isMCOrgLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has organization scope."
    },
    {
        "function": "isMCSiteLocal",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the multicast address has site scope."
    },
    {
        "function": "isMulticastAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is an IP multicast address."
    },
    {
        "function": "isReachable",
        "parameters": [
            "int"
        ],
        "comments": "Test whether that address is reachable."
    },
    {
        "function": "isReachable",
        "parameters": [
            "NetworkInterface",
            "int",
            "int"
        ],
        "comments": "Test whether that address is reachable."
    },
    {
        "function": "isSiteLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Utility routine to check if the InetAddress is a site local address."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Converts this IP address to a String."
    },
    {
        "function": "createUnresolved",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Creates a socket address where the IP address is the wildcard address and the port number a specified value."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a socket address from a hostname and a port number."
    },
    {
        "function": "getAddress",
        "parameters": [
            ""
        ],
        "comments": "Creates a socket address from an IP address and a port number."
    },
    {
        "function": "getHostName",
        "parameters": [
            ""
        ],
        "comments": "Creates an unresolved socket address from a hostname and a port number."
    },
    {
        "function": "getHostString",
        "parameters": [
            ""
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Gets the InetAddress."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the hostname."
    },
    {
        "function": "isUnresolved",
        "parameters": [
            ""
        ],
        "comments": "Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Gets the port number."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Creates the new JarURLConnection to the specified URL."
    },
    {
        "function": "getCertificates",
        "parameters": [
            ""
        ],
        "comments": "Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise."
    },
    {
        "function": "getEntryName",
        "parameters": [
            ""
        ],
        "comments": "Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise."
    },
    {
        "function": "getJarEntry",
        "parameters": [
            ""
        ],
        "comments": "Return the entry name for this connection."
    },
    {
        "function": "getJarFile",
        "parameters": [
            ""
        ],
        "comments": "Return the JAR entry object for this connection, if any."
    },
    {
        "function": "getJarFileURL",
        "parameters": [
            ""
        ],
        "comments": "Return the JAR file for this connection."
    },
    {
        "function": "getMainAttributes",
        "parameters": [
            ""
        ],
        "comments": "Returns the URL for the Jar file for this connection."
    },
    {
        "function": "getManifest",
        "parameters": [
            ""
        ],
        "comments": "Returns the main Attributes for the JAR file for this connection."
    },
    {
        "function": "getInterface",
        "parameters": [
            ""
        ],
        "comments": "Create a multicast socket."
    },
    {
        "function": "getLoopbackMode",
        "parameters": [
            ""
        ],
        "comments": "Create a multicast socket and bind it to a specific port."
    },
    {
        "function": "getNetworkInterface",
        "parameters": [
            ""
        ],
        "comments": "Create a MulticastSocket bound to the specified socket address."
    },
    {
        "function": "getTimeToLive",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the address of the network interface used for multicast packets."
    },
    {
        "function": "getTTL",
        "parameters": [
            ""
        ],
        "comments": "Get the setting for local loopback of multicast datagrams."
    },
    {
        "function": "joinGroup",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Get the multicast network interface set."
    },
    {
        "function": "joinGroup",
        "parameters": [
            "SocketAddress",
            "NetworkInterface"
        ],
        "comments": "Get the default time-to-live for multicast packets sent out on the socket."
    },
    {
        "function": "leaveGroup",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Deprecated.use the getTimeToLive method instead, which returns an int instead of a byte."
    },
    {
        "function": "leaveGroup",
        "parameters": [
            "SocketAddress",
            "NetworkInterface"
        ],
        "comments": "Joins a multicast group."
    },
    {
        "function": "send",
        "parameters": [
            "DatagramPacket",
            "byte"
        ],
        "comments": "Joins the specified multicast group at the specified interface."
    },
    {
        "function": "setInterface",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Leave a multicast group."
    },
    {
        "function": "setLoopbackMode",
        "parameters": [
            "boolean"
        ],
        "comments": "Leave a multicast group on a specified local interface."
    },
    {
        "function": "setNetworkInterface",
        "parameters": [
            "NetworkInterface"
        ],
        "comments": "Deprecated.Use the following code or its equivalent instead:  ......"
    },
    {
        "function": "setTimeToLive",
        "parameters": [
            "int"
        ],
        "comments": "Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface."
    },
    {
        "function": "setTTL",
        "parameters": [
            "byte"
        ],
        "comments": "Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket."
    },
    {
        "function": "getPassword",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PasswordAuthentication object from the given user name and password."
    },
    {
        "function": "getUserName",
        "parameters": [
            ""
        ],
        "comments": "Returns the user password."
    },
    {
        "function": "address",
        "parameters": [
            ""
        ],
        "comments": "Creates an entry representing a PROXY connection."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the socket address of the proxy, or null if its a direct connection."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this Proxy."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Constructs a string representation of this Proxy."
    },
    {
        "function": "connectFailed",
        "parameters": [
            "URI",
            "SocketAddress",
            "IOException"
        ],
        "comments": "Called to indicate that a connection could not be established to a proxy/socks server."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the system-wide proxy selector."
    },
    {
        "function": "of",
        "parameters": [
            "InetSocketAddress"
        ],
        "comments": "Returns a ProxySelector which uses the given proxy address for all HTTP and HTTPS requests."
    },
    {
        "function": "select",
        "parameters": [
            "URI"
        ],
        "comments": "Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at."
    },
    {
        "function": "setDefault",
        "parameters": [
            "ProxySelector"
        ],
        "comments": "Sets (or unsets) the system-wide proxy selector."
    },
    {
        "function": "get",
        "parameters": [
            "URI",
            "String",
            "Map<String",
            "List<String>>"
        ],
        "comments": "Retrieve the cached response based on the requesting uri, request method and request headers."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the system-wide response cache."
    },
    {
        "function": "put",
        "parameters": [
            "URI",
            "URLConnection"
        ],
        "comments": "The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache."
    },
    {
        "function": "setDefault",
        "parameters": [
            "ResponseCache"
        ],
        "comments": "Sets (or unsets) the system-wide cache."
    },
    {
        "function": "getCipherSuite",
        "parameters": [
            ""
        ],
        "comments": "Returns the cipher suite in use on the original connection that retrieved the network resource."
    },
    {
        "function": "getLocalCertificateChain",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource."
    },
    {
        "function": "getLocalPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource."
    },
    {
        "function": "getPeerPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource."
    },
    {
        "function": "getServerCertificateChain",
        "parameters": [
            ""
        ],
        "comments": "Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache."
    },
    {
        "function": "accept",
        "parameters": [
            ""
        ],
        "comments": "Creates an unbound server socket."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Creates a server socket, bound to the specified port."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress",
            "int"
        ],
        "comments": "Creates a server socket and binds it to the specified local port number, with the specified backlog."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Create a server with the specified port, listen backlog, and local IP address to bind to."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Listens for a connection to be made to this socket and accepts it."
    },
    {
        "function": "getInetAddress",
        "parameters": [
            ""
        ],
        "comments": "Binds the ServerSocket to a specific address (IP address and port number)."
    },
    {
        "function": "getLocalPort",
        "parameters": [
            ""
        ],
        "comments": "Binds the ServerSocket to a specific address (IP address and port number)."
    },
    {
        "function": "getLocalSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Closes this socket."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Returns the unique ServerSocketChannel object associated with this socket, if any."
    },
    {
        "function": "getReceiveBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the local address of this server socket."
    },
    {
        "function": "getReuseAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number on which this socket is listening."
    },
    {
        "function": "getSoTimeout",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the endpoint this socket is bound to."
    },
    {
        "function": "implAccept",
        "parameters": [
            "Socket"
        ],
        "comments": "Returns the value of a socket option."
    },
    {
        "function": "isBound",
        "parameters": [
            ""
        ],
        "comments": "Gets the value of the SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket."
    },
    {
        "function": "isClosed",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_REUSEADDR is enabled."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Retrieve setting for SO_TIMEOUT. 0 returns implies that the option is disabled (i.e., timeout of infinity)."
    },
    {
        "function": "setPerformancePreferences",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket."
    },
    {
        "function": "setReceiveBufferSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the binding state of the ServerSocket."
    },
    {
        "function": "setReuseAddress",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the closed state of the ServerSocket."
    },
    {
        "function": "setSocketFactory",
        "parameters": [
            "SocketImplFactory"
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "setSoTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Sets performance preferences for this ServerSocket."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Sets a default proposed value for the SO_RCVBUF option for sockets accepted from this ServerSocket."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Enable/disable the SO_REUSEADDR socket option."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Creates an unconnected socket, with the system-default type of SocketImpl."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a stream socket and connects it to the specified port number on the named host."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Deprecated.Use DatagramSocket instead for UDP transport."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress",
            "int"
        ],
        "comments": "Creates a socket and connects it to the specified remote host on the specified remote port."
    },
    {
        "function": "getChannel",
        "parameters": [
            ""
        ],
        "comments": "Creates a stream socket and connects it to the specified port number at the specified IP address."
    },
    {
        "function": "getInetAddress",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.Use DatagramSocket instead for UDP transport."
    },
    {
        "function": "getInputStream",
        "parameters": [
            ""
        ],
        "comments": "Creates a socket and connects it to the specified remote address on the specified remote port."
    },
    {
        "function": "getKeepAlive",
        "parameters": [
            ""
        ],
        "comments": "Creates an unconnected socket, specifying the type of proxy, if any, that should be used regardless of any other settings."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Creates an unconnected Socket with a user-specified SocketImpl."
    },
    {
        "function": "getLocalPort",
        "parameters": [
            ""
        ],
        "comments": "Binds the socket to a local address."
    },
    {
        "function": "getLocalSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Closes this socket."
    },
    {
        "function": "getOOBInline",
        "parameters": [
            ""
        ],
        "comments": "Connects this socket to the server."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Connects this socket to the server with a specified timeout value."
    },
    {
        "function": "getOutputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the unique SocketChannel object associated with this socket, if any."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the address to which the socket is connected."
    },
    {
        "function": "getReceiveBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Returns an input stream for this socket."
    },
    {
        "function": "getRemoteSocketAddress",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_KEEPALIVE is enabled."
    },
    {
        "function": "getReuseAddress",
        "parameters": [
            ""
        ],
        "comments": "Gets the local address to which the socket is bound."
    },
    {
        "function": "getSendBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the local port number to which this socket is bound."
    },
    {
        "function": "getSoLinger",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the endpoint this socket is bound to."
    },
    {
        "function": "getSoTimeout",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_OOBINLINE is enabled."
    },
    {
        "function": "getTcpNoDelay",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of a socket option."
    },
    {
        "function": "getTrafficClass",
        "parameters": [
            ""
        ],
        "comments": "Returns an output stream for this socket."
    },
    {
        "function": "isBound",
        "parameters": [
            ""
        ],
        "comments": "Returns the remote port number to which this socket is connected."
    },
    {
        "function": "isClosed",
        "parameters": [
            ""
        ],
        "comments": "Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket."
    },
    {
        "function": "isConnected",
        "parameters": [
            ""
        ],
        "comments": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected."
    },
    {
        "function": "isInputShutdown",
        "parameters": [
            ""
        ],
        "comments": "Tests if SO_REUSEADDR is enabled."
    },
    {
        "function": "isOutputShutdown",
        "parameters": [
            ""
        ],
        "comments": "Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket."
    },
    {
        "function": "sendUrgentData",
        "parameters": [
            "int"
        ],
        "comments": "Returns setting for SO_LINGER."
    },
    {
        "function": "setKeepAlive",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns setting for SO_TIMEOUT. 0 returns implies that the option is disabled (i.e., timeout of infinity)."
    },
    {
        "function": "setOOBInline",
        "parameters": [
            "boolean"
        ],
        "comments": "Tests if TCP_NODELAY is enabled."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Gets traffic class or type-of-service in the IP header for packets sent from this Socket"
    },
    {
        "function": "setPerformancePreferences",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the binding state of the socket."
    },
    {
        "function": "setReceiveBufferSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the closed state of the socket."
    },
    {
        "function": "setReuseAddress",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the connection state of the socket."
    },
    {
        "function": "setSendBufferSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns whether the read-half of the socket connection is closed."
    },
    {
        "function": "setSocketImplFactory",
        "parameters": [
            "SocketImplFactory"
        ],
        "comments": "Returns whether the write-half of the socket connection is closed."
    },
    {
        "function": "setSoLinger",
        "parameters": [
            "boolean",
            "int"
        ],
        "comments": "Send one byte of urgent data on the socket."
    },
    {
        "function": "setSoTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Enable/disable SO_KEEPALIVE."
    },
    {
        "function": "setTcpNoDelay",
        "parameters": [
            "boolean"
        ],
        "comments": "Enable/disable SO_OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded."
    },
    {
        "function": "setTrafficClass",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "shutdownInput",
        "parameters": [
            ""
        ],
        "comments": "Sets performance preferences for this socket."
    },
    {
        "function": "shutdownOutput",
        "parameters": [
            ""
        ],
        "comments": "Sets the SO_RCVBUF option to the specified value for this Socket."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Enable/disable the SO_REUSEADDR socket option."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the SO_SNDBUF option to the specified value for this Socket."
    },
    {
        "function": "accept",
        "parameters": [
            "SocketImpl"
        ],
        "comments": "Accepts a connection."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes that can be read from this socket without blocking."
    },
    {
        "function": "bind",
        "parameters": [
            "InetAddress",
            "int"
        ],
        "comments": "Binds this socket to the specified local IP address and port number."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this socket."
    },
    {
        "function": "connect",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Connects this socket to the specified port on the named host."
    },
    {
        "function": "connect",
        "parameters": [
            "InetAddress",
            "int"
        ],
        "comments": "Connects this socket to the specified port number on the specified host."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress",
            "int"
        ],
        "comments": "Connects this socket to the specified port number on the specified host."
    },
    {
        "function": "create",
        "parameters": [
            "boolean"
        ],
        "comments": "Creates either a stream or a datagram socket."
    },
    {
        "function": "getFileDescriptor",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this socket's fd field."
    },
    {
        "function": "getInetAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this socket's address field."
    },
    {
        "function": "getInputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns an input stream for this socket."
    },
    {
        "function": "getLocalPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this socket's localport field."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Called to get a socket option."
    },
    {
        "function": "getOutputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns an output stream for this socket."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this socket's port field."
    },
    {
        "function": "listen",
        "parameters": [
            "int"
        ],
        "comments": "Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument."
    },
    {
        "function": "sendUrgentData",
        "parameters": [
            "int"
        ],
        "comments": "Send one byte of urgent data on the socket."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Called to set a socket option."
    },
    {
        "function": "setPerformancePreferences",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets performance preferences for this socket."
    },
    {
        "function": "shutdownInput",
        "parameters": [
            ""
        ],
        "comments": "Places the input stream for this socket at \"end of stream\"."
    },
    {
        "function": "shutdownOutput",
        "parameters": [
            ""
        ],
        "comments": "Disables the output stream for this socket."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)"
    },
    {
        "function": "supportsUrgentData",
        "parameters": [
            ""
        ],
        "comments": "Returns whether or not this SocketImpl supports sending urgent data."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the address and port of this socket as a String."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new SocketPermission object with the specified actions."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two SocketPermission objects for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the canonical string representation of the actions."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Checks if this socket permission object \"implies\" the specified permission."
    },
    {
        "function": "compareTo",
        "parameters": [
            "URI"
        ],
        "comments": "Constructs a URI by parsing the given string."
    },
    {
        "function": "create",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a URI from the given components."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a hierarchical URI from the given components."
    },
    {
        "function": "getAuthority",
        "parameters": [
            ""
        ],
        "comments": "Constructs a hierarchical URI from the given components."
    },
    {
        "function": "getFragment",
        "parameters": [
            ""
        ],
        "comments": "Constructs a hierarchical URI from the given components."
    },
    {
        "function": "getHost",
        "parameters": [
            ""
        ],
        "comments": "Compares this URI to another object, which must be a URI."
    },
    {
        "function": "getPath",
        "parameters": [
            ""
        ],
        "comments": "Creates a URI by parsing the given string."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Tests this URI for equality with another object."
    },
    {
        "function": "getQuery",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded authority component of this URI."
    },
    {
        "function": "getRawAuthority",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded fragment component of this URI."
    },
    {
        "function": "getRawFragment",
        "parameters": [
            ""
        ],
        "comments": "Returns the host component of this URI."
    },
    {
        "function": "getRawPath",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded path component of this URI."
    },
    {
        "function": "getRawQuery",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number of this URI."
    },
    {
        "function": "getRawSchemeSpecificPart",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded query component of this URI."
    },
    {
        "function": "getRawUserInfo",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw authority component of this URI."
    },
    {
        "function": "getScheme",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw fragment component of this URI."
    },
    {
        "function": "getSchemeSpecificPart",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw path component of this URI."
    },
    {
        "function": "getUserInfo",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw query component of this URI."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw scheme-specific part of this URI."
    },
    {
        "function": "isAbsolute",
        "parameters": [
            ""
        ],
        "comments": "Returns the raw user-information component of this URI."
    },
    {
        "function": "isOpaque",
        "parameters": [
            ""
        ],
        "comments": "Returns the scheme component of this URI."
    },
    {
        "function": "normalize",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded scheme-specific part of this URI."
    },
    {
        "function": "parseServerAuthority",
        "parameters": [
            ""
        ],
        "comments": "Returns the decoded user-information component of this URI."
    },
    {
        "function": "relativize",
        "parameters": [
            "URI"
        ],
        "comments": "Returns a hash-code value for this URI."
    },
    {
        "function": "resolve",
        "parameters": [
            "String"
        ],
        "comments": "Tells whether or not this URI is absolute."
    },
    {
        "function": "resolve",
        "parameters": [
            "URI"
        ],
        "comments": "Tells whether or not this URI is opaque."
    },
    {
        "function": "toASCIIString",
        "parameters": [
            ""
        ],
        "comments": "Normalizes this URI's path."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Attempts to parse this URI's authority component, if defined, into user-information, host, and port components."
    },
    {
        "function": "toURL",
        "parameters": [
            ""
        ],
        "comments": "Relativizes the given URI against this URI."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a URL object from the String representation."
    },
    {
        "function": "getAuthority",
        "parameters": [
            ""
        ],
        "comments": "Creates a URL object from the specified protocol, host, port number, and file."
    },
    {
        "function": "getContent",
        "parameters": [
            ""
        ],
        "comments": "Creates a URL object from the specified protocol, host, port number, file, and handler."
    },
    {
        "function": "getContent",
        "parameters": [
            "Class<?>[]"
        ],
        "comments": "Creates a URL from the specified protocol name, host name, and file name."
    },
    {
        "function": "getDefaultPort",
        "parameters": [
            ""
        ],
        "comments": "Creates a URL by parsing the given spec within a specified context."
    },
    {
        "function": "getFile",
        "parameters": [
            ""
        ],
        "comments": "Creates a URL by parsing the given spec with the specified handler within a specified context."
    },
    {
        "function": "getHost",
        "parameters": [
            ""
        ],
        "comments": "Compares this URL for equality with another object."
    },
    {
        "function": "getPath",
        "parameters": [
            ""
        ],
        "comments": "Gets the authority part of this URL."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Gets the contents of this URL."
    },
    {
        "function": "getProtocol",
        "parameters": [
            ""
        ],
        "comments": "Gets the contents of this URL."
    },
    {
        "function": "getQuery",
        "parameters": [
            ""
        ],
        "comments": "Gets the default port number of the protocol associated with this URL."
    },
    {
        "function": "getRef",
        "parameters": [
            ""
        ],
        "comments": "Gets the file name of this URL."
    },
    {
        "function": "getUserInfo",
        "parameters": [
            ""
        ],
        "comments": "Gets the host name of this URL, if applicable."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the path part of this URL."
    },
    {
        "function": "openConnection",
        "parameters": [
            ""
        ],
        "comments": "Gets the port number of this URL."
    },
    {
        "function": "openConnection",
        "parameters": [
            "Proxy"
        ],
        "comments": "Gets the protocol name of this URL."
    },
    {
        "function": "openStream",
        "parameters": [
            ""
        ],
        "comments": "Gets the query part of this URL."
    },
    {
        "function": "sameFile",
        "parameters": [
            "URL"
        ],
        "comments": "Gets the anchor (also known as the \"reference\") of this URL."
    },
    {
        "function": "setURLStreamHandlerFactory",
        "parameters": [
            "URLStreamHandlerFactory"
        ],
        "comments": "Gets the userInfo part of this URL."
    },
    {
        "function": "toExternalForm",
        "parameters": [
            ""
        ],
        "comments": "Creates an integer suitable for hash table indexing."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a URLConnection instance that represents a connection to the remote object referred to by the URL."
    },
    {
        "function": "toURI",
        "parameters": [
            ""
        ],
        "comments": "Same as openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection."
    },
    {
        "function": "addRequestProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Constructs a URL connection to the specified URL."
    },
    {
        "function": "connect",
        "parameters": [
            ""
        ],
        "comments": "Adds a general request property specified by a key-value pair."
    },
    {
        "function": "getAllowUserInteraction",
        "parameters": [
            ""
        ],
        "comments": "Opens a communications link to the resource referenced by this URL, if such a connection has not already been established."
    },
    {
        "function": "getConnectTimeout",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the allowUserInteraction field for this object."
    },
    {
        "function": "getContent",
        "parameters": [
            ""
        ],
        "comments": "Returns setting for connect timeout."
    },
    {
        "function": "getContent",
        "parameters": [
            "Class<?>[]"
        ],
        "comments": "Retrieves the contents of this URL connection."
    },
    {
        "function": "getContentEncoding",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the contents of this URL connection."
    },
    {
        "function": "getContentLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the content-encoding header field."
    },
    {
        "function": "getContentLengthLong",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the content-length header field."
    },
    {
        "function": "getContentType",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the content-length header field as a long."
    },
    {
        "function": "getDate",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the content-type header field."
    },
    {
        "function": "getDefaultAllowUserInteraction",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the date header field."
    },
    {
        "function": "getDefaultRequestProperty",
        "parameters": [
            "String"
        ],
        "comments": "Returns the default value of the allowUserInteraction field."
    },
    {
        "function": "getDefaultUseCaches",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained."
    },
    {
        "function": "getDefaultUseCaches",
        "parameters": [
            "String"
        ],
        "comments": "Returns the default value of a URLConnection's useCaches flag."
    },
    {
        "function": "getDoInput",
        "parameters": [
            ""
        ],
        "comments": "Returns the default value of the useCaches flag for the given protocol."
    },
    {
        "function": "getDoOutput",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this URLConnection's doInput flag."
    },
    {
        "function": "getExpiration",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this URLConnection's doOutput flag."
    },
    {
        "function": "getFileNameMap",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the expires header field."
    },
    {
        "function": "getHeaderField",
        "parameters": [
            "int"
        ],
        "comments": "Loads filename map (a mimetable) from a data file."
    },
    {
        "function": "getHeaderField",
        "parameters": [
            "String"
        ],
        "comments": "Returns the value for the nth header field."
    },
    {
        "function": "getHeaderFieldDate",
        "parameters": [
            "String",
            "long"
        ],
        "comments": "Returns the value of the named header field."
    },
    {
        "function": "getHeaderFieldInt",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Returns the value of the named field parsed as date."
    },
    {
        "function": "getHeaderFieldKey",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value of the named field parsed as a number."
    },
    {
        "function": "getHeaderFieldLong",
        "parameters": [
            "String",
            "long"
        ],
        "comments": "Returns the key for the nth header field."
    },
    {
        "function": "getHeaderFields",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the named field parsed as a number."
    },
    {
        "function": "getIfModifiedSince",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable Map of the header fields."
    },
    {
        "function": "getInputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this object's ifModifiedSince field."
    },
    {
        "function": "getLastModified",
        "parameters": [
            ""
        ],
        "comments": "Returns an input stream that reads from this open connection."
    },
    {
        "function": "getOutputStream",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the last-modified header field."
    },
    {
        "function": "getPermission",
        "parameters": [
            ""
        ],
        "comments": "Returns an output stream that writes to this connection."
    },
    {
        "function": "getReadTimeout",
        "parameters": [
            ""
        ],
        "comments": "Returns a permission object representing the permission necessary to make the connection represented by this object."
    },
    {
        "function": "getRequestProperties",
        "parameters": [
            ""
        ],
        "comments": "Returns setting for read timeout. 0 return implies that the option is disabled (i.e., timeout of infinity)."
    },
    {
        "function": "getRequestProperty",
        "parameters": [
            "String"
        ],
        "comments": "Returns an unmodifiable Map of general request properties for this connection."
    },
    {
        "function": "getURL",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the named general request property for this connection."
    },
    {
        "function": "getUseCaches",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of this URLConnection's URL field."
    },
    {
        "function": "guessContentTypeFromName",
        "parameters": [
            "String"
        ],
        "comments": "Returns the value of this URLConnection's useCaches field."
    },
    {
        "function": "guessContentTypeFromStream",
        "parameters": [
            "InputStream"
        ],
        "comments": "Tries to determine the content type of an object, based on the specified \"file\" component of a URL."
    },
    {
        "function": "setAllowUserInteraction",
        "parameters": [
            "boolean"
        ],
        "comments": "Tries to determine the type of an input stream based on the characters at the beginning of the input stream."
    },
    {
        "function": "setConnectTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Set the value of the allowUserInteraction field of this URLConnection."
    },
    {
        "function": "setContentHandlerFactory",
        "parameters": [
            "ContentHandlerFactory"
        ],
        "comments": "Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection."
    },
    {
        "function": "setDefaultAllowUserInteraction",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the ContentHandlerFactory of an application."
    },
    {
        "function": "setDefaultRequestProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value."
    },
    {
        "function": "setDefaultUseCaches",
        "parameters": [
            "boolean"
        ],
        "comments": "Deprecated.The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained."
    },
    {
        "function": "setDefaultUseCaches",
        "parameters": [
            "String",
            "boolean"
        ],
        "comments": "Sets the default value of the useCaches field to the specified value."
    },
    {
        "function": "setDoInput",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the default value of the useCaches field for the named protocol to the given value."
    },
    {
        "function": "setDoOutput",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the value of the doInput field for this URLConnection to the specified value."
    },
    {
        "function": "setFileNameMap",
        "parameters": [
            "FileNameMap"
        ],
        "comments": "Sets the value of the doOutput field for this URLConnection to the specified value."
    },
    {
        "function": "setIfModifiedSince",
        "parameters": [
            "long"
        ],
        "comments": "Sets the FileNameMap."
    },
    {
        "function": "setReadTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value of the ifModifiedSince field of this URLConnection to the specified value."
    },
    {
        "function": "setRequestProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Sets the read timeout to a specified timeout, in milliseconds."
    },
    {
        "function": "setUseCaches",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the general request property."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of the useCaches field of this URLConnection to the specified value."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.The resulting string may vary depending on the platform's          default encoding."
    },
    {
        "function": "decode",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Decodes an application/x-www-form-urlencoded string using a specific encoding scheme."
    },
    {
        "function": "decode",
        "parameters": [
            "String",
            "Charset"
        ],
        "comments": "Decodes an application/x-www-form-urlencoded string using a specific Charset."
    },
    {
        "function": "encode",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.The resulting string may vary depending on the platform's             default encoding."
    },
    {
        "function": "encode",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme."
    },
    {
        "function": "encode",
        "parameters": [
            "String",
            "Charset"
        ],
        "comments": "Translates a string into application/x-www-form-urlencoded format using a specific Charset."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a URLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: URLPermission(url, \"*:*\")"
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Creates a new URLPermission from a url string and which permits the given request methods and user-settable request headers."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the normalized method list and request header list, in the form:"
    },
    {
        "function": "equals",
        "parameters": [
            "URL",
            "URL"
        ],
        "comments": "Provides the default equals calculation."
    },
    {
        "function": "getDefaultPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the default port for a URL parsed by this handler."
    },
    {
        "function": "getHostAddress",
        "parameters": [
            "URL"
        ],
        "comments": "Get the IP address of our host."
    },
    {
        "function": "hashCode",
        "parameters": [
            "URL"
        ],
        "comments": "Provides the default hash calculation."
    },
    {
        "function": "hostsEqual",
        "parameters": [
            "URL",
            "URL"
        ],
        "comments": "Compares the host components of two URLs."
    },
    {
        "function": "openConnection",
        "parameters": [
            "URL"
        ],
        "comments": "Opens a connection to the object referenced by the URL argument."
    },
    {
        "function": "openConnection",
        "parameters": [
            "URL",
            "Proxy"
        ],
        "comments": "Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection."
    },
    {
        "function": "parseURL",
        "parameters": [
            "URL",
            "String",
            "int",
            "int"
        ],
        "comments": "Parses the string representation of a URL into a URL object."
    },
    {
        "function": "sameFile",
        "parameters": [
            "URL",
            "URL"
        ],
        "comments": "Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path."
    },
    {
        "function": "setURL",
        "parameters": [
            "URL",
            "String",
            "String",
            "int",
            "String",
            "String"
        ],
        "comments": "Deprecated.Use setURL(URL, String, String, int, String, String, String,             String);"
    },
    {
        "function": "setURL",
        "parameters": [
            "URL",
            "String",
            "String",
            "int",
            "String",
            "String",
            "String",
            "String",
            "String"
        ],
        "comments": "Sets the fields of the URL argument to the indicated values."
    },
    {
        "function": "toExternalForm",
        "parameters": [
            "URL"
        ],
        "comments": "Converts a URL of a specific protocol to a String."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Entity requesting authentication is a HTTP proxy server."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Entity requesting authentication is a HTTP origin server."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Represents a direct connection, or the absence of a proxy."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Represents proxy for high level protocols such as HTTP or FTP."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Internet Protocol Version 4 (IPv4)"
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Internet Protocol Version 6 (IPv6)"
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "capacity",
        "parameters": [
            ""
        ],
        "comments": "Returns this buffer's capacity."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Clears this buffer."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new buffer that shares this buffer's content."
    },
    {
        "function": "flip",
        "parameters": [
            ""
        ],
        "comments": "Flips this buffer."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible array."
    },
    {
        "function": "hasRemaining",
        "parameters": [
            ""
        ],
        "comments": "Tells whether there are any elements between the current position and the limit."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is direct."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is read-only."
    },
    {
        "function": "limit",
        "parameters": [
            ""
        ],
        "comments": "Returns this buffer's limit."
    },
    {
        "function": "limit",
        "parameters": [
            "int"
        ],
        "comments": "Sets this buffer's limit."
    },
    {
        "function": "mark",
        "parameters": [
            ""
        ],
        "comments": "Sets this buffer's mark at its position."
    },
    {
        "function": "position",
        "parameters": [
            ""
        ],
        "comments": "Returns this buffer's position."
    },
    {
        "function": "position",
        "parameters": [
            "int"
        ],
        "comments": "Sets this buffer's position."
    },
    {
        "function": "remaining",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of elements between the current position and the limit."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Resets this buffer's position to the previously-marked position."
    },
    {
        "function": "rewind",
        "parameters": [
            ""
        ],
        "comments": "Rewinds this buffer."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "alignedSlice",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new byte buffer whose content is a shared and aligned subsequence of this buffer's content."
    },
    {
        "function": "alignmentOffset",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the memory address, pointing to the byte at the given index, modulus the given unit size."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new byte buffer."
    },
    {
        "function": "allocateDirect",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new direct byte buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the byte array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asCharBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as a char buffer."
    },
    {
        "function": "asDoubleBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as a double buffer."
    },
    {
        "function": "asFloatBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as a float buffer."
    },
    {
        "function": "asIntBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as an int buffer."
    },
    {
        "function": "asLongBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as a long buffer."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only byte buffer that shares this buffer's content."
    },
    {
        "function": "asShortBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a view of this byte buffer as a short buffer."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new byte buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "byte[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "getChar",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading a char value."
    },
    {
        "function": "getChar",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading a char value."
    },
    {
        "function": "getDouble",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading a double value."
    },
    {
        "function": "getDouble",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading a double value."
    },
    {
        "function": "getFloat",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading a float value."
    },
    {
        "function": "getFloat",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading a float value."
    },
    {
        "function": "getInt",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading an int value."
    },
    {
        "function": "getInt",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading an int value."
    },
    {
        "function": "getLong",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading a long value."
    },
    {
        "function": "getLong",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading a long value."
    },
    {
        "function": "getShort",
        "parameters": [
            ""
        ],
        "comments": "Relative get method for reading a short value."
    },
    {
        "function": "getShort",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method for reading a short value."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible byte array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this byte buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "order",
        "parameters": [
            "ByteOrder"
        ],
        "comments": "Modifies this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "byte"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "byte[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "byte"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putChar",
        "parameters": [
            "char"
        ],
        "comments": "Relative put method for writing a char value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putChar",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Absolute put method for writing a char value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putDouble",
        "parameters": [
            "double"
        ],
        "comments": "Relative put method for writing a double value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putDouble",
        "parameters": [
            "int",
            "double"
        ],
        "comments": "Absolute put method for writing a double value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putFloat",
        "parameters": [
            "float"
        ],
        "comments": "Relative put method for writing a float value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putFloat",
        "parameters": [
            "int",
            "float"
        ],
        "comments": "Absolute put method for writing a float value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putInt",
        "parameters": [
            "int"
        ],
        "comments": "Relative put method for writing an int value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putInt",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Absolute put method for writing an int value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putLong",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Absolute put method for writing a long value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putLong",
        "parameters": [
            "long"
        ],
        "comments": "Relative put method for writing a long value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putShort",
        "parameters": [
            "int",
            "short"
        ],
        "comments": "Absolute put method for writing a short value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "putShort",
        "parameters": [
            "short"
        ],
        "comments": "Relative put method for writing a short value\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new byte buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "byte[]"
        ],
        "comments": "Wraps a byte array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Wraps a byte array into a buffer."
    },
    {
        "function": "nativeOrder",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the native byte order of the underlying platform."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Constructs a string describing this object."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new char buffer."
    },
    {
        "function": "append",
        "parameters": [
            "char"
        ],
        "comments": "Appends the specified char  to this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Appends the specified character sequence  to this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "append",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Appends a subsequence of the  specified character sequence  to this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the char array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only char buffer that shares this buffer's content."
    },
    {
        "function": "charAt",
        "parameters": [
            "int"
        ],
        "comments": "Reads the character at the given index relative to the current position."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new char buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "char[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible char array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this char buffer is direct."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of this character buffer."
    },
    {
        "function": "mismatch",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "char"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "char[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "String"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "String",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "read",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Attempts to read characters into the specified character buffer."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new char buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "subSequence",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string containing the characters in this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "char[]"
        ],
        "comments": "Wraps a char array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Wraps a char array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Wraps a character sequence into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "CharSequence",
            "int",
            "int"
        ],
        "comments": "Wraps a character sequence into a buffer."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new double buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the double array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only double buffer that shares this buffer's content."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "DoubleBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new double buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "double[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible double array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this double buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "DoubleBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "double"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "double[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "double"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "DoubleBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new double buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "double[]"
        ],
        "comments": "Wraps a double array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Wraps a double array into a buffer."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new float buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the float array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only float buffer that shares this buffer's content."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "FloatBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new float buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "float[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible float array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this float buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "FloatBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "float"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "float[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "float"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "FloatBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new float buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "float[]"
        ],
        "comments": "Wraps a float array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Wraps a float array into a buffer."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new int buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the int array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only int buffer that shares this buffer's content."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "IntBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new int buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "get",
        "parameters": [
            "int[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible int array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this int buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "IntBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "int"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "IntBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new int buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "int[]"
        ],
        "comments": "Wraps an int array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Wraps an int array into a buffer."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new long buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the long array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only long buffer that shares this buffer's content."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "LongBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new long buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "get",
        "parameters": [
            "long[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible long array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this long buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "LongBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "long"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "long[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "LongBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new long buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "long[]"
        ],
        "comments": "Wraps a long array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Wraps a long array into a buffer."
    },
    {
        "function": "force",
        "parameters": [
            ""
        ],
        "comments": "Forces any changes made to this buffer's content to be written to the storage device containing the mapped file."
    },
    {
        "function": "isLoaded",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer's content is resident in physical memory."
    },
    {
        "function": "load",
        "parameters": [
            ""
        ],
        "comments": "Loads this buffer's content into physical memory."
    },
    {
        "function": "allocate",
        "parameters": [
            "int"
        ],
        "comments": "Allocates a new short buffer."
    },
    {
        "function": "array",
        "parameters": [
            ""
        ],
        "comments": "Returns the short array that backs this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "arrayOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset within this buffer's backing array of the first element of the buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "asReadOnlyBuffer",
        "parameters": [
            ""
        ],
        "comments": "Creates a new, read-only short buffer that shares this buffer's content."
    },
    {
        "function": "compact",
        "parameters": [
            ""
        ],
        "comments": "Compacts this buffer\u00a0\u00a0(optional operation)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ShortBuffer"
        ],
        "comments": "Compares this buffer to another."
    },
    {
        "function": "duplicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new short buffer that shares this buffer's content."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tells whether or not this buffer is equal to another object."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Relative get method."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Absolute get method."
    },
    {
        "function": "get",
        "parameters": [
            "short[]"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "get",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk get method."
    },
    {
        "function": "hasArray",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this buffer is backed by an accessible short array."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the current hash code of this buffer."
    },
    {
        "function": "isDirect",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this short buffer is direct."
    },
    {
        "function": "mismatch",
        "parameters": [
            "ShortBuffer"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer."
    },
    {
        "function": "order",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this buffer's byte order."
    },
    {
        "function": "put",
        "parameters": [
            "int",
            "short"
        ],
        "comments": "Absolute put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "short"
        ],
        "comments": "Relative put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "short[]"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "put",
        "parameters": [
            "ShortBuffer"
        ],
        "comments": "Relative bulk put method\u00a0\u00a0(optional operation)."
    },
    {
        "function": "slice",
        "parameters": [
            ""
        ],
        "comments": "Creates a new short buffer whose content is a shared subsequence of this buffer's content."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string summarizing the state of this buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "short[]"
        ],
        "comments": "Wraps a short array into a buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Wraps a short array into a buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "isOpen",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this channel is open."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffers."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Writes a sequence of bytes to this channel from a subsequence of the given buffers."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "join",
        "parameters": [
            "InetAddress",
            "NetworkInterface"
        ],
        "comments": "Joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key."
    },
    {
        "function": "join",
        "parameters": [
            "InetAddress",
            "NetworkInterface",
            "InetAddress"
        ],
        "comments": "Joins a multicast group to begin receiving datagrams sent to the group from a given source address."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Binds the channel's socket to a local address."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "getOption",
        "parameters": [
            "SocketOption<T>"
        ],
        "comments": "Returns the value of a socket option."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "supportedOptions",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of the socket options supported by this channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffers."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Reads a sequence of bytes from this channel into a subsequence of the given buffers."
    },
    {
        "function": "position",
        "parameters": [
            ""
        ],
        "comments": "Returns this channel's position."
    },
    {
        "function": "position",
        "parameters": [
            "long"
        ],
        "comments": "Sets this channel's position."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Returns the current size of entity to which this channel is connected."
    },
    {
        "function": "truncate",
        "parameters": [
            "long"
        ],
        "comments": "Truncates the entity, to which this channel is connected, to the given size."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "awaitTermination",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Initialize a new instance of this class."
    },
    {
        "function": "isShutdown",
        "parameters": [
            ""
        ],
        "comments": "Awaits termination of the group."
    },
    {
        "function": "isTerminated",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this asynchronous channel group is shutdown."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this group has terminated."
    },
    {
        "function": "shutdown",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider that created this channel group."
    },
    {
        "function": "shutdownNow",
        "parameters": [
            ""
        ],
        "comments": "Initiates an orderly shutdown of the group."
    },
    {
        "function": "withCachedThreadPool",
        "parameters": [
            "ExecutorService",
            "int"
        ],
        "comments": "Shuts down the group and closes all open channels in the group."
    },
    {
        "function": "withFixedThreadPool",
        "parameters": [
            "int",
            "ThreadFactory"
        ],
        "comments": "Creates an asynchronous channel group with a given thread pool that creates new threads as needed."
    },
    {
        "function": "withThreadPool",
        "parameters": [
            "ExecutorService"
        ],
        "comments": "Creates an asynchronous channel group with a fixed thread pool."
    },
    {
        "function": "force",
        "parameters": [
            "boolean"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Forces any updates to this channel's file to be written to the storage device that contains it."
    },
    {
        "function": "lock",
        "parameters": [
            "long",
            "long",
            "boolean"
        ],
        "comments": "Acquires an exclusive lock on this channel's file."
    },
    {
        "function": "lock",
        "parameters": [
            "long",
            "long",
            "boolean",
            "A",
            "CompletionHandler<FileLock",
            "?"
        ],
        "comments": "Acquires a lock on the given region of this channel's file."
    },
    {
        "function": "lock",
        "parameters": [
            "A",
            "CompletionHandler<FileLock",
            "?"
        ],
        "comments": "Acquires a lock on the given region of this channel's file."
    },
    {
        "function": "open",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Acquires an exclusive lock on this channel's file."
    },
    {
        "function": "open",
        "parameters": [
            "Path",
            "Set<?",
            "ExecutorService",
            "FileAttribute<?>..."
        ],
        "comments": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "long"
        ],
        "comments": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "long",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
    },
    {
        "function": "truncate",
        "parameters": [
            "long"
        ],
        "comments": "Returns the current size of this channel's file."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Truncates this channel's file to the given size."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "long",
            "boolean"
        ],
        "comments": "Attempts to acquire an exclusive lock on this channel's file."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "long"
        ],
        "comments": "Attempts to acquire a lock on the given region of this channel's file."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "long",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position."
    },
    {
        "function": "accept",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "accept",
        "parameters": [
            "A",
            "CompletionHandler<AsynchronousSocketChannel",
            "?"
        ],
        "comments": "Accepts a connection."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Accepts a connection."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress",
            "int"
        ],
        "comments": "Binds the channel's socket to a local address and configures the socket to listen for connections."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Binds the channel's socket to a local address and configures the socket to listen for connections."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "open",
        "parameters": [
            "AsynchronousChannelGroup"
        ],
        "comments": "Opens an asynchronous server-socket channel."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Opens an asynchronous server-socket channel."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Binds the channel's socket to a local address."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress",
            "A",
            "CompletionHandler<Void",
            "?"
        ],
        "comments": "Connects this channel."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Connects this channel."
    },
    {
        "function": "getRemoteAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Returns the remote address to which this channel's socket is connected."
    },
    {
        "function": "open",
        "parameters": [
            "AsynchronousChannelGroup"
        ],
        "comments": "Opens an asynchronous socket channel."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Opens an asynchronous socket channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int",
            "long",
            "TimeUnit",
            "A",
            "CompletionHandler<Long",
            "?"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "long",
            "TimeUnit",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Reads a sequence of bytes from this channel into a subsequence of the given buffers."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "shutdownInput",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "shutdownOutput",
        "parameters": [
            ""
        ],
        "comments": "Shutdown the connection for reading without closing the channel."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Shutdown the connection for writing without closing the channel."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int",
            "long",
            "TimeUnit",
            "A",
            "CompletionHandler<Long",
            "?"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "long",
            "TimeUnit",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Writes a sequence of bytes to this channel from a subsequence of the given buffers."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "A",
            "CompletionHandler<Integer",
            "?"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "newChannel",
        "parameters": [
            "InputStream"
        ],
        "comments": "Constructs a channel that reads bytes from the given stream."
    },
    {
        "function": "newChannel",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Constructs a channel that writes bytes to the given stream."
    },
    {
        "function": "newInputStream",
        "parameters": [
            "AsynchronousByteChannel"
        ],
        "comments": "Constructs a stream that reads bytes from the given channel."
    },
    {
        "function": "newInputStream",
        "parameters": [
            "ReadableByteChannel"
        ],
        "comments": "Constructs a stream that reads bytes from the given channel."
    },
    {
        "function": "newOutputStream",
        "parameters": [
            "AsynchronousByteChannel"
        ],
        "comments": "Constructs a stream that writes bytes to the given channel."
    },
    {
        "function": "newOutputStream",
        "parameters": [
            "WritableByteChannel"
        ],
        "comments": "Constructs a stream that writes bytes to the given channel."
    },
    {
        "function": "newReader",
        "parameters": [
            "ReadableByteChannel",
            "String"
        ],
        "comments": "Constructs a reader that decodes bytes from the given channel according to the named charset."
    },
    {
        "function": "newReader",
        "parameters": [
            "ReadableByteChannel",
            "Charset"
        ],
        "comments": "Constructs a reader that decodes bytes from the given channel according to the given charset."
    },
    {
        "function": "newReader",
        "parameters": [
            "ReadableByteChannel",
            "CharsetDecoder",
            "int"
        ],
        "comments": "Constructs a reader that decodes bytes from the given channel using the given decoder."
    },
    {
        "function": "newWriter",
        "parameters": [
            "WritableByteChannel",
            "String"
        ],
        "comments": "Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel."
    },
    {
        "function": "newWriter",
        "parameters": [
            "WritableByteChannel",
            "Charset"
        ],
        "comments": "Constructs a writer that encodes characters according to the given charset and writes the resulting bytes to the given channel."
    },
    {
        "function": "newWriter",
        "parameters": [
            "WritableByteChannel",
            "CharsetEncoder",
            "int"
        ],
        "comments": "Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Binds the channel's socket to a local address."
    },
    {
        "function": "disconnect",
        "parameters": [
            ""
        ],
        "comments": "Connects this channel's socket."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Disconnects this channel's socket."
    },
    {
        "function": "getRemoteAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "isConnected",
        "parameters": [
            ""
        ],
        "comments": "Returns the remote address to which this channel's socket is connected."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this channel's socket is connected."
    },
    {
        "function": "open",
        "parameters": [
            "ProtocolFamily"
        ],
        "comments": "Opens a datagram channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Opens a datagram channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Reads a datagram from this channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Reads a datagram from this channel."
    },
    {
        "function": "receive",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Reads a datagram from this channel."
    },
    {
        "function": "send",
        "parameters": [
            "ByteBuffer",
            "SocketAddress"
        ],
        "comments": "Receives a datagram via this channel."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Sends a datagram via this channel."
    },
    {
        "function": "socket",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Retrieves a datagram socket associated with this channel."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Returns an operation set identifying this channel's supported operations."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Writes a datagram to this channel."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Writes a datagram to this channel."
    },
    {
        "function": "force",
        "parameters": [
            "boolean"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Forces any updates to this channel's file to be written to the storage device that contains it."
    },
    {
        "function": "lock",
        "parameters": [
            "long",
            "long",
            "boolean"
        ],
        "comments": "Acquires an exclusive lock on this channel's file."
    },
    {
        "function": "map",
        "parameters": [
            "FileChannel.MapMode",
            "long",
            "long"
        ],
        "comments": "Acquires a lock on the given region of this channel's file."
    },
    {
        "function": "open",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Maps a region of this channel's file directly into memory."
    },
    {
        "function": "open",
        "parameters": [
            "Path",
            "Set<?",
            "FileAttribute<?>..."
        ],
        "comments": "Opens or creates a file, returning a file channel to access the file."
    },
    {
        "function": "position",
        "parameters": [
            ""
        ],
        "comments": "Opens or creates a file, returning a file channel to access the file."
    },
    {
        "function": "position",
        "parameters": [
            "long"
        ],
        "comments": "Returns this channel's file position."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Sets this channel's file position."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffers."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer",
            "long"
        ],
        "comments": "Reads a sequence of bytes from this channel into a subsequence of the given buffers."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position."
    },
    {
        "function": "transferFrom",
        "parameters": [
            "ReadableByteChannel",
            "long",
            "long"
        ],
        "comments": "Returns the current size of this channel's file."
    },
    {
        "function": "transferTo",
        "parameters": [
            "long",
            "long",
            "WritableByteChannel"
        ],
        "comments": "Transfers bytes into this channel's file from the given readable byte channel."
    },
    {
        "function": "truncate",
        "parameters": [
            "long"
        ],
        "comments": "Transfers bytes from this channel's file to the given writable byte channel."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Truncates this channel's file to the given size."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "long",
            "boolean"
        ],
        "comments": "Attempts to acquire an exclusive lock on this channel's file."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Attempts to acquire a lock on the given region of this channel's file."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffers."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer",
            "long"
        ],
        "comments": "Writes a sequence of bytes to this channel from a subsequence of the given buffers."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this file-mapping mode."
    },
    {
        "function": "acquiredBy",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "channel",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Returns the channel upon whose file this lock was acquired."
    },
    {
        "function": "isShared",
        "parameters": [
            ""
        ],
        "comments": "Returns the file channel upon whose file this lock was acquired."
    },
    {
        "function": "isValid",
        "parameters": [
            ""
        ],
        "comments": "This method invokes the release() method."
    },
    {
        "function": "overlaps",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Tells whether this lock is shared."
    },
    {
        "function": "position",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this lock is valid."
    },
    {
        "function": "release",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this lock overlaps the given lock range."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Returns the position within the file of the first byte of the locked region."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Releases this lock."
    },
    {
        "function": "block",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "channel",
        "parameters": [
            ""
        ],
        "comments": "Block multicast datagrams from the given source address."
    },
    {
        "function": "drop",
        "parameters": [
            ""
        ],
        "comments": "Returns the channel for which this membership key was created."
    },
    {
        "function": "group",
        "parameters": [
            ""
        ],
        "comments": "Drop membership."
    },
    {
        "function": "isValid",
        "parameters": [
            ""
        ],
        "comments": "Returns the multicast group for which this membership key was created."
    },
    {
        "function": "networkInterface",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this membership is valid."
    },
    {
        "function": "sourceAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the network interface for which this membership key was created."
    },
    {
        "function": "unblock",
        "parameters": [
            "InetAddress"
        ],
        "comments": "Returns the source address if this membership key is source-specific, or null if this membership is not source-specific."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "sink",
        "parameters": [
            ""
        ],
        "comments": "Opens a pipe."
    },
    {
        "function": "source",
        "parameters": [
            ""
        ],
        "comments": "Returns this pipe's sink channel."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new instance of this class."
    },
    {
        "function": "blockingLock",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "configureBlocking",
        "parameters": [
            "boolean"
        ],
        "comments": "Retrieves the object upon which the configureBlocking and register methods synchronize."
    },
    {
        "function": "isBlocking",
        "parameters": [
            ""
        ],
        "comments": "Adjusts this channel's blocking mode."
    },
    {
        "function": "isRegistered",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not every I/O operation on this channel will block until it completes."
    },
    {
        "function": "keyFor",
        "parameters": [
            "Selector"
        ],
        "comments": "Tells whether or not this channel is currently registered with any selectors."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the key representing the channel's registration with the given selector."
    },
    {
        "function": "register",
        "parameters": [
            "Selector",
            "int"
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "register",
        "parameters": [
            "Selector",
            "int",
            "Object"
        ],
        "comments": "Registers this channel with the given selector, returning a selection key."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Registers this channel with the given selector, returning a selection key."
    },
    {
        "function": "attach",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs an instance of this class."
    },
    {
        "function": "attachment",
        "parameters": [
            ""
        ],
        "comments": "Attaches the given object to this key."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the current attachment."
    },
    {
        "function": "channel",
        "parameters": [
            ""
        ],
        "comments": "Requests that the registration of this key's channel with its selector be cancelled."
    },
    {
        "function": "interestOps",
        "parameters": [
            ""
        ],
        "comments": "Returns the channel for which this key was created."
    },
    {
        "function": "interestOps",
        "parameters": [
            "int"
        ],
        "comments": "Retrieves this key's interest set."
    },
    {
        "function": "interestOpsAnd",
        "parameters": [
            "int"
        ],
        "comments": "Sets this key's interest set to the given value."
    },
    {
        "function": "interestOpsOr",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets this key's interest set to the bitwise intersection (\"and\") of the existing interest set and the given value."
    },
    {
        "function": "isAcceptable",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets this key's interest set to the bitwise union (\"or\") of the existing interest set and the given value."
    },
    {
        "function": "isConnectable",
        "parameters": [
            ""
        ],
        "comments": "Tests whether this key's channel is ready to accept a new socket connection."
    },
    {
        "function": "isReadable",
        "parameters": [
            ""
        ],
        "comments": "Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation."
    },
    {
        "function": "isValid",
        "parameters": [
            ""
        ],
        "comments": "Tests whether this key's channel is ready for reading."
    },
    {
        "function": "isWritable",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this key is valid."
    },
    {
        "function": "readyOps",
        "parameters": [
            ""
        ],
        "comments": "Tests whether this key's channel is ready for writing."
    },
    {
        "function": "selector",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this key's ready-operation set."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "isOpen",
        "parameters": [
            ""
        ],
        "comments": "Closes this selector."
    },
    {
        "function": "keys",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this selector is open."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Returns this selector's key set."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Opens a selector."
    },
    {
        "function": "select",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "select",
        "parameters": [
            "long"
        ],
        "comments": "Selects a set of keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "select",
        "parameters": [
            "Consumer<SelectionKey>"
        ],
        "comments": "Selects a set of keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "select",
        "parameters": [
            "Consumer<SelectionKey>",
            "long"
        ],
        "comments": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "selectedKeys",
        "parameters": [
            ""
        ],
        "comments": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "selectNow",
        "parameters": [
            ""
        ],
        "comments": "Returns this selector's selected-key set."
    },
    {
        "function": "selectNow",
        "parameters": [
            "Consumer<SelectionKey>"
        ],
        "comments": "Selects a set of keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "wakeup",
        "parameters": [
            ""
        ],
        "comments": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations."
    },
    {
        "function": "accept",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Accepts a connection made to this channel's socket."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress",
            "int"
        ],
        "comments": "Binds the channel's socket to a local address and configures the socket to listen for connections."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Binds the channel's socket to a local address and configures the socket to listen for connections."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Opens a server-socket channel."
    },
    {
        "function": "socket",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Retrieves a server socket associated with this channel."
    },
    {
        "function": "bind",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "connect",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Binds the channel's socket to a local address."
    },
    {
        "function": "finishConnect",
        "parameters": [
            ""
        ],
        "comments": "Connects this channel's socket."
    },
    {
        "function": "getLocalAddress",
        "parameters": [
            ""
        ],
        "comments": "Finishes the process of connecting a socket channel."
    },
    {
        "function": "getRemoteAddress",
        "parameters": [
            ""
        ],
        "comments": "Returns the socket address that this channel's socket is bound to."
    },
    {
        "function": "isConnected",
        "parameters": [
            ""
        ],
        "comments": "Returns the remote address to which this channel's socket is connected."
    },
    {
        "function": "isConnectionPending",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this channel's network socket is connected."
    },
    {
        "function": "open",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not a connection operation is in progress on this channel."
    },
    {
        "function": "open",
        "parameters": [
            "SocketAddress"
        ],
        "comments": "Opens a socket channel."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Opens a socket channel and connects it to a remote address."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffer."
    },
    {
        "function": "read",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Reads a sequence of bytes from this channel into the given buffers."
    },
    {
        "function": "setOption",
        "parameters": [
            "SocketOption<T>",
            "T"
        ],
        "comments": "Reads a sequence of bytes from this channel into a subsequence of the given buffers."
    },
    {
        "function": "shutdownInput",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of a socket option."
    },
    {
        "function": "shutdownOutput",
        "parameters": [
            ""
        ],
        "comments": "Shutdown the connection for reading without closing the channel."
    },
    {
        "function": "socket",
        "parameters": [
            ""
        ],
        "comments": "Shutdown the connection for writing without closing the channel."
    },
    {
        "function": "validOps",
        "parameters": [
            ""
        ],
        "comments": "Retrieves a socket associated with this channel."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Returns an operation set identifying this channel's supported operations."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffer."
    },
    {
        "function": "write",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Writes a sequence of bytes to this channel from the given buffers."
    },
    {
        "function": "begin",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Marks the beginning of an I/O operation that might block indefinitely."
    },
    {
        "function": "end",
        "parameters": [
            "boolean"
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "implCloseChannel",
        "parameters": [
            ""
        ],
        "comments": "Marks the end of an I/O operation that might block indefinitely."
    },
    {
        "function": "configureBlocking",
        "parameters": [
            "boolean"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "implCloseChannel",
        "parameters": [
            ""
        ],
        "comments": "Adjusts this channel's blocking mode."
    },
    {
        "function": "implCloseSelectableChannel",
        "parameters": [
            ""
        ],
        "comments": "Closes this channel."
    },
    {
        "function": "implConfigureBlocking",
        "parameters": [
            "boolean"
        ],
        "comments": "Closes this selectable channel."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Adjusts this channel's blocking mode."
    },
    {
        "function": "register",
        "parameters": [
            "Selector",
            "int",
            "Object"
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "begin",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "cancelledKeys",
        "parameters": [
            ""
        ],
        "comments": "Marks the beginning of an I/O operation that might block indefinitely."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Retrieves this selector's cancelled-key set."
    },
    {
        "function": "deregister",
        "parameters": [
            "AbstractSelectionKey"
        ],
        "comments": "Closes this selector."
    },
    {
        "function": "end",
        "parameters": [
            ""
        ],
        "comments": "Removes the given key from its channel's key set."
    },
    {
        "function": "implCloseSelector",
        "parameters": [
            ""
        ],
        "comments": "Marks the end of an I/O operation that might block indefinitely."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Closes this selector."
    },
    {
        "function": "register",
        "parameters": [
            "AbstractSelectableChannel",
            "int",
            "Object"
        ],
        "comments": "Returns the provider that created this channel."
    },
    {
        "function": "openAsynchronousChannelGroup",
        "parameters": [
            "int",
            "ThreadFactory"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "openAsynchronousChannelGroup",
        "parameters": [
            "ExecutorService",
            "int"
        ],
        "comments": "Constructs a new asynchronous channel group with a fixed thread pool."
    },
    {
        "function": "openAsynchronousServerSocketChannel",
        "parameters": [
            "AsynchronousChannelGroup"
        ],
        "comments": "Constructs a new asynchronous channel group with the given thread pool."
    },
    {
        "function": "openAsynchronousSocketChannel",
        "parameters": [
            "AsynchronousChannelGroup"
        ],
        "comments": "Opens an asynchronous server-socket channel."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Opens an asynchronous socket channel."
    },
    {
        "function": "inheritedChannel",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "openDatagramChannel",
        "parameters": [
            ""
        ],
        "comments": "Returns the channel inherited from the entity that created this Java virtual machine."
    },
    {
        "function": "openDatagramChannel",
        "parameters": [
            "ProtocolFamily"
        ],
        "comments": "Opens a datagram channel."
    },
    {
        "function": "openPipe",
        "parameters": [
            ""
        ],
        "comments": "Opens a datagram channel."
    },
    {
        "function": "openSelector",
        "parameters": [
            ""
        ],
        "comments": "Opens a pipe."
    },
    {
        "function": "openServerSocketChannel",
        "parameters": [
            ""
        ],
        "comments": "Opens a selector."
    },
    {
        "function": "openSocketChannel",
        "parameters": [
            ""
        ],
        "comments": "Opens a server-socket channel."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Opens a socket channel."
    },
    {
        "function": "aliases",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new charset with the given canonical name and alias set."
    },
    {
        "function": "availableCharsets",
        "parameters": [
            ""
        ],
        "comments": "Returns a set containing this charset's aliases."
    },
    {
        "function": "canEncode",
        "parameters": [
            ""
        ],
        "comments": "Constructs a sorted map from canonical charset names to charset objects."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Charset"
        ],
        "comments": "Tells whether or not this charset supports encoding."
    },
    {
        "function": "contains",
        "parameters": [
            "Charset"
        ],
        "comments": "Compares this charset to another."
    },
    {
        "function": "decode",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Tells whether or not this charset contains the given charset."
    },
    {
        "function": "defaultCharset",
        "parameters": [
            ""
        ],
        "comments": "Convenience method that decodes bytes in this charset into Unicode characters."
    },
    {
        "function": "displayName",
        "parameters": [
            ""
        ],
        "comments": "Returns the default charset of this Java virtual machine."
    },
    {
        "function": "displayName",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns this charset's human-readable name for the default locale."
    },
    {
        "function": "encode",
        "parameters": [
            "String"
        ],
        "comments": "Returns this charset's human-readable name for the given locale."
    },
    {
        "function": "encode",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Convenience method that encodes a string into bytes in this charset."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Convenience method that encodes Unicode characters into bytes in this charset."
    },
    {
        "function": "forName",
        "parameters": [
            "String"
        ],
        "comments": "Tells whether or not this object is equal to another."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a charset object for the named charset."
    },
    {
        "function": "isRegistered",
        "parameters": [
            ""
        ],
        "comments": "Computes a hashcode for this charset."
    },
    {
        "function": "isSupported",
        "parameters": [
            "String"
        ],
        "comments": "Tells whether or not this charset is registered in the IANA Charset Registry."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Tells whether the named charset is supported."
    },
    {
        "function": "newDecoder",
        "parameters": [
            ""
        ],
        "comments": "Returns this charset's canonical name."
    },
    {
        "function": "newEncoder",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new decoder for this charset."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new encoder for this charset."
    },
    {
        "function": "averageCharsPerByte",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new decoder."
    },
    {
        "function": "charset",
        "parameters": [
            ""
        ],
        "comments": "Returns the average number of characters that will be produced for each byte of input."
    },
    {
        "function": "decode",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Returns the charset that created this decoder."
    },
    {
        "function": "decode",
        "parameters": [
            "ByteBuffer",
            "CharBuffer",
            "boolean"
        ],
        "comments": "Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer."
    },
    {
        "function": "decodeLoop",
        "parameters": [
            "ByteBuffer",
            "CharBuffer"
        ],
        "comments": "Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer."
    },
    {
        "function": "detectedCharset",
        "parameters": [
            ""
        ],
        "comments": "Decodes one or more bytes into one or more characters."
    },
    {
        "function": "flush",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Retrieves the charset that was detected by this decoder\u00a0\u00a0(optional operation)."
    },
    {
        "function": "implFlush",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Flushes this decoder."
    },
    {
        "function": "implOnMalformedInput",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Flushes this decoder."
    },
    {
        "function": "implOnUnmappableCharacter",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Reports a change to this decoder's malformed-input action."
    },
    {
        "function": "implReplaceWith",
        "parameters": [
            "String"
        ],
        "comments": "Reports a change to this decoder's unmappable-character action."
    },
    {
        "function": "implReset",
        "parameters": [
            ""
        ],
        "comments": "Reports a change to this decoder's replacement value."
    },
    {
        "function": "isAutoDetecting",
        "parameters": [
            ""
        ],
        "comments": "Resets this decoder, clearing any charset-specific internal state."
    },
    {
        "function": "isCharsetDetected",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this decoder implements an auto-detecting charset."
    },
    {
        "function": "malformedInputAction",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this decoder has yet detected a charset\u00a0\u00a0(optional operation)."
    },
    {
        "function": "maxCharsPerByte",
        "parameters": [
            ""
        ],
        "comments": "Returns this decoder's current action for malformed-input errors."
    },
    {
        "function": "onMalformedInput",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Returns the maximum number of characters that will be produced for each byte of input."
    },
    {
        "function": "onUnmappableCharacter",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Changes this decoder's action for malformed-input errors."
    },
    {
        "function": "replacement",
        "parameters": [
            ""
        ],
        "comments": "Changes this decoder's action for unmappable-character errors."
    },
    {
        "function": "replaceWith",
        "parameters": [
            "String"
        ],
        "comments": "Returns this decoder's replacement value."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Changes this decoder's replacement value."
    },
    {
        "function": "unmappableCharacterAction",
        "parameters": [
            ""
        ],
        "comments": "Resets this decoder, clearing any internal state."
    },
    {
        "function": "averageBytesPerChar",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new encoder."
    },
    {
        "function": "canEncode",
        "parameters": [
            "char"
        ],
        "comments": "Initializes a new encoder."
    },
    {
        "function": "canEncode",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Returns the average number of bytes that will be produced for each character of input."
    },
    {
        "function": "charset",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this encoder can encode the given character."
    },
    {
        "function": "encode",
        "parameters": [
            "CharBuffer"
        ],
        "comments": "Tells whether or not this encoder can encode the given character sequence."
    },
    {
        "function": "encode",
        "parameters": [
            "CharBuffer",
            "ByteBuffer",
            "boolean"
        ],
        "comments": "Returns the charset that created this encoder."
    },
    {
        "function": "encodeLoop",
        "parameters": [
            "CharBuffer",
            "ByteBuffer"
        ],
        "comments": "Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer."
    },
    {
        "function": "flush",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer."
    },
    {
        "function": "implFlush",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Encodes one or more characters into one or more bytes."
    },
    {
        "function": "implOnMalformedInput",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Flushes this encoder."
    },
    {
        "function": "implOnUnmappableCharacter",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Flushes this encoder."
    },
    {
        "function": "implReplaceWith",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reports a change to this encoder's malformed-input action."
    },
    {
        "function": "implReset",
        "parameters": [
            ""
        ],
        "comments": "Reports a change to this encoder's unmappable-character action."
    },
    {
        "function": "isLegalReplacement",
        "parameters": [
            "byte[]"
        ],
        "comments": "Reports a change to this encoder's replacement value."
    },
    {
        "function": "malformedInputAction",
        "parameters": [
            ""
        ],
        "comments": "Resets this encoder, clearing any charset-specific internal state."
    },
    {
        "function": "maxBytesPerChar",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not the given byte array is a legal replacement value for this encoder."
    },
    {
        "function": "onMalformedInput",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Returns this encoder's current action for malformed-input errors."
    },
    {
        "function": "onUnmappableCharacter",
        "parameters": [
            "CodingErrorAction"
        ],
        "comments": "Returns the maximum number of bytes that will be produced for each character of input."
    },
    {
        "function": "replacement",
        "parameters": [
            ""
        ],
        "comments": "Changes this encoder's action for malformed-input errors."
    },
    {
        "function": "replaceWith",
        "parameters": [
            "byte[]"
        ],
        "comments": "Changes this encoder's action for unmappable-character errors."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns this encoder's replacement value."
    },
    {
        "function": "unmappableCharacterAction",
        "parameters": [
            ""
        ],
        "comments": "Changes this encoder's replacement value."
    },
    {
        "function": "isError",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this object describes an error condition."
    },
    {
        "function": "isMalformed",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this object describes a malformed-input error."
    },
    {
        "function": "isOverflow",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this object describes an overflow condition."
    },
    {
        "function": "isUnderflow",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this object describes an underflow condition."
    },
    {
        "function": "isUnmappable",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this object describes an unmappable-character error."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the erroneous input described by this object\u00a0\u00a0(optional operation)."
    },
    {
        "function": "malformedForLength",
        "parameters": [
            "int"
        ],
        "comments": "Static factory method that returns the unique object describing a malformed-input error of the given length."
    },
    {
        "function": "throwException",
        "parameters": [
            ""
        ],
        "comments": "Throws an exception appropriate to the result described by this object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this coder result."
    },
    {
        "function": "unmappableForLength",
        "parameters": [
            "int"
        ],
        "comments": "Static factory method that returns the unique result object describing an unmappable-character error of the given length."
    },
    {
        "function": "charsetForName",
        "parameters": [
            "String"
        ],
        "comments": "Initializes a new charset provider."
    },
    {
        "function": "charsets",
        "parameters": [
            ""
        ],
        "comments": "Retrieves a charset for the given charset name."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Path"
        ],
        "comments": "Compares two abstract paths lexicographically."
    },
    {
        "function": "endsWith",
        "parameters": [
            "String"
        ],
        "comments": "Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method."
    },
    {
        "function": "endsWith",
        "parameters": [
            "Path"
        ],
        "comments": "Tests if this path ends with the given path."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this path for equality with the given object."
    },
    {
        "function": "getFileName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the file or directory denoted by this path as a Path object."
    },
    {
        "function": "getFileSystem",
        "parameters": [
            ""
        ],
        "comments": "Returns the file system that created this object."
    },
    {
        "function": "getName",
        "parameters": [
            "int"
        ],
        "comments": "Returns a name element of this path as a Path object."
    },
    {
        "function": "getNameCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of name elements in the path."
    },
    {
        "function": "getParent",
        "parameters": [
            ""
        ],
        "comments": "Returns the parent path, or null if this path does not have a parent."
    },
    {
        "function": "getRoot",
        "parameters": [
            ""
        ],
        "comments": "Returns the root component of this path as a Path object, or null if this path does not have a root component."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this path."
    },
    {
        "function": "isAbsolute",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this path is absolute."
    },
    {
        "function": "iterator",
        "parameters": [
            ""
        ],
        "comments": "Returns an iterator over the name elements of this path."
    },
    {
        "function": "normalize",
        "parameters": [
            ""
        ],
        "comments": "Returns a path that is this path with redundant name elements eliminated."
    },
    {
        "function": "of",
        "parameters": [
            "String",
            "String..."
        ],
        "comments": "Returns a Path by converting a path string, or a sequence of strings that when joined form a path string."
    },
    {
        "function": "of",
        "parameters": [
            "URI"
        ],
        "comments": "Returns a Path by converting a URI."
    },
    {
        "function": "register",
        "parameters": [
            "WatchService",
            "WatchEvent.Kind<?>..."
        ],
        "comments": "Registers the file located by this path with a watch service."
    },
    {
        "function": "register",
        "parameters": [
            "WatchService",
            "WatchEvent.Kind<?>[]",
            "WatchEvent.Modifier..."
        ],
        "comments": "Registers the file located by this path with a watch service."
    },
    {
        "function": "relativize",
        "parameters": [
            "Path"
        ],
        "comments": "Constructs a relative path between this path and a given path."
    },
    {
        "function": "resolve",
        "parameters": [
            "String"
        ],
        "comments": "Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the resolve method."
    },
    {
        "function": "resolve",
        "parameters": [
            "Path"
        ],
        "comments": "Resolve the given path against this path."
    },
    {
        "function": "resolveSibling",
        "parameters": [
            "String"
        ],
        "comments": "Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolveSibling method."
    },
    {
        "function": "resolveSibling",
        "parameters": [
            "Path"
        ],
        "comments": "Resolves the given path against this path's parent path."
    },
    {
        "function": "startsWith",
        "parameters": [
            "String"
        ],
        "comments": "Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method."
    },
    {
        "function": "startsWith",
        "parameters": [
            "Path"
        ],
        "comments": "Tests if this path starts with the given path."
    },
    {
        "function": "subpath",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a relative Path that is a subsequence of the name elements of this path."
    },
    {
        "function": "toAbsolutePath",
        "parameters": [
            ""
        ],
        "comments": "Returns a Path object representing the absolute path of this path."
    },
    {
        "function": "toFile",
        "parameters": [
            ""
        ],
        "comments": "Returns a File object representing this path."
    },
    {
        "function": "toRealPath",
        "parameters": [
            "LinkOption..."
        ],
        "comments": "Returns the real path of an existing file."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this path."
    },
    {
        "function": "toUri",
        "parameters": [
            ""
        ],
        "comments": "Returns a URI to represent this path."
    },
    {
        "function": "matches",
        "parameters": [
            "Path"
        ],
        "comments": "Tells if given path matches this matcher's pattern."
    },
    {
        "function": "register",
        "parameters": [
            "WatchService",
            "WatchEvent.Kind<?>..."
        ],
        "comments": "Registers an object with a watch service."
    },
    {
        "function": "register",
        "parameters": [
            "WatchService",
            "WatchEvent.Kind<?>[]",
            "WatchEvent.Modifier..."
        ],
        "comments": "Registers an object with a watch service."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the modifier."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Cancels the registration with the watch service."
    },
    {
        "function": "isValid",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this watch key is valid."
    },
    {
        "function": "pollEvents",
        "parameters": [
            ""
        ],
        "comments": "Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Resets this watch key."
    },
    {
        "function": "watchable",
        "parameters": [
            ""
        ],
        "comments": "Returns the object for which this watch key was created."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Closes this watch service."
    },
    {
        "function": "poll",
        "parameters": [
            ""
        ],
        "comments": "Retrieves and removes the next watch key, or null if none are present."
    },
    {
        "function": "poll",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present."
    },
    {
        "function": "take",
        "parameters": [
            ""
        ],
        "comments": "Retrieves and removes next watch key, waiting if none are yet present."
    },
    {
        "function": "copy",
        "parameters": [
            "InputStream",
            "Path",
            "CopyOption..."
        ],
        "comments": "Copies all bytes from an input stream to a file."
    },
    {
        "function": "copy",
        "parameters": [
            "Path",
            "OutputStream"
        ],
        "comments": "Copies all bytes from a file to an output stream."
    },
    {
        "function": "copy",
        "parameters": [
            "Path",
            "Path",
            "CopyOption..."
        ],
        "comments": "Copy a file to a target file."
    },
    {
        "function": "createDirectories",
        "parameters": [
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a directory by creating all nonexistent parent directories first."
    },
    {
        "function": "createDirectory",
        "parameters": [
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new directory."
    },
    {
        "function": "createFile",
        "parameters": [
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new and empty file, failing if the file already exists."
    },
    {
        "function": "createLink",
        "parameters": [
            "Path",
            "Path"
        ],
        "comments": "Creates a new link (directory entry) for an existing file (optional operation)."
    },
    {
        "function": "createSymbolicLink",
        "parameters": [
            "Path",
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a symbolic link to a target (optional operation)."
    },
    {
        "function": "createTempDirectory",
        "parameters": [
            "String",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new directory in the default temporary-file directory, using the given prefix to generate its name."
    },
    {
        "function": "createTempDirectory",
        "parameters": [
            "Path",
            "String",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new directory in the specified directory, using the given prefix to generate its name."
    },
    {
        "function": "createTempFile",
        "parameters": [
            "String",
            "String",
            "FileAttribute<?>..."
        ],
        "comments": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name."
    },
    {
        "function": "createTempFile",
        "parameters": [
            "Path",
            "String",
            "String",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name."
    },
    {
        "function": "delete",
        "parameters": [
            "Path"
        ],
        "comments": "Deletes a file."
    },
    {
        "function": "deleteIfExists",
        "parameters": [
            "Path"
        ],
        "comments": "Deletes a file if it exists."
    },
    {
        "function": "exists",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Tests whether a file exists."
    },
    {
        "function": "find",
        "parameters": [
            "Path",
            "int",
            "BiPredicate<Path",
            "BasicFileAttributes>",
            "FileVisitOption..."
        ],
        "comments": "Return a Stream that is lazily populated with  Path by searching for files in a file tree rooted at a given starting file."
    },
    {
        "function": "getAttribute",
        "parameters": [
            "Path",
            "String",
            "LinkOption..."
        ],
        "comments": "Reads the value of a file attribute."
    },
    {
        "function": "getFileAttributeView",
        "parameters": [
            "Path",
            "Class<V>",
            "LinkOption..."
        ],
        "comments": "Returns a file attribute view of a given type."
    },
    {
        "function": "getFileStore",
        "parameters": [
            "Path"
        ],
        "comments": "Returns the FileStore representing the file store where a file is located."
    },
    {
        "function": "getLastModifiedTime",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Returns a file's last modified time."
    },
    {
        "function": "getOwner",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Returns the owner of a file."
    },
    {
        "function": "getPosixFilePermissions",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Returns a file's POSIX file permissions."
    },
    {
        "function": "isDirectory",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Tests whether a file is a directory."
    },
    {
        "function": "isExecutable",
        "parameters": [
            "Path"
        ],
        "comments": "Tests whether a file is executable."
    },
    {
        "function": "isHidden",
        "parameters": [
            "Path"
        ],
        "comments": "Tells whether or not a file is considered hidden."
    },
    {
        "function": "isReadable",
        "parameters": [
            "Path"
        ],
        "comments": "Tests whether a file is readable."
    },
    {
        "function": "isRegularFile",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Tests whether a file is a regular file with opaque content."
    },
    {
        "function": "isSameFile",
        "parameters": [
            "Path",
            "Path"
        ],
        "comments": "Tests if two paths locate the same file."
    },
    {
        "function": "isSymbolicLink",
        "parameters": [
            "Path"
        ],
        "comments": "Tests whether a file is a symbolic link."
    },
    {
        "function": "isWritable",
        "parameters": [
            "Path"
        ],
        "comments": "Tests whether a file is writable."
    },
    {
        "function": "lines",
        "parameters": [
            "Path"
        ],
        "comments": "Read all lines from a file as a Stream."
    },
    {
        "function": "lines",
        "parameters": [
            "Path",
            "Charset"
        ],
        "comments": "Read all lines from a file as a Stream."
    },
    {
        "function": "list",
        "parameters": [
            "Path"
        ],
        "comments": "Return a lazily populated Stream, the elements of which are the entries in the directory."
    },
    {
        "function": "move",
        "parameters": [
            "Path",
            "Path",
            "CopyOption..."
        ],
        "comments": "Move or rename a file to a target file."
    },
    {
        "function": "newBufferedReader",
        "parameters": [
            "Path"
        ],
        "comments": "Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner."
    },
    {
        "function": "newBufferedReader",
        "parameters": [
            "Path",
            "Charset"
        ],
        "comments": "Opens a file for reading, returning a BufferedReader that may be used to read text from the file in an efficient manner."
    },
    {
        "function": "newBufferedWriter",
        "parameters": [
            "Path",
            "Charset",
            "OpenOption..."
        ],
        "comments": "Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner."
    },
    {
        "function": "newBufferedWriter",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner."
    },
    {
        "function": "newByteChannel",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Opens or creates a file, returning a seekable byte channel to access the file."
    },
    {
        "function": "newByteChannel",
        "parameters": [
            "Path",
            "Set<?",
            "FileAttribute<?>..."
        ],
        "comments": "Opens or creates a file, returning a seekable byte channel to access the file."
    },
    {
        "function": "newDirectoryStream",
        "parameters": [
            "Path"
        ],
        "comments": "Opens a directory, returning a DirectoryStream to iterate over all entries in the directory."
    },
    {
        "function": "newDirectoryStream",
        "parameters": [
            "Path",
            "String"
        ],
        "comments": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory."
    },
    {
        "function": "newDirectoryStream",
        "parameters": [
            "Path",
            "DirectoryStream.Filter<?"
        ],
        "comments": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory."
    },
    {
        "function": "newInputStream",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Opens a file, returning an input stream to read from the file."
    },
    {
        "function": "newOutputStream",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Opens or creates a file, returning an output stream that may be used to write bytes to the file."
    },
    {
        "function": "notExists",
        "parameters": [
            "Path",
            "LinkOption..."
        ],
        "comments": "Tests whether the file located by this path does not exist."
    },
    {
        "function": "probeContentType",
        "parameters": [
            "Path"
        ],
        "comments": "Probes the content type of a file."
    },
    {
        "function": "readAllBytes",
        "parameters": [
            "Path"
        ],
        "comments": "Reads all the bytes from a file."
    },
    {
        "function": "readAllLines",
        "parameters": [
            "Path"
        ],
        "comments": "Read all lines from a file."
    },
    {
        "function": "readAllLines",
        "parameters": [
            "Path",
            "Charset"
        ],
        "comments": "Read all lines from a file."
    },
    {
        "function": "readAttributes",
        "parameters": [
            "Path",
            "Class<A>",
            "LinkOption..."
        ],
        "comments": "Reads a file's attributes as a bulk operation."
    },
    {
        "function": "readAttributes",
        "parameters": [
            "Path",
            "String",
            "LinkOption..."
        ],
        "comments": "Reads a set of file attributes as a bulk operation."
    },
    {
        "function": "readString",
        "parameters": [
            "Path"
        ],
        "comments": "Reads all content from a file into a string, decoding from bytes to characters using the UTF-8 charset."
    },
    {
        "function": "readString",
        "parameters": [
            "Path",
            "Charset"
        ],
        "comments": "Reads all characters from a file into a string, decoding from bytes to characters using the specified charset."
    },
    {
        "function": "readSymbolicLink",
        "parameters": [
            "Path"
        ],
        "comments": "Reads the target of a symbolic link (optional operation)."
    },
    {
        "function": "setAttribute",
        "parameters": [
            "Path",
            "String",
            "Object",
            "LinkOption..."
        ],
        "comments": "Sets the value of a file attribute."
    },
    {
        "function": "setLastModifiedTime",
        "parameters": [
            "Path",
            "FileTime"
        ],
        "comments": "Updates a file's last modified time attribute."
    },
    {
        "function": "setOwner",
        "parameters": [
            "Path",
            "UserPrincipal"
        ],
        "comments": "Updates the file owner."
    },
    {
        "function": "setPosixFilePermissions",
        "parameters": [
            "Path",
            "Set<PosixFilePermission>"
        ],
        "comments": "Sets a file's POSIX permissions."
    },
    {
        "function": "size",
        "parameters": [
            "Path"
        ],
        "comments": "Returns the size of a file (in bytes)."
    },
    {
        "function": "walk",
        "parameters": [
            "Path",
            "int",
            "FileVisitOption..."
        ],
        "comments": "Return a Stream that is lazily populated with  Path by walking the file tree rooted at a given starting file."
    },
    {
        "function": "walk",
        "parameters": [
            "Path",
            "FileVisitOption..."
        ],
        "comments": "Return a Stream that is lazily populated with  Path by walking the file tree rooted at a given starting file."
    },
    {
        "function": "walkFileTree",
        "parameters": [
            "Path",
            "FileVisitor<?"
        ],
        "comments": "Walks a file tree."
    },
    {
        "function": "walkFileTree",
        "parameters": [
            "Path",
            "Set<FileVisitOption>",
            "int",
            "FileVisitor<?"
        ],
        "comments": "Walks a file tree."
    },
    {
        "function": "write",
        "parameters": [
            "Path",
            "byte[]",
            "OpenOption..."
        ],
        "comments": "Writes bytes to a file."
    },
    {
        "function": "write",
        "parameters": [
            "Path",
            "Iterable<?",
            "Charset",
            "OpenOption..."
        ],
        "comments": "Write lines of text to a file."
    },
    {
        "function": "write",
        "parameters": [
            "Path",
            "Iterable<?",
            "OpenOption..."
        ],
        "comments": "Write lines of text to a file."
    },
    {
        "function": "writeString",
        "parameters": [
            "Path",
            "CharSequence",
            "Charset",
            "OpenOption..."
        ],
        "comments": "Write a CharSequence to a file."
    },
    {
        "function": "writeString",
        "parameters": [
            "Path",
            "CharSequence",
            "OpenOption..."
        ],
        "comments": "Write a CharSequence to a file."
    },
    {
        "function": "getAttribute",
        "parameters": [
            "String"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "getBlockSize",
        "parameters": [
            ""
        ],
        "comments": "Reads the value of a file store attribute."
    },
    {
        "function": "getFileStoreAttributeView",
        "parameters": [
            "Class<V>"
        ],
        "comments": "Returns the number of bytes per block in this file store."
    },
    {
        "function": "getTotalSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns a FileStoreAttributeView of the given type."
    },
    {
        "function": "getUnallocatedSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns the size, in bytes, of the file store."
    },
    {
        "function": "getUsableSpace",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of unallocated bytes in the file store."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes available to this Java virtual machine on the file store."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Tells whether this file store is read-only."
    },
    {
        "function": "supportsFileAttributeView",
        "parameters": [
            "Class<?"
        ],
        "comments": "Returns the name of this file store."
    },
    {
        "function": "supportsFileAttributeView",
        "parameters": [
            "String"
        ],
        "comments": "Tells whether or not this file store supports the file attributes identified by the given file attribute view."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this file store supports the file attributes identified by the given file attribute view."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "getFileStores",
        "parameters": [
            ""
        ],
        "comments": "Closes this file system."
    },
    {
        "function": "getPath",
        "parameters": [
            "String",
            "String..."
        ],
        "comments": "Returns an object to iterate over the underlying file stores."
    },
    {
        "function": "getPathMatcher",
        "parameters": [
            "String"
        ],
        "comments": "Converts a path string, or a sequence of strings that when joined form a path string, to a Path."
    },
    {
        "function": "getRootDirectories",
        "parameters": [
            ""
        ],
        "comments": "Returns a PathMatcher that performs match operations on the String representation of Path objects by interpreting a given pattern."
    },
    {
        "function": "getSeparator",
        "parameters": [
            ""
        ],
        "comments": "Returns an object to iterate over the paths of the root directories."
    },
    {
        "function": "getUserPrincipalLookupService",
        "parameters": [
            ""
        ],
        "comments": "Returns the name separator, represented as a string."
    },
    {
        "function": "isOpen",
        "parameters": [
            ""
        ],
        "comments": "Returns the UserPrincipalLookupService for this file system (optional operation)."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this file system is open."
    },
    {
        "function": "newWatchService",
        "parameters": [
            ""
        ],
        "comments": "Tells whether or not this file system allows only read-only access to its file stores."
    },
    {
        "function": "provider",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new WatchService (optional operation)."
    },
    {
        "function": "supportedFileAttributeViews",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider that created this file system."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns the default FileSystem."
    },
    {
        "function": "getFileSystem",
        "parameters": [
            "URI"
        ],
        "comments": "Returns a reference to an existing FileSystem."
    },
    {
        "function": "newFileSystem",
        "parameters": [
            "URI",
            "Map<String",
            "?>"
        ],
        "comments": "Constructs a new file system that is identified by a URI"
    },
    {
        "function": "newFileSystem",
        "parameters": [
            "URI",
            "Map<String",
            "?>",
            "ClassLoader"
        ],
        "comments": "Constructs a new file system that is identified by a URI"
    },
    {
        "function": "newFileSystem",
        "parameters": [
            "Path",
            "ClassLoader"
        ],
        "comments": "Constructs a new FileSystem to access the contents of a file as a file system."
    },
    {
        "function": "get",
        "parameters": [
            "String",
            "String..."
        ],
        "comments": "Converts a path string, or a sequence of strings that when joined form a path string, to a Path."
    },
    {
        "function": "get",
        "parameters": [
            "URI"
        ],
        "comments": "Converts the given URI to a Path object."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Test execute access."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Test read access."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Follow symbolic links."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Returns the enum constant of this type with the specified name."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Continue."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Continue without visiting the siblings of this file or directory."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Do not follow symbolic links."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Returns the enum constant of this type with the specified name."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Move the file as an atomic file system operation."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Copy attributes to the new file."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "If the file is opened for WRITE access then bytes will be written to the end of the file rather than the beginning."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Create a new file if it does not exist."
    },
    {
        "function": "getAcl",
        "parameters": [
            ""
        ],
        "comments": "Reads the access control list."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "setAcl",
        "parameters": [
            "List<AclEntry>"
        ],
        "comments": "Updates (replace) the access control list."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "creationTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the creation time."
    },
    {
        "function": "fileKey",
        "parameters": [
            ""
        ],
        "comments": "Returns an object that uniquely identifies the given file, or  null if a file key is not available."
    },
    {
        "function": "isDirectory",
        "parameters": [
            ""
        ],
        "comments": "Tells whether the file is a directory."
    },
    {
        "function": "isOther",
        "parameters": [
            ""
        ],
        "comments": "Tells whether the file is something other than a regular file, directory, or symbolic link."
    },
    {
        "function": "isRegularFile",
        "parameters": [
            ""
        ],
        "comments": "Tells whether the file is a regular file with opaque content."
    },
    {
        "function": "isSymbolicLink",
        "parameters": [
            ""
        ],
        "comments": "Tells whether the file is a symbolic link."
    },
    {
        "function": "lastAccessTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the time of last access."
    },
    {
        "function": "lastModifiedTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the time of last modification."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Returns the size of the file (in bytes)."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "readAttributes",
        "parameters": [
            ""
        ],
        "comments": "Reads the basic file attributes as a bulk operation."
    },
    {
        "function": "setTimes",
        "parameters": [
            "FileTime",
            "FileTime",
            "FileTime"
        ],
        "comments": "Updates any or all of the file's last modified time, last access time, and create time attributes."
    },
    {
        "function": "isArchive",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the archive attribute."
    },
    {
        "function": "isHidden",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the hidden attribute."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the read-only attribute."
    },
    {
        "function": "isSystem",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the system attribute."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "readAttributes",
        "parameters": [
            ""
        ],
        "comments": "Reads the basic file attributes as a bulk operation."
    },
    {
        "function": "setArchive",
        "parameters": [
            "boolean"
        ],
        "comments": "Updates the value of the archive attribute."
    },
    {
        "function": "setHidden",
        "parameters": [
            "boolean"
        ],
        "comments": "Updates the value of the hidden attribute."
    },
    {
        "function": "setReadOnly",
        "parameters": [
            "boolean"
        ],
        "comments": "Updates the value of the read-only attribute."
    },
    {
        "function": "setSystem",
        "parameters": [
            "boolean"
        ],
        "comments": "Updates the value of the system attribute."
    },
    {
        "function": "getOwner",
        "parameters": [
            ""
        ],
        "comments": "Read the file owner."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "setOwner",
        "parameters": [
            "UserPrincipal"
        ],
        "comments": "Updates the file owner."
    },
    {
        "function": "group",
        "parameters": [
            ""
        ],
        "comments": "Returns the group owner of the file."
    },
    {
        "function": "owner",
        "parameters": [
            ""
        ],
        "comments": "Returns the owner of the file."
    },
    {
        "function": "permissions",
        "parameters": [
            ""
        ],
        "comments": "Returns the permissions of the file."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute view."
    },
    {
        "function": "readAttributes",
        "parameters": [
            ""
        ],
        "comments": "Reads the basic file attributes as a bulk operation."
    },
    {
        "function": "setGroup",
        "parameters": [
            "GroupPrincipal"
        ],
        "comments": "Updates the file group-owner."
    },
    {
        "function": "setPermissions",
        "parameters": [
            "Set<PosixFilePermission>"
        ],
        "comments": "Updates the file permissions."
    },
    {
        "function": "delete",
        "parameters": [
            "String"
        ],
        "comments": "Deletes a user-defined attribute."
    },
    {
        "function": "list",
        "parameters": [
            ""
        ],
        "comments": "Returns a list containing the names of the user-defined attributes."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this attribute view."
    },
    {
        "function": "read",
        "parameters": [
            "String",
            "ByteBuffer"
        ],
        "comments": "Read the value of a user-defined attribute into a buffer."
    },
    {
        "function": "size",
        "parameters": [
            "String"
        ],
        "comments": "Returns the size of the value of a user-defined attribute."
    },
    {
        "function": "write",
        "parameters": [
            "String",
            "ByteBuffer"
        ],
        "comments": "Writes the value of a user-defined attribute from a buffer."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the specified object with this ACL entry for equality."
    },
    {
        "function": "flags",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the flags component."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash-code value for this ACL entry."
    },
    {
        "function": "newBuilder",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new builder."
    },
    {
        "function": "newBuilder",
        "parameters": [
            "AclEntry"
        ],
        "comments": "Constructs a new builder with the components of an existing ACL entry."
    },
    {
        "function": "permissions",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the permissions component."
    },
    {
        "function": "principal",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal component."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this ACL entry."
    },
    {
        "function": "type",
        "parameters": [
            ""
        ],
        "comments": "Returns the ACL entry type."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Constructs an AclEntry from the components of this builder."
    },
    {
        "function": "setFlags",
        "parameters": [
            "AclEntryFlag..."
        ],
        "comments": "Sets the flags component of this builder."
    },
    {
        "function": "setFlags",
        "parameters": [
            "Set<AclEntryFlag>"
        ],
        "comments": "Sets the flags component of this builder."
    },
    {
        "function": "setPermissions",
        "parameters": [
            "AclEntryPermission..."
        ],
        "comments": "Sets the permissions component of this builder."
    },
    {
        "function": "setPermissions",
        "parameters": [
            "Set<AclEntryPermission>"
        ],
        "comments": "Sets the permissions component of this builder."
    },
    {
        "function": "setPrincipal",
        "parameters": [
            "UserPrincipal"
        ],
        "comments": "Sets the principal component of this builder."
    },
    {
        "function": "setType",
        "parameters": [
            "AclEntryType"
        ],
        "comments": "Sets the type component of this builder."
    },
    {
        "function": "compareTo",
        "parameters": [
            "FileTime"
        ],
        "comments": "Compares the value of two FileTime objects for order."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Tests this FileTime for equality with the given object."
    },
    {
        "function": "from",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Returns a FileTime representing a value at the given unit of granularity."
    },
    {
        "function": "from",
        "parameters": [
            "Instant"
        ],
        "comments": "Returns a FileTime representing the same point of time value on the time-line as the provided Instant object."
    },
    {
        "function": "fromMillis",
        "parameters": [
            "long"
        ],
        "comments": "Returns a FileTime representing the given value in milliseconds."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Computes a hash code for this file time."
    },
    {
        "function": "to",
        "parameters": [
            "TimeUnit"
        ],
        "comments": "Returns the value at the given unit of granularity."
    },
    {
        "function": "toInstant",
        "parameters": [
            ""
        ],
        "comments": "Converts this FileTime object to an Instant."
    },
    {
        "function": "toMillis",
        "parameters": [
            ""
        ],
        "comments": "Returns the value in milliseconds."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this FileTime."
    },
    {
        "function": "asFileAttribute",
        "parameters": [
            "Set<PosixFilePermission>"
        ],
        "comments": "Creates a FileAttribute, encapsulating a copy of the given file permissions, suitable for passing to the createFile or createDirectory methods."
    },
    {
        "function": "fromString",
        "parameters": [
            "String"
        ],
        "comments": "Returns the set of permissions corresponding to a given String representation."
    },
    {
        "function": "toString",
        "parameters": [
            "Set<PosixFilePermission>"
        ],
        "comments": "Returns the String representation of a set of permissions."
    },
    {
        "function": "lookupPrincipalByGroupName",
        "parameters": [
            "String"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "lookupPrincipalByName",
        "parameters": [
            "String"
        ],
        "comments": "Lookup a group principal by group name."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Can be placed on a directory and indicates that the ACL entry should be added to each new directory created."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Can be placed on a directory and indicates that the ACL entry should be added to each new non-directory file created."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Permission to execute a file."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Permission to read the ACL attribute."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Generate an alarm, in a system dependent way, the access specified in the permissions component of the ACL entry."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Explicitly grants access to a file or directory."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Execute/search permission, group."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Read permission, group."
    },
    {
        "function": "checkAccess",
        "parameters": [
            "Path",
            "AccessMode..."
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "copy",
        "parameters": [
            "Path",
            "Path",
            "CopyOption..."
        ],
        "comments": "Checks the existence, and optionally the accessibility, of a file."
    },
    {
        "function": "createDirectory",
        "parameters": [
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Copy a file to a target file."
    },
    {
        "function": "createLink",
        "parameters": [
            "Path",
            "Path"
        ],
        "comments": "Creates a new directory."
    },
    {
        "function": "createSymbolicLink",
        "parameters": [
            "Path",
            "Path",
            "FileAttribute<?>..."
        ],
        "comments": "Creates a new link (directory entry) for an existing file."
    },
    {
        "function": "delete",
        "parameters": [
            "Path"
        ],
        "comments": "Creates a symbolic link to a target."
    },
    {
        "function": "deleteIfExists",
        "parameters": [
            "Path"
        ],
        "comments": "Deletes a file."
    },
    {
        "function": "getFileAttributeView",
        "parameters": [
            "Path",
            "Class<V>",
            "LinkOption..."
        ],
        "comments": "Deletes a file if it exists."
    },
    {
        "function": "getFileStore",
        "parameters": [
            "Path"
        ],
        "comments": "Returns a file attribute view of a given type."
    },
    {
        "function": "getFileSystem",
        "parameters": [
            "URI"
        ],
        "comments": "Returns the FileStore representing the file store where a file is located."
    },
    {
        "function": "getPath",
        "parameters": [
            "URI"
        ],
        "comments": "Returns an existing FileSystem created by this provider."
    },
    {
        "function": "getScheme",
        "parameters": [
            ""
        ],
        "comments": "Return a Path object by converting the given URI."
    },
    {
        "function": "installedProviders",
        "parameters": [
            ""
        ],
        "comments": "Returns the URI scheme that identifies this provider."
    },
    {
        "function": "isHidden",
        "parameters": [
            "Path"
        ],
        "comments": "Returns a list of the installed file system providers."
    },
    {
        "function": "isSameFile",
        "parameters": [
            "Path",
            "Path"
        ],
        "comments": "Tells whether or not a file is considered hidden."
    },
    {
        "function": "move",
        "parameters": [
            "Path",
            "Path",
            "CopyOption..."
        ],
        "comments": "Tests if two paths locate the same file."
    },
    {
        "function": "newAsynchronousFileChannel",
        "parameters": [
            "Path",
            "Set<?",
            "ExecutorService",
            "FileAttribute<?>..."
        ],
        "comments": "Move or rename a file to a target file."
    },
    {
        "function": "newByteChannel",
        "parameters": [
            "Path",
            "Set<?",
            "FileAttribute<?>..."
        ],
        "comments": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
    },
    {
        "function": "newDirectoryStream",
        "parameters": [
            "Path",
            "DirectoryStream.Filter<?"
        ],
        "comments": "Opens or creates a file, returning a seekable byte channel to access the file."
    },
    {
        "function": "newFileChannel",
        "parameters": [
            "Path",
            "Set<?",
            "FileAttribute<?>..."
        ],
        "comments": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory."
    },
    {
        "function": "newFileSystem",
        "parameters": [
            "URI",
            "Map<String",
            "?>"
        ],
        "comments": "Opens or creates a file for reading and/or writing, returning a file channel to access the file."
    },
    {
        "function": "newFileSystem",
        "parameters": [
            "Path",
            "Map<String",
            "?>"
        ],
        "comments": "Constructs a new FileSystem object identified by a URI."
    },
    {
        "function": "newInputStream",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Constructs a new FileSystem to access the contents of a file as a file system."
    },
    {
        "function": "newOutputStream",
        "parameters": [
            "Path",
            "OpenOption..."
        ],
        "comments": "Opens a file, returning an input stream to read from the file."
    },
    {
        "function": "readAttributes",
        "parameters": [
            "Path",
            "Class<A>",
            "LinkOption..."
        ],
        "comments": "Opens or creates a file, returning an output stream that may be used to write bytes to the file."
    },
    {
        "function": "readAttributes",
        "parameters": [
            "Path",
            "String",
            "LinkOption..."
        ],
        "comments": "Reads a file's attributes as a bulk operation."
    },
    {
        "function": "readSymbolicLink",
        "parameters": [
            "Path"
        ],
        "comments": "Reads a set of file attributes as a bulk operation."
    },
    {
        "function": "setAttribute",
        "parameters": [
            "Path",
            "String",
            "Object",
            "LinkOption..."
        ],
        "comments": "Reads the target of a symbolic link."
    },
    {
        "function": "probeContentType",
        "parameters": [
            "Path"
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "permits",
        "parameters": [
            "Set<CryptoPrimitive>",
            "String",
            "AlgorithmParameters"
        ],
        "comments": "Determines whether an algorithm is granted permission for the specified cryptographic primitives."
    },
    {
        "function": "permits",
        "parameters": [
            "Set<CryptoPrimitive>",
            "String",
            "Key",
            "AlgorithmParameters"
        ],
        "comments": "Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives."
    },
    {
        "function": "permits",
        "parameters": [
            "Set<CryptoPrimitive>",
            "Key"
        ],
        "comments": "Determines whether a key is granted permission for the specified cryptographic primitives."
    },
    {
        "function": "decode",
        "parameters": [
            "InputStream"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "encode",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Decodes a certificate from an input stream."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getGuarantor",
        "parameters": [
            ""
        ],
        "comments": "Encodes the certificate to an output stream in a format that can be decoded by the decode method."
    },
    {
        "function": "getPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the coding format."
    },
    {
        "function": "toString",
        "parameters": [
            "boolean"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "combine",
        "parameters": [
            "ProtectionDomain[]",
            "ProtectionDomain[]"
        ],
        "comments": "Modify or update the provided ProtectionDomains."
    },
    {
        "function": "checkGuard",
        "parameters": [
            "Object"
        ],
        "comments": "Determines whether or not to allow access to the guarded object object."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns the standard algorithm name for this key."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Returns the key in its primary encoding format, or null if this key does not support encoding."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the primary encoding format of this key, or null if this key does not support encoding."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the attributes associated with an entry."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the attribute's name."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the attribute's value."
    },
    {
        "function": "getProtectionParameter",
        "parameters": [
            ""
        ],
        "comments": "Gets the parameter used to protect keystore data."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this principal to the specified object."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this principal."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this principal."
    },
    {
        "function": "implies",
        "parameters": [
            "Subject"
        ],
        "comments": "Returns true if the specified subject is implied by this principal."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of this principal."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Create a new AccessControlContext with the given AccessControlContext and DomainCombiner."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Create an AccessControlContext with the given array of ProtectionDomains."
    },
    {
        "function": "getDomainCombiner",
        "parameters": [
            ""
        ],
        "comments": "Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Checks two AccessControlContext objects for equality."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedAction<T>"
        ],
        "comments": "Performs the specified PrivilegedAction with privileges enabled."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedAction<T>",
            "AccessControlContext"
        ],
        "comments": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedAction<T>",
            "AccessControlContext",
            "Permission..."
        ],
        "comments": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedExceptionAction<T>"
        ],
        "comments": "Performs the specified PrivilegedExceptionAction with privileges enabled."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedExceptionAction<T>",
            "AccessControlContext"
        ],
        "comments": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext."
    },
    {
        "function": "doPrivileged",
        "parameters": [
            "PrivilegedExceptionAction<T>",
            "AccessControlContext",
            "Permission..."
        ],
        "comments": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments."
    },
    {
        "function": "doPrivilegedWithCombiner",
        "parameters": [
            "PrivilegedAction<T>"
        ],
        "comments": "Performs the specified PrivilegedAction with privileges enabled."
    },
    {
        "function": "doPrivilegedWithCombiner",
        "parameters": [
            "PrivilegedAction<T>",
            "AccessControlContext",
            "Permission..."
        ],
        "comments": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments."
    },
    {
        "function": "doPrivilegedWithCombiner",
        "parameters": [
            "PrivilegedExceptionAction<T>"
        ],
        "comments": "Performs the specified PrivilegedExceptionAction with privileges enabled."
    },
    {
        "function": "doPrivilegedWithCombiner",
        "parameters": [
            "PrivilegedExceptionAction<T>",
            "AccessControlContext",
            "Permission..."
        ],
        "comments": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments."
    },
    {
        "function": "getContext",
        "parameters": [
            ""
        ],
        "comments": "This method takes a \"snapshot\" of the current calling context, which includes the current Thread's inherited AccessControlContext and any limited privilege scope, and places it in an AccessControlContext object."
    },
    {
        "function": "generateParameters",
        "parameters": [
            ""
        ],
        "comments": "Creates an AlgorithmParameterGenerator object."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Generates the parameters."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the standard name of the algorithm this parameter generator is associated with."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm."
    },
    {
        "function": "init",
        "parameters": [
            "int"
        ],
        "comments": "Returns the provider of this algorithm parameter generator object."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes this parameter generator for a certain size."
    },
    {
        "function": "init",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this parameter generator for a certain size and source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this parameter generator with a set of algorithm-specific parameter generation values."
    },
    {
        "function": "engineGenerateParameters",
        "parameters": [
            ""
        ],
        "comments": "Generates the parameters."
    },
    {
        "function": "engineInit",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes this parameter generator for a certain size and source of randomness."
    },
    {
        "function": "engineInit",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this parameter generator with a set of algorithm-specific parameter generation values."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates an AlgorithmParameters object."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the algorithm associated with this parameter object."
    },
    {
        "function": "getEncoded",
        "parameters": [
            "String"
        ],
        "comments": "Returns the parameters in their primary encoding format."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the parameters encoded in the specified scheme."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a parameter object for the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a parameter object for the specified algorithm."
    },
    {
        "function": "getParameterSpec",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns a parameter object for the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a (transparent) specification of this parameter object."
    },
    {
        "function": "init",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the provider of this parameter object."
    },
    {
        "function": "init",
        "parameters": [
            "byte[]",
            "String"
        ],
        "comments": "Imports the specified parameters and decodes them according to the primary decoding format for parameters."
    },
    {
        "function": "init",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Imports the parameters from params and decodes them according to the specified decoding scheme."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Initializes this parameter object using the parameters specified in paramSpec."
    },
    {
        "function": "engineGetEncoded",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters in their primary encoding format."
    },
    {
        "function": "engineGetEncoded",
        "parameters": [
            "String"
        ],
        "comments": "Returns the parameters encoded in the specified format."
    },
    {
        "function": "engineGetParameterSpec",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Returns a (transparent) specification of this parameters object."
    },
    {
        "function": "engineInit",
        "parameters": [
            "byte[]"
        ],
        "comments": "Imports the specified parameters and decodes them according to the primary decoding format for parameters."
    },
    {
        "function": "engineInit",
        "parameters": [
            "byte[]",
            "String"
        ],
        "comments": "Imports the parameters from params and decodes them according to the specified decoding format."
    },
    {
        "function": "engineInit",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this parameters object using the parameters specified in paramSpec."
    },
    {
        "function": "engineToString",
        "parameters": [
            ""
        ],
        "comments": "Returns a formatted string describing the parameters."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new AllPermission object."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Creates a new AllPermission object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Checks two AllPermission objects for equality."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the canonical string representation of the actions."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "login",
        "parameters": [
            "Subject",
            "CallbackHandler"
        ],
        "comments": "Deprecated.use AuthProvider(String, String, String) instead."
    },
    {
        "function": "logout",
        "parameters": [
            ""
        ],
        "comments": "Constructs a provider with the specified name, version string, and information."
    },
    {
        "function": "setCallbackHandler",
        "parameters": [
            "CallbackHandler"
        ],
        "comments": "Log in to this provider."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new BasicPermission with the specified name."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Creates a new BasicPermission object with the specified name."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Checks two BasicPermission objects for equality."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the canonical string representation of the actions, which currently is the empty string \"\", since there are no actions for a BasicPermission."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a CodeSigner object."
    },
    {
        "function": "getSignerCertPath",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this code signer."
    },
    {
        "function": "getTimestamp",
        "parameters": [
            ""
        ],
        "comments": "Returns the signer's certificate path."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the signature timestamp."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this code signer."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a CodeSource and associates it with the specified location and set of certificates."
    },
    {
        "function": "getCertificates",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CodeSource and associates it with the specified location and set of code signers."
    },
    {
        "function": "getCodeSigners",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this object."
    },
    {
        "function": "getLocation",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificates associated with this CodeSource."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the code signers associated with this CodeSource."
    },
    {
        "function": "implies",
        "parameters": [
            "CodeSource"
        ],
        "comments": "Returns the location associated with this CodeSource."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "getMessageDigest",
        "parameters": [
            ""
        ],
        "comments": "Creates a digest input stream, using the specified input stream and message digest."
    },
    {
        "function": "on",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the message digest associated with this stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Turns the digest function on or off."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads a byte, and updates the message digest (if the digest function is on)."
    },
    {
        "function": "setMessageDigest",
        "parameters": [
            "MessageDigest"
        ],
        "comments": "Reads into a byte array, and updates the message digest (if the digest function is on)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Associates the specified message digest with this stream."
    },
    {
        "function": "getMessageDigest",
        "parameters": [
            ""
        ],
        "comments": "Creates a digest output stream, using the specified output stream and message digest."
    },
    {
        "function": "on",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the message digest associated with this stream."
    },
    {
        "function": "setMessageDigest",
        "parameters": [
            "MessageDigest"
        ],
        "comments": "Turns the digest function on or off."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Associates the specified message digest with this stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Prints a string representation of this digest output stream and its associated message digest object."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream."
    },
    {
        "function": "getConfiguration",
        "parameters": [
            ""
        ],
        "comments": "Constructs a DomainLoadStoreParameter for a keystore domain with the parameters used to protect keystore data."
    },
    {
        "function": "getProtectionParameter",
        "parameters": [
            ""
        ],
        "comments": "Gets the identifier for the domain configuration data."
    },
    {
        "function": "getProtectionParams",
        "parameters": [
            ""
        ],
        "comments": "Gets the keystore protection parameters for this domain."
    },
    {
        "function": "instantiation",
        "parameters": [
            "int",
            "DrbgParameters.Capability",
            "byte[]"
        ],
        "comments": "Generates a DrbgParameters.Instantiation object."
    },
    {
        "function": "nextBytes",
        "parameters": [
            "int",
            "boolean",
            "byte[]"
        ],
        "comments": "Generates a DrbgParameters.NextBytes object."
    },
    {
        "function": "reseed",
        "parameters": [
            "boolean",
            "byte[]"
        ],
        "comments": "Generates a DrbgParameters.Reseed object."
    },
    {
        "function": "getCapability",
        "parameters": [
            ""
        ],
        "comments": "Returns the capability."
    },
    {
        "function": "getPersonalizationString",
        "parameters": [
            ""
        ],
        "comments": "Returns the personalization string as a byte array."
    },
    {
        "function": "getStrength",
        "parameters": [
            ""
        ],
        "comments": "Returns the security strength in bits."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a Human-readable string representation of this Instantiation."
    },
    {
        "function": "getAdditionalInput",
        "parameters": [
            ""
        ],
        "comments": "Returns the requested additional input."
    },
    {
        "function": "getPredictionResistance",
        "parameters": [
            ""
        ],
        "comments": "Returns whether prediction resistance is requested."
    },
    {
        "function": "getStrength",
        "parameters": [
            ""
        ],
        "comments": "Returns the security strength requested in bits."
    },
    {
        "function": "getAdditionalInput",
        "parameters": [
            ""
        ],
        "comments": "Returns the requested additional input."
    },
    {
        "function": "getPredictionResistance",
        "parameters": [
            ""
        ],
        "comments": "Returns whether prediction resistance is requested."
    },
    {
        "function": "getObject",
        "parameters": [
            ""
        ],
        "comments": "Constructs a GuardedObject using the specified object and guard."
    },
    {
        "function": "addCertificate",
        "parameters": [
            "Certificate"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "certificates",
        "parameters": [
            ""
        ],
        "comments": "Constructor for serialization only."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getInfo",
        "parameters": [
            ""
        ],
        "comments": "Constructs an identity with the specified name and no scope."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Constructs an identity with the specified name and scope."
    },
    {
        "function": "getScope",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Adds a certificate for this identity."
    },
    {
        "function": "identityEquals",
        "parameters": [
            "Identity"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "removeCertificate",
        "parameters": [
            "Certificate"
        ],
        "comments": "Returns a copy of all the certificates for this identity."
    },
    {
        "function": "setInfo",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "setPublicKey",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Tests for equality between the specified object and this identity."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "toString",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns general information previously specified for this identity."
    },
    {
        "function": "addIdentity",
        "parameters": [
            "Identity"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getIdentity",
        "parameters": [
            "String"
        ],
        "comments": "This constructor is used for serialization only and should not be used by subclasses."
    },
    {
        "function": "getIdentity",
        "parameters": [
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getIdentity",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Constructs a new identity scope with the specified name."
    },
    {
        "function": "getSystemScope",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "identities",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new identity scope with the specified name and scope."
    },
    {
        "function": "removeIdentity",
        "parameters": [
            "Identity"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "setSystemScope",
        "parameters": [
            "IdentityScope"
        ],
        "comments": "Adds an identity to this identity scope."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the identity in this scope with the specified name (if any)."
    },
    {
        "function": "generatePrivate",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Creates a KeyFactory object."
    },
    {
        "function": "generatePublic",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Generates a private key object from the provided key specification (key material)."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Generates a public key object from the provided key specification (key material)."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Gets the name of the algorithm associated with this KeyFactory."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a KeyFactory object that converts public/private keys of the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a KeyFactory object that converts public/private keys of the specified algorithm."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "Key",
            "Class<T>"
        ],
        "comments": "Returns a KeyFactory object that converts public/private keys of the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a specification (key material) of the given key object."
    },
    {
        "function": "translateKey",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the provider of this key factory object."
    },
    {
        "function": "engineGeneratePrivate",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Generates a private key object from the provided key specification (key material)."
    },
    {
        "function": "engineGeneratePublic",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Generates a public key object from the provided key specification (key material)."
    },
    {
        "function": "engineGetKeySpec",
        "parameters": [
            "Key",
            "Class<T>"
        ],
        "comments": "Returns a specification (key material) of the given key object."
    },
    {
        "function": "engineTranslateKey",
        "parameters": [
            "Key"
        ],
        "comments": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory."
    },
    {
        "function": "getPrivate",
        "parameters": [
            ""
        ],
        "comments": "Constructs a key pair from the given public key and private key."
    },
    {
        "function": "getPublic",
        "parameters": [
            ""
        ],
        "comments": "Returns a reference to the private key component of this key pair."
    },
    {
        "function": "generateKeyPair",
        "parameters": [
            ""
        ],
        "comments": "Creates a KeyPairGenerator object for the specified algorithm."
    },
    {
        "function": "genKeyPair",
        "parameters": [
            ""
        ],
        "comments": "Generates a key pair."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Generates a key pair."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the standard name of the algorithm for this key pair generator."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm."
    },
    {
        "function": "initialize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the provider of this key pair generator object."
    },
    {
        "function": "initialize",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness."
    },
    {
        "function": "initialize",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set)."
    },
    {
        "function": "initialize",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness."
    },
    {
        "function": "generateKeyPair",
        "parameters": [
            ""
        ],
        "comments": "Generates a key pair."
    },
    {
        "function": "initialize",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator for a certain keysize, using the default parameter set."
    },
    {
        "function": "initialize",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator using the specified parameter set and user-provided source of randomness."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Construct the alternate Key class."
    },
    {
        "function": "aliases",
        "parameters": [
            ""
        ],
        "comments": "Creates a KeyStore object of the given type, and encapsulates the given provider implementation (SPI object) in it."
    },
    {
        "function": "containsAlias",
        "parameters": [
            "String"
        ],
        "comments": "Lists all the alias names of this keystore."
    },
    {
        "function": "deleteEntry",
        "parameters": [
            "String"
        ],
        "comments": "Checks if the given alias exists in this keystore."
    },
    {
        "function": "entryInstanceOf",
        "parameters": [
            "String",
            "Class<?"
        ],
        "comments": "Deletes the entry identified by the given alias from this keystore."
    },
    {
        "function": "getCertificate",
        "parameters": [
            "String"
        ],
        "comments": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass."
    },
    {
        "function": "getCertificateAlias",
        "parameters": [
            "Certificate"
        ],
        "comments": "Returns the certificate associated with the given alias."
    },
    {
        "function": "getCertificateChain",
        "parameters": [
            "String"
        ],
        "comments": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate."
    },
    {
        "function": "getCreationDate",
        "parameters": [
            "String"
        ],
        "comments": "Returns the certificate chain associated with the given alias."
    },
    {
        "function": "getDefaultType",
        "parameters": [
            ""
        ],
        "comments": "Returns the creation date of the entry identified by the given alias."
    },
    {
        "function": "getEntry",
        "parameters": [
            "String",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists."
    },
    {
        "function": "getInstance",
        "parameters": [
            "File",
            "char[]"
        ],
        "comments": "Gets a keystore Entry for the specified alias with the specified protection parameter."
    },
    {
        "function": "getInstance",
        "parameters": [
            "File",
            "KeyStore.LoadStoreParameter"
        ],
        "comments": "Returns a loaded keystore object of the appropriate keystore type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns a loaded keystore object of the appropriate keystore type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a keystore object of the specified type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a keystore object of the specified type."
    },
    {
        "function": "getKey",
        "parameters": [
            "String",
            "char[]"
        ],
        "comments": "Returns a keystore object of the specified type."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the key associated with the given alias, using the given password to recover it."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this keystore."
    },
    {
        "function": "isCertificateEntry",
        "parameters": [
            "String"
        ],
        "comments": "Returns the type of this keystore."
    },
    {
        "function": "isKeyEntry",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
    },
    {
        "function": "load",
        "parameters": [
            "InputStream",
            "char[]"
        ],
        "comments": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
    },
    {
        "function": "load",
        "parameters": [
            "KeyStore.LoadStoreParameter"
        ],
        "comments": "Loads this KeyStore from the given input stream."
    },
    {
        "function": "setCertificateEntry",
        "parameters": [
            "String",
            "Certificate"
        ],
        "comments": "Loads this keystore using the given LoadStoreParameter."
    },
    {
        "function": "setEntry",
        "parameters": [
            "String",
            "KeyStore.Entry",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Assigns the given trusted certificate to the given alias."
    },
    {
        "function": "setKeyEntry",
        "parameters": [
            "String",
            "byte[]",
            "Certificate[]"
        ],
        "comments": "Saves a keystore Entry under the specified alias."
    },
    {
        "function": "setKeyEntry",
        "parameters": [
            "String",
            "Key",
            "char[]",
            "Certificate[]"
        ],
        "comments": "Assigns the given key (that has already been protected) to the given alias."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Assigns the given key to the given alias, protecting it with the given password."
    },
    {
        "function": "store",
        "parameters": [
            "OutputStream",
            "char[]"
        ],
        "comments": "Retrieves the number of entries in this keystore."
    },
    {
        "function": "store",
        "parameters": [
            "KeyStore.LoadStoreParameter"
        ],
        "comments": "Stores this keystore to the given output stream, and protects its integrity with the given password."
    },
    {
        "function": "getKeyStore",
        "parameters": [
            ""
        ],
        "comments": "Construct a new Builder."
    },
    {
        "function": "getProtectionParameter",
        "parameters": [
            "String"
        ],
        "comments": "Returns the KeyStore described by this object."
    },
    {
        "function": "newInstance",
        "parameters": [
            "File",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Returns the ProtectionParameters that should be used to obtain the Entry with the given alias."
    },
    {
        "function": "newInstance",
        "parameters": [
            "String",
            "Provider",
            "File",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Returns a new Builder object."
    },
    {
        "function": "newInstance",
        "parameters": [
            "String",
            "Provider",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Returns a new Builder object."
    },
    {
        "function": "newInstance",
        "parameters": [
            "KeyStore",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Returns a new Builder object."
    },
    {
        "function": "getCallbackHandler",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new CallbackHandlerProtection from a CallbackHandler."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Creates a password parameter."
    },
    {
        "function": "getPassword",
        "parameters": [
            ""
        ],
        "comments": "Creates a password parameter and specifies the protection algorithm and associated parameters to use when encrypting a keystore entry."
    },
    {
        "function": "getProtectionAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Clears the password."
    },
    {
        "function": "getProtectionParameters",
        "parameters": [
            ""
        ],
        "comments": "Gets the password."
    },
    {
        "function": "isDestroyed",
        "parameters": [
            ""
        ],
        "comments": "Gets the name of the protection algorithm."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Constructs a PrivateKeyEntry with a PrivateKey and corresponding certificate chain."
    },
    {
        "function": "getCertificate",
        "parameters": [
            ""
        ],
        "comments": "Constructs a PrivateKeyEntry with a PrivateKey and corresponding certificate chain and associated entry attributes."
    },
    {
        "function": "getCertificateChain",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the attributes associated with an entry."
    },
    {
        "function": "getPrivateKey",
        "parameters": [
            ""
        ],
        "comments": "Gets the end entity Certificate from the certificate chain in this entry."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Gets the Certificate chain from this entry."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SecretKeyEntry with a SecretKey."
    },
    {
        "function": "getSecretKey",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SecretKeyEntry with a SecretKey and associated entry attributes."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the attributes associated with an entry."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Constructs a TrustedCertificateEntry with a trusted Certificate."
    },
    {
        "function": "getTrustedCertificate",
        "parameters": [
            ""
        ],
        "comments": "Constructs a TrustedCertificateEntry with a trusted Certificate and associated entry attributes."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the attributes associated with an entry."
    },
    {
        "function": "engineAliases",
        "parameters": [
            ""
        ],
        "comments": "Lists all the alias names of this keystore."
    },
    {
        "function": "engineContainsAlias",
        "parameters": [
            "String"
        ],
        "comments": "Checks if the given alias exists in this keystore."
    },
    {
        "function": "engineDeleteEntry",
        "parameters": [
            "String"
        ],
        "comments": "Deletes the entry identified by the given alias from this keystore."
    },
    {
        "function": "engineEntryInstanceOf",
        "parameters": [
            "String",
            "Class<?"
        ],
        "comments": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass."
    },
    {
        "function": "engineGetCertificate",
        "parameters": [
            "String"
        ],
        "comments": "Returns the certificate associated with the given alias."
    },
    {
        "function": "engineGetCertificateAlias",
        "parameters": [
            "Certificate"
        ],
        "comments": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate."
    },
    {
        "function": "engineGetCertificateChain",
        "parameters": [
            "String"
        ],
        "comments": "Returns the certificate chain associated with the given alias."
    },
    {
        "function": "engineGetCreationDate",
        "parameters": [
            "String"
        ],
        "comments": "Returns the creation date of the entry identified by the given alias."
    },
    {
        "function": "engineGetEntry",
        "parameters": [
            "String",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Gets a KeyStore.Entry for the specified alias with the specified protection parameter."
    },
    {
        "function": "engineGetKey",
        "parameters": [
            "String",
            "char[]"
        ],
        "comments": "Returns the key associated with the given alias, using the given password to recover it."
    },
    {
        "function": "engineIsCertificateEntry",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry."
    },
    {
        "function": "engineIsKeyEntry",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry."
    },
    {
        "function": "engineLoad",
        "parameters": [
            "InputStream",
            "char[]"
        ],
        "comments": "Loads the keystore from the given input stream."
    },
    {
        "function": "engineLoad",
        "parameters": [
            "KeyStore.LoadStoreParameter"
        ],
        "comments": "Loads the keystore using the given KeyStore.LoadStoreParameter."
    },
    {
        "function": "engineProbe",
        "parameters": [
            "InputStream"
        ],
        "comments": "Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not."
    },
    {
        "function": "engineSetCertificateEntry",
        "parameters": [
            "String",
            "Certificate"
        ],
        "comments": "Assigns the given certificate to the given alias."
    },
    {
        "function": "engineSetEntry",
        "parameters": [
            "String",
            "KeyStore.Entry",
            "KeyStore.ProtectionParameter"
        ],
        "comments": "Saves a KeyStore.Entry under the specified alias."
    },
    {
        "function": "engineSetKeyEntry",
        "parameters": [
            "String",
            "byte[]",
            "Certificate[]"
        ],
        "comments": "Assigns the given key (that has already been protected) to the given alias."
    },
    {
        "function": "engineSetKeyEntry",
        "parameters": [
            "String",
            "Key",
            "char[]",
            "Certificate[]"
        ],
        "comments": "Assigns the given key to the given alias, protecting it with the given password."
    },
    {
        "function": "engineSize",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the number of entries in this keystore."
    },
    {
        "function": "engineStore",
        "parameters": [
            "OutputStream",
            "char[]"
        ],
        "comments": "Stores this keystore to the given output stream, and protects its integrity with the given password."
    },
    {
        "function": "engineStore",
        "parameters": [
            "KeyStore.LoadStoreParameter"
        ],
        "comments": "Stores this keystore using the given KeyStore.LoadStoreParmeter."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates a message digest with the specified algorithm name."
    },
    {
        "function": "digest",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the implementation is cloneable."
    },
    {
        "function": "digest",
        "parameters": [
            "byte[]"
        ],
        "comments": "Completes the hash computation by performing final operations such as padding."
    },
    {
        "function": "digest",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Performs a final update on the digest using the specified array of bytes, then completes the digest computation."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Completes the hash computation by performing final operations such as padding."
    },
    {
        "function": "getDigestLength",
        "parameters": [
            ""
        ],
        "comments": "Returns a string that identifies the algorithm, independent of implementation details."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a MessageDigest object that implements the specified digest algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a MessageDigest object that implements the specified digest algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a MessageDigest object that implements the specified digest algorithm."
    },
    {
        "function": "isEqual",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Returns the provider of this message digest object."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Compares two digests for equality."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Resets the digest for further use."
    },
    {
        "function": "update",
        "parameters": [
            "byte"
        ],
        "comments": "Returns a string representation of this message digest object."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]"
        ],
        "comments": "Updates the digest using the specified byte."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Updates the digest using the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the digest using the specified array of bytes, starting at the specified offset."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the implementation is cloneable."
    },
    {
        "function": "engineDigest",
        "parameters": [
            ""
        ],
        "comments": "Completes the hash computation by performing final operations such as padding."
    },
    {
        "function": "engineDigest",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Completes the hash computation by performing final operations such as padding."
    },
    {
        "function": "engineGetDigestLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the digest length in bytes."
    },
    {
        "function": "engineReset",
        "parameters": [
            ""
        ],
        "comments": "Resets the digest for further use."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte"
        ],
        "comments": "Updates the digest using the specified byte."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Updates the digest using the specified array of bytes, starting at the specified offset."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Update the digest using the specified ByteBuffer."
    },
    {
        "function": "checkGuard",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a permission with the specified name."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Implements the guard interface for a permission."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two Permission objects for equality."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns the actions as a String."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this Permission."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this Permission object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Checks if the specified permission's actions are \"implied by\" this object's actions."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty PermissionCollection for a given Permission object, or null if one is not defined."
    },
    {
        "function": "add",
        "parameters": [
            "Permission"
        ],
        "comments": "Adds a permission object to the current collection of permission objects."
    },
    {
        "function": "elements",
        "parameters": [
            ""
        ],
        "comments": "Returns an enumeration of all the Permission objects in the collection."
    },
    {
        "function": "elementsAsStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of all the Permission objects in the collection."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this PermissionCollection object is marked as readonly."
    },
    {
        "function": "setReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Marks this PermissionCollection object as \"readonly\"."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this PermissionCollection object, providing information about all the permissions it contains."
    },
    {
        "function": "add",
        "parameters": [
            "Permission"
        ],
        "comments": "Creates a new Permissions object containing no PermissionCollections."
    },
    {
        "function": "elements",
        "parameters": [
            ""
        ],
        "comments": "Adds a permission object to the PermissionCollection for the class the permission belongs to."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a PKCS12 attribute from its ASN.1 DER encoding."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Constructs a PKCS12 attribute from its name and value."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Compares this PKCS12Attribute and a specified object for equality."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the attribute's ASN.1 DER encoding."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the attribute's ASN.1 DER-encoded value as a string."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Policy.Parameters"
        ],
        "comments": "Returns a Policy object of the specified type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Policy.Parameters",
            "String"
        ],
        "comments": "Returns a Policy object of the specified type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Policy.Parameters",
            "Provider"
        ],
        "comments": "Returns a Policy object of the specified type."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Return Policy parameters."
    },
    {
        "function": "getPermissions",
        "parameters": [
            "CodeSource"
        ],
        "comments": "Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource."
    },
    {
        "function": "getPermissions",
        "parameters": [
            "ProtectionDomain"
        ],
        "comments": "Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain."
    },
    {
        "function": "getPolicy",
        "parameters": [
            ""
        ],
        "comments": "Returns the installed Policy object."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Return the Provider of this Policy."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Return the type of this Policy."
    },
    {
        "function": "implies",
        "parameters": [
            "ProtectionDomain",
            "Permission"
        ],
        "comments": "Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted."
    },
    {
        "function": "refresh",
        "parameters": [
            ""
        ],
        "comments": "Refreshes/reloads the policy configuration."
    },
    {
        "function": "setPolicy",
        "parameters": [
            "Policy"
        ],
        "comments": "Sets the system-wide Policy object."
    },
    {
        "function": "engineGetPermissions",
        "parameters": [
            "CodeSource"
        ],
        "comments": "Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource."
    },
    {
        "function": "engineGetPermissions",
        "parameters": [
            "ProtectionDomain"
        ],
        "comments": "Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain."
    },
    {
        "function": "engineImplies",
        "parameters": [
            "ProtectionDomain",
            "Permission"
        ],
        "comments": "Check whether the policy has granted a Permission to a ProtectionDomain."
    },
    {
        "function": "engineRefresh",
        "parameters": [
            ""
        ],
        "comments": "Refreshes/reloads the policy configuration."
    },
    {
        "function": "getClassLoader",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ProtectionDomain with the given CodeSource and Permissions."
    },
    {
        "function": "getCodeSource",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ProtectionDomain qualified by the given CodeSource, Permissions, ClassLoader and array of Principals."
    },
    {
        "function": "getPermissions",
        "parameters": [
            ""
        ],
        "comments": "Returns the ClassLoader of this domain."
    },
    {
        "function": "getPrincipals",
        "parameters": [
            ""
        ],
        "comments": "Returns the CodeSource of this domain."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the static permissions granted to this domain."
    },
    {
        "function": "staticPermissionsOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of principals for this domain."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Check and see if this ProtectionDomain implies the permissions expressed in the Permission object."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.use Provider(String, String, String) instead."
    },
    {
        "function": "compute",
        "parameters": [
            "Object",
            "BiFunction<?",
            "?",
            "?"
        ],
        "comments": "Constructs a provider with the specified name, version string, and information."
    },
    {
        "function": "computeIfAbsent",
        "parameters": [
            "Object",
            "Function<?",
            "?"
        ],
        "comments": "Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider."
    },
    {
        "function": "computeIfPresent",
        "parameters": [
            "Object",
            "BiFunction<?",
            "?",
            "?"
        ],
        "comments": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)."
    },
    {
        "function": "configure",
        "parameters": [
            "String"
        ],
        "comments": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null."
    },
    {
        "function": "entrySet",
        "parameters": [
            ""
        ],
        "comments": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value."
    },
    {
        "function": "forEach",
        "parameters": [
            "BiConsumer<?",
            "?"
        ],
        "comments": "Apply the supplied configuration argument to this provider instance and return the configured provider."
    },
    {
        "function": "getInfo",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable Set view of the property entries contained in this Provider."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception."
    },
    {
        "function": "getOrDefault",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Returns a human-readable description of the provider and its services."
    },
    {
        "function": "getService",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns the name of this provider."
    },
    {
        "function": "getServices",
        "parameters": [
            ""
        ],
        "comments": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Get the service describing this Provider's implementation of the specified type of this algorithm or alias."
    },
    {
        "function": "getVersionStr",
        "parameters": [
            ""
        ],
        "comments": "Get an unmodifiable Set of all services supported by this Provider."
    },
    {
        "function": "isConfigured",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.use getVersionStr() instead."
    },
    {
        "function": "keySet",
        "parameters": [
            ""
        ],
        "comments": "Returns the version string for this provider."
    },
    {
        "function": "load",
        "parameters": [
            "InputStream"
        ],
        "comments": "Check if this provider instance has been configured."
    },
    {
        "function": "merge",
        "parameters": [
            "Object",
            "Object",
            "BiFunction<?",
            "?",
            "?"
        ],
        "comments": "Returns an unmodifiable Set view of the property keys contained in this provider."
    },
    {
        "function": "put",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Reads a property list (key and element pairs) from the input stream."
    },
    {
        "function": "putAll",
        "parameters": [
            "Map<?",
            "?>"
        ],
        "comments": "If the specified key is not already associated with a value or is associated with null, associates it with the given value."
    },
    {
        "function": "putIfAbsent",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Sets the key property to have the specified value."
    },
    {
        "function": "putService",
        "parameters": [
            "Provider.Service"
        ],
        "comments": "Copies all of the mappings from the specified Map to this provider."
    },
    {
        "function": "remove",
        "parameters": [
            "Object"
        ],
        "comments": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value."
    },
    {
        "function": "remove",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Add a service."
    },
    {
        "function": "removeService",
        "parameters": [
            "Provider.Service"
        ],
        "comments": "Removes the key property (and its corresponding value)."
    },
    {
        "function": "replace",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Removes the entry for the specified key only if it is currently mapped to the specified value."
    },
    {
        "function": "replace",
        "parameters": [
            "Object",
            "Object",
            "Object"
        ],
        "comments": "Remove a service previously added using putService()."
    },
    {
        "function": "replaceAll",
        "parameters": [
            "BiFunction<?",
            "?",
            "?"
        ],
        "comments": "Replaces the entry for the specified key only if it is currently mapped to some value."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Replaces the entry for the specified key only if currently mapped to the specified value."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Construct a new service."
    },
    {
        "function": "getAttribute",
        "parameters": [
            "String"
        ],
        "comments": "Return the name of the algorithm of this service."
    },
    {
        "function": "getClassName",
        "parameters": [
            ""
        ],
        "comments": "Return the value of the specified attribute or null if this attribute is not set for this Service."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Return the name of the class implementing this service."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Return the Provider of this service."
    },
    {
        "function": "newInstance",
        "parameters": [
            "Object"
        ],
        "comments": "Get the type of this service."
    },
    {
        "function": "supportsParameter",
        "parameters": [
            "Object"
        ],
        "comments": "Return a new instance of the implementation described by this service."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Test whether this Service can use the specified parameter."
    },
    {
        "function": "generateSeed",
        "parameters": [
            "int"
        ],
        "comments": "Constructs a secure random number generator (RNG) implementing the default random number algorithm."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a secure random number generator (RNG) implementing the default random number algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Creates a SecureRandom object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns the name of the algorithm implemented by this SecureRandom object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "SecureRandomParameters"
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "SecureRandomParameters",
            "String"
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "SecureRandomParameters",
            "Provider"
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm."
    },
    {
        "function": "getInstanceStrong",
        "parameters": [
            ""
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request."
    },
    {
        "function": "getSeed",
        "parameters": [
            "int"
        ],
        "comments": "Returns a SecureRandom object that was selected by using the algorithms/providers specified in the  securerandom.strongAlgorithms Security property."
    },
    {
        "function": "next",
        "parameters": [
            "int"
        ],
        "comments": "Returns the effective SecureRandomParameters for this SecureRandom instance."
    },
    {
        "function": "nextBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the provider of this SecureRandom object."
    },
    {
        "function": "nextBytes",
        "parameters": [
            "byte[]",
            "SecureRandomParameters"
        ],
        "comments": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself."
    },
    {
        "function": "reseed",
        "parameters": [
            ""
        ],
        "comments": "Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."
    },
    {
        "function": "reseed",
        "parameters": [
            "SecureRandomParameters"
        ],
        "comments": "Generates a user-specified number of random bytes."
    },
    {
        "function": "setSeed",
        "parameters": [
            "byte[]"
        ],
        "comments": "Generates a user-specified number of random bytes with additional parameters."
    },
    {
        "function": "setSeed",
        "parameters": [
            "long"
        ],
        "comments": "Reseeds this SecureRandom with entropy input read from its entropy source."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters."
    },
    {
        "function": "engineGenerateSeed",
        "parameters": [
            "int"
        ],
        "comments": "Constructor without a parameter."
    },
    {
        "function": "engineGetParameters",
        "parameters": [
            ""
        ],
        "comments": "Constructor with a parameter."
    },
    {
        "function": "engineNextBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the given number of seed bytes."
    },
    {
        "function": "engineNextBytes",
        "parameters": [
            "byte[]",
            "SecureRandomParameters"
        ],
        "comments": "Returns the effective SecureRandomParameters for this SecureRandom instance."
    },
    {
        "function": "engineReseed",
        "parameters": [
            "SecureRandomParameters"
        ],
        "comments": "Generates a user-specified number of random bytes."
    },
    {
        "function": "engineSetSeed",
        "parameters": [
            "byte[]"
        ],
        "comments": "Generates a user-specified number of random bytes with additional parameters."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Reseeds this random object with entropy input read from its entropy source with additional parameters."
    },
    {
        "function": "addProvider",
        "parameters": [
            "Provider"
        ],
        "comments": "Adds a provider to the next position available."
    },
    {
        "function": "getAlgorithmProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Deprecated.This method used to return the value of a proprietary property in the master file of the \"SUN\" Cryptographic Service Provider in order to determine how to parse algorithm-specific parameters."
    },
    {
        "function": "getAlgorithms",
        "parameters": [
            "String"
        ],
        "comments": "Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore)."
    },
    {
        "function": "getProperty",
        "parameters": [
            "String"
        ],
        "comments": "Gets a security property value."
    },
    {
        "function": "getProvider",
        "parameters": [
            "String"
        ],
        "comments": "Returns the provider installed with the specified name, if any."
    },
    {
        "function": "getProviders",
        "parameters": [
            ""
        ],
        "comments": "Returns an array containing all the installed providers."
    },
    {
        "function": "getProviders",
        "parameters": [
            "String"
        ],
        "comments": "Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed."
    },
    {
        "function": "getProviders",
        "parameters": [
            "Map<String",
            "String>"
        ],
        "comments": "Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed."
    },
    {
        "function": "insertProviderAt",
        "parameters": [
            "Provider",
            "int"
        ],
        "comments": "Adds a new provider, at a specified position."
    },
    {
        "function": "removeProvider",
        "parameters": [
            "String"
        ],
        "comments": "Removes the provider with the specified name."
    },
    {
        "function": "setProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Sets a security property value."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates a Signature object for the specified algorithm."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the implementation is cloneable."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the name of the algorithm for this signature object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a Signature object that implements the specified signature algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a Signature object that implements the specified signature algorithm."
    },
    {
        "function": "getParameter",
        "parameters": [
            "String"
        ],
        "comments": "Returns a Signature object that implements the specified signature algorithm."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.\u00a0"
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters used with this signature object."
    },
    {
        "function": "initSign",
        "parameters": [
            "PrivateKey"
        ],
        "comments": "Returns the provider of this signature object."
    },
    {
        "function": "initSign",
        "parameters": [
            "PrivateKey",
            "SecureRandom"
        ],
        "comments": "Initialize this object for signing."
    },
    {
        "function": "initVerify",
        "parameters": [
            "Certificate"
        ],
        "comments": "Initialize this object for signing."
    },
    {
        "function": "initVerify",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Initializes this object for verification, using the public key from the given certificate."
    },
    {
        "function": "setParameter",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Initializes this object for verification."
    },
    {
        "function": "setParameter",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Deprecated.Use setParameter."
    },
    {
        "function": "sign",
        "parameters": [
            ""
        ],
        "comments": "Initializes this signature engine with the specified parameter set."
    },
    {
        "function": "sign",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the signature bytes of all the data updated."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
    },
    {
        "function": "update",
        "parameters": [
            "byte"
        ],
        "comments": "Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]"
        ],
        "comments": "Updates the data to be signed or verified by a byte."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Updates the data to be signed or verified, using the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
    },
    {
        "function": "verify",
        "parameters": [
            "byte[]"
        ],
        "comments": "Updates the data to be signed or verified using the specified ByteBuffer."
    },
    {
        "function": "verify",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Verifies the passed-in signature."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the implementation is cloneable."
    },
    {
        "function": "engineGetParameter",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.\u00a0"
    },
    {
        "function": "engineGetParameters",
        "parameters": [
            ""
        ],
        "comments": "This method is overridden by providers to return the parameters used with this signature engine."
    },
    {
        "function": "engineInitSign",
        "parameters": [
            "PrivateKey"
        ],
        "comments": "Initializes this signature object with the specified private key for signing operations."
    },
    {
        "function": "engineInitSign",
        "parameters": [
            "PrivateKey",
            "SecureRandom"
        ],
        "comments": "Initializes this signature object with the specified private key and source of randomness for signing operations."
    },
    {
        "function": "engineInitVerify",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Initializes this signature object with the specified public key for verification operations."
    },
    {
        "function": "engineSetParameter",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Deprecated.Replaced by engineSetParameter."
    },
    {
        "function": "engineSetParameter",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "This method is overridden by providers to initialize this signature engine with the specified parameter set."
    },
    {
        "function": "engineSign",
        "parameters": [
            ""
        ],
        "comments": "Returns the signature bytes of all the data updated so far."
    },
    {
        "function": "engineSign",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte"
        ],
        "comments": "Updates the data to be signed or verified using the specified byte."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the data to be signed or verified using the specified ByteBuffer."
    },
    {
        "function": "engineVerify",
        "parameters": [
            "byte[]"
        ],
        "comments": "Verifies the passed-in signature."
    },
    {
        "function": "engineVerify",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SignedObject from any Serializable object."
    },
    {
        "function": "getObject",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the name of the signature algorithm."
    },
    {
        "function": "getSignature",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the encapsulated object."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "Signature"
        ],
        "comments": "Retrieves the signature on the signed object, in the form of a byte array."
    },
    {
        "function": "getPrivateKey",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "setKeyPair",
        "parameters": [
            "KeyPair"
        ],
        "comments": "Creates a signer."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a Timestamp."
    },
    {
        "function": "getSignerCertPath",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this timestamp."
    },
    {
        "function": "getTimestamp",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate path for the Timestamping Authority."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the date and time when the timestamp was generated."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this timestamp."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new UnresolvedPermission containing the permission information needed later to actually create a Permission of the specified class, when the permission is resolved."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two UnresolvedPermission objects for equality."
    },
    {
        "function": "getUnresolvedActions",
        "parameters": [
            ""
        ],
        "comments": "Returns the canonical string representation of the actions, which currently is the empty string \"\", since there are no actions for an UnresolvedPermission."
    },
    {
        "function": "getUnresolvedCerts",
        "parameters": [
            ""
        ],
        "comments": "Get the actions for the underlying permission that has not been resolved."
    },
    {
        "function": "getUnresolvedName",
        "parameters": [
            ""
        ],
        "comments": "Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved."
    },
    {
        "function": "getUnresolvedType",
        "parameters": [
            ""
        ],
        "comments": "Get the target name of the underlying permission that has not been resolved."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Get the type (class name) of the underlying permission that has not been resolved."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "This method always returns false for unresolved permissions."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a new PermissionCollection object for storing UnresolvedPermission  objects."
    },
    {
        "function": "getURI",
        "parameters": [
            ""
        ],
        "comments": "Constructs a URIParameter with the URI pointing to data intended for an SPI implementation."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Symmetric primitive: block cipher"
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Asymmetric primitive: key agreement and key distribution"
    },
    {
        "function": "supportsPredictionResistance",
        "parameters": [
            ""
        ],
        "comments": "Neither prediction resistance nor reseed."
    },
    {
        "function": "supportsReseeding",
        "parameters": [
            ""
        ],
        "comments": "Both prediction resistance and reseed."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Reseed but no prediction resistance."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Returns whether this capability supports prediction resistance."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Type for private keys."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Type for public keys."
    },
    {
        "function": "addEntry",
        "parameters": [
            "Principal",
            "AclEntry"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Principal",
            "Permission"
        ],
        "comments": "Adds an ACL entry to this ACL."
    },
    {
        "function": "entries",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Checks whether or not the specified principal has the specified permission."
    },
    {
        "function": "getPermissions",
        "parameters": [
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "removeEntry",
        "parameters": [
            "Principal",
            "AclEntry"
        ],
        "comments": "Returns an enumeration of the entries in this ACL."
    },
    {
        "function": "setName",
        "parameters": [
            "Principal",
            "String"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this ACL."
    },
    {
        "function": "addPermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "checkPermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Adds the specified permission to this ACL entry."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "getPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Checks if the specified permission is part of the permission set in this entry."
    },
    {
        "function": "isNegative",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "permissions",
        "parameters": [
            ""
        ],
        "comments": "Clones this ACL entry."
    },
    {
        "function": "removePermission",
        "parameters": [
            "Permission"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "setNegativePermissions",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal for which permissions are granted or denied by this ACL entry."
    },
    {
        "function": "setPrincipal",
        "parameters": [
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this is a negative ACL entry (one denying the associated principal the set of permissions in the entry), false otherwise."
    },
    {
        "function": "addMember",
        "parameters": [
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "isMember",
        "parameters": [
            "Principal"
        ],
        "comments": "Adds the specified member to the group."
    },
    {
        "function": "members",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "removeMember",
        "parameters": [
            "Principal"
        ],
        "comments": "Returns true if the passed principal is a member of the group."
    },
    {
        "function": "addOwner",
        "parameters": [
            "Principal",
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "deleteOwner",
        "parameters": [
            "Principal",
            "Principal"
        ],
        "comments": "Adds an owner."
    },
    {
        "function": "isOwner",
        "parameters": [
            "Principal"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the object passed matches the permission represented in this interface."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CertPathBuilderResult."
    },
    {
        "function": "getCertPath",
        "parameters": [
            ""
        ],
        "comments": "Returns the built certification path."
    },
    {
        "function": "check",
        "parameters": [
            "Certificate"
        ],
        "comments": "Performs the check(s) on the specified certificate using its internal state."
    },
    {
        "function": "init",
        "parameters": [
            "boolean"
        ],
        "comments": "Initializes the internal state of this CertPathChecker."
    },
    {
        "function": "isForwardCheckingSupported",
        "parameters": [
            ""
        ],
        "comments": "Indicates if forward checking is supported."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CertPathParameters."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CertPathValidatorResult."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CertSelector."
    },
    {
        "function": "match",
        "parameters": [
            "Certificate"
        ],
        "comments": "Decides whether a Certificate should be selected."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CertStoreParameters."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this CRLSelector."
    },
    {
        "function": "match",
        "parameters": [
            "CRL"
        ],
        "comments": "Decides whether a CRL should be selected."
    },
    {
        "function": "encode",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Generates the extension's DER encoding and writes it to the output stream."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the extensions's object identifier."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the extensions's DER-encoded value."
    },
    {
        "function": "isCritical",
        "parameters": [
            ""
        ],
        "comments": "Gets the extension's criticality setting."
    },
    {
        "function": "getChildren",
        "parameters": [
            ""
        ],
        "comments": "Returns an iterator over the children of this node."
    },
    {
        "function": "getDepth",
        "parameters": [
            ""
        ],
        "comments": "Returns the depth of this node in the valid policy tree."
    },
    {
        "function": "getExpectedPolicies",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed."
    },
    {
        "function": "getParent",
        "parameters": [
            ""
        ],
        "comments": "Returns the parent of this node, or null if this is the root node."
    },
    {
        "function": "getPolicyQualifiers",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of policy qualifiers associated with the valid policy represented by this node."
    },
    {
        "function": "getValidPolicy",
        "parameters": [
            ""
        ],
        "comments": "Returns the valid policy represented by this node."
    },
    {
        "function": "isCritical",
        "parameters": [
            ""
        ],
        "comments": "Returns the criticality indicator of the certificate policy extension in the most recently processed certificate."
    },
    {
        "function": "getCriticalExtensionOIDs",
        "parameters": [
            ""
        ],
        "comments": "Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface."
    },
    {
        "function": "getExtensionValue",
        "parameters": [
            "String"
        ],
        "comments": "Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String."
    },
    {
        "function": "getNonCriticalExtensionOIDs",
        "parameters": [
            ""
        ],
        "comments": "Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface."
    },
    {
        "function": "hasUnsupportedCriticalExtension",
        "parameters": [
            ""
        ],
        "comments": "Check if there is a critical extension that is not supported."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a certificate of the specified type."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Compares this certificate for equality with the specified object."
    },
    {
        "function": "getPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Returns the encoded form of this certificate."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Gets the public key from this certificate."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the type of this certificate."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode value for this certificate from its encoded form."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Returns a string representation of this certificate."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "String"
        ],
        "comments": "Verifies that this certificate was signed using the private key that corresponds to the specified public key."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "Provider"
        ],
        "comments": "Verifies that this certificate was signed using the private key that corresponds to the specified public key."
    },
    {
        "function": "writeReplace",
        "parameters": [
            ""
        ],
        "comments": "Verifies that this certificate was signed using the private key that corresponds to the specified public key."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Construct the alternate Certificate class with the Certificate type and Certificate encoding bytes."
    },
    {
        "function": "generateCertificate",
        "parameters": [
            "InputStream"
        ],
        "comments": "Creates a CertificateFactory object of the given type, and encapsulates the given provider implementation (SPI object) in it."
    },
    {
        "function": "generateCertificates",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a certificate object and initializes it with the data read from the input stream inStream."
    },
    {
        "function": "generateCertPath",
        "parameters": [
            "InputStream"
        ],
        "comments": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream."
    },
    {
        "function": "generateCertPath",
        "parameters": [
            "InputStream",
            "String"
        ],
        "comments": "Generates a CertPath object and initializes it with the data read from the InputStream inStream."
    },
    {
        "function": "generateCertPath",
        "parameters": [
            "List<?"
        ],
        "comments": "Generates a CertPath object and initializes it with the data read from the InputStream inStream."
    },
    {
        "function": "generateCRL",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a CertPath object and initializes it with a List of Certificates."
    },
    {
        "function": "generateCRLs",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream."
    },
    {
        "function": "getCertPathEncodings",
        "parameters": [
            ""
        ],
        "comments": "Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a certificate factory object that implements the specified certificate type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a certificate factory object for the specified certificate type."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a certificate factory object for the specified certificate type."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this certificate factory."
    },
    {
        "function": "engineGenerateCertificate",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a certificate object and initializes it with the data read from the input stream inStream."
    },
    {
        "function": "engineGenerateCertificates",
        "parameters": [
            "InputStream"
        ],
        "comments": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream."
    },
    {
        "function": "engineGenerateCertPath",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a CertPath object and initializes it with the data read from the InputStream inStream."
    },
    {
        "function": "engineGenerateCertPath",
        "parameters": [
            "InputStream",
            "String"
        ],
        "comments": "Generates a CertPath object and initializes it with the data read from the InputStream inStream."
    },
    {
        "function": "engineGenerateCertPath",
        "parameters": [
            "List<?"
        ],
        "comments": "Generates a CertPath object and initializes it with a List of Certificates."
    },
    {
        "function": "engineGenerateCRL",
        "parameters": [
            "InputStream"
        ],
        "comments": "Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream."
    },
    {
        "function": "engineGenerateCRLs",
        "parameters": [
            "InputStream"
        ],
        "comments": "Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream."
    },
    {
        "function": "engineGetCertPathEncodings",
        "parameters": [
            ""
        ],
        "comments": "Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a CertPath of the specified type."
    },
    {
        "function": "getCertificates",
        "parameters": [
            ""
        ],
        "comments": "Compares this certification path for equality with the specified object."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of certificates in this certification path."
    },
    {
        "function": "getEncoded",
        "parameters": [
            "String"
        ],
        "comments": "Returns the encoded form of this certification path, using the default encoding."
    },
    {
        "function": "getEncodings",
        "parameters": [
            ""
        ],
        "comments": "Returns the encoded form of this certification path, using the specified encoding."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns an iteration of the encodings supported by this certification path, with the default encoding first."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the type of Certificates in this certification path."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the hashcode for this certification path."
    },
    {
        "function": "writeReplace",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of this certification path."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Creates a CertPathRep with the specified type and encoded form of a certification path."
    },
    {
        "function": "build",
        "parameters": [
            "CertPathParameters"
        ],
        "comments": "Creates a CertPathBuilder object of the given algorithm, and encapsulates the given provider implementation (SPI object) in it."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Attempts to build a certification path using the specified algorithm parameter set."
    },
    {
        "function": "getDefaultType",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the algorithm of this CertPathBuilder."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string \"PKIX\" if no such property exists."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a CertPathBuilder object that implements the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a CertPathBuilder object that implements the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a CertPathBuilder object that implements the specified algorithm."
    },
    {
        "function": "getRevocationChecker",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this CertPathBuilder."
    },
    {
        "function": "engineBuild",
        "parameters": [
            "CertPathParameters"
        ],
        "comments": "The default constructor."
    },
    {
        "function": "engineGetRevocationChecker",
        "parameters": [
            ""
        ],
        "comments": "Attempts to build a certification path using the specified algorithm parameter set."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a CertPathValidator object of the given algorithm, and encapsulates the given provider implementation (SPI object) in it."
    },
    {
        "function": "getDefaultType",
        "parameters": [
            ""
        ],
        "comments": "Returns the algorithm name of this CertPathValidator."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string \"PKIX\" if no such property exists."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a CertPathValidator object that implements the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a CertPathValidator object that implements the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a CertPathValidator object that implements the specified algorithm."
    },
    {
        "function": "getRevocationChecker",
        "parameters": [
            ""
        ],
        "comments": "Returns the Provider of this CertPathValidator."
    },
    {
        "function": "validate",
        "parameters": [
            "CertPath",
            "CertPathParameters"
        ],
        "comments": "Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates."
    },
    {
        "function": "engineGetRevocationChecker",
        "parameters": [
            ""
        ],
        "comments": "The default constructor."
    },
    {
        "function": "engineValidate",
        "parameters": [
            "CertPath",
            "CertPathParameters"
        ],
        "comments": "Returns a CertPathChecker that this implementation uses to check the revocation status of certificates."
    },
    {
        "function": "getCertificates",
        "parameters": [
            "CertSelector"
        ],
        "comments": "Creates a CertStore object of the given type, and encapsulates the given provider implementation (SPI object) in it."
    },
    {
        "function": "getCertStoreParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collection of Certificates that match the specified selector."
    },
    {
        "function": "getCRLs",
        "parameters": [
            "CRLSelector"
        ],
        "comments": "Returns the parameters used to initialize this CertStore."
    },
    {
        "function": "getDefaultType",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collection of CRLs that match the specified selector."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "CertStoreParameters"
        ],
        "comments": "Returns the default CertStore type as specified by the certstore.type security property, or the string \"LDAP\" if no such property exists."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "CertStoreParameters",
            "String"
        ],
        "comments": "Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "CertStoreParameters",
            "Provider"
        ],
        "comments": "Returns a CertStore object that implements the specified CertStore type."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a CertStore object that implements the specified CertStore type."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this CertStore."
    },
    {
        "function": "engineGetCertificates",
        "parameters": [
            "CertSelector"
        ],
        "comments": "The sole constructor."
    },
    {
        "function": "engineGetCRLs",
        "parameters": [
            "CRLSelector"
        ],
        "comments": "Returns a Collection of Certificates that match the specified selector."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of CollectionCertStoreParameters with the default parameter values (an empty and immutable Collection)."
    },
    {
        "function": "getCollection",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of CollectionCertStoreParameters which will allow certificates and CRLs to be retrieved from the specified Collection."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Creates a CRL of the specified type."
    },
    {
        "function": "isRevoked",
        "parameters": [
            "Certificate"
        ],
        "comments": "Returns the type of this CRL."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Checks whether the given certificate is on this CRL."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of LDAPCertStoreParameters with the default parameter values (server name \"localhost\", port 389)."
    },
    {
        "function": "getPort",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of LDAPCertStoreParameters with the specified server name and a default port of 389."
    },
    {
        "function": "getServerName",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of LDAPCertStoreParameters with the specified parameter values."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getMaxPathLength",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of PKIXBuilderParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore."
    },
    {
        "function": "setMaxPathLength",
        "parameters": [
            "int"
        ],
        "comments": "Creates an instance of PKIXBuilderParameters with the specified Set of most-trusted CAs."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path."
    },
    {
        "function": "getCertPath",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of PKIXCertPathBuilderResult containing the specified parameters."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the built and validated certification path."
    },
    {
        "function": "check",
        "parameters": [
            "Certificate"
        ],
        "comments": "Default constructor."
    },
    {
        "function": "check",
        "parameters": [
            "Certificate",
            "Collection<String>"
        ],
        "comments": "Performs the check(s) on the specified certificate using its internal state."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions."
    },
    {
        "function": "getSupportedExtensions",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone of this object."
    },
    {
        "function": "init",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e. recognizes, is able to process), or null if no extensions are supported."
    },
    {
        "function": "isForwardCheckingSupported",
        "parameters": [
            ""
        ],
        "comments": "Initializes the internal state of this PKIXCertPathChecker."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of PKIXCertPathValidatorResult containing the specified parameters."
    },
    {
        "function": "getPolicyTree",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm."
    },
    {
        "function": "getTrustAnchor",
        "parameters": [
            ""
        ],
        "comments": "Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path."
    },
    {
        "function": "addCertPathChecker",
        "parameters": [
            "PKIXCertPathChecker"
        ],
        "comments": "Creates an instance of PKIXParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore."
    },
    {
        "function": "addCertStore",
        "parameters": [
            "CertStore"
        ],
        "comments": "Creates an instance of PKIXParameters with the specified Set of most-trusted CAs."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Adds a PKIXCertPathChecker to the list of certification path checkers."
    },
    {
        "function": "getCertPathCheckers",
        "parameters": [
            ""
        ],
        "comments": "Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs."
    },
    {
        "function": "getCertStores",
        "parameters": [
            ""
        ],
        "comments": "Makes a copy of this PKIXParameters object."
    },
    {
        "function": "getDate",
        "parameters": [
            ""
        ],
        "comments": "Returns the List of certification path checkers."
    },
    {
        "function": "getInitialPolicies",
        "parameters": [
            ""
        ],
        "comments": "Returns an immutable List of CertStores that are used to find certificates and CRLs."
    },
    {
        "function": "getPolicyQualifiersRejected",
        "parameters": [
            ""
        ],
        "comments": "Returns the time for which the validity of the certification path should be determined."
    },
    {
        "function": "getSigProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing."
    },
    {
        "function": "getTargetCertConstraints",
        "parameters": [
            ""
        ],
        "comments": "Gets the PolicyQualifiersRejected flag."
    },
    {
        "function": "getTrustAnchors",
        "parameters": [
            ""
        ],
        "comments": "Returns the signature provider's name, or null if not set."
    },
    {
        "function": "isAnyPolicyInhibited",
        "parameters": [
            ""
        ],
        "comments": "Returns the required constraints on the target certificate."
    },
    {
        "function": "isExplicitPolicyRequired",
        "parameters": [
            ""
        ],
        "comments": "Returns an immutable Set of the most-trusted CAs."
    },
    {
        "function": "isPolicyMappingInhibited",
        "parameters": [
            ""
        ],
        "comments": "Checks whether the any policy OID should be processed if it is included in a certificate."
    },
    {
        "function": "isRevocationEnabled",
        "parameters": [
            ""
        ],
        "comments": "Checks if explicit policy is required."
    },
    {
        "function": "setAnyPolicyInhibited",
        "parameters": [
            "boolean"
        ],
        "comments": "Checks if policy mapping is inhibited."
    },
    {
        "function": "setCertPathCheckers",
        "parameters": [
            "List<PKIXCertPathChecker>"
        ],
        "comments": "Checks the RevocationEnabled flag."
    },
    {
        "function": "setCertStores",
        "parameters": [
            "List<CertStore>"
        ],
        "comments": "Sets state to determine if the any policy OID should be processed if it is included in a certificate."
    },
    {
        "function": "setDate",
        "parameters": [
            "Date"
        ],
        "comments": "Sets a List of additional certification path checkers."
    },
    {
        "function": "setExplicitPolicyRequired",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the list of CertStores to be used in finding certificates and CRLs."
    },
    {
        "function": "setInitialPolicies",
        "parameters": [
            "Set<String>"
        ],
        "comments": "Sets the time for which the validity of the certification path should be determined."
    },
    {
        "function": "setPolicyMappingInhibited",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the ExplicitPolicyRequired flag."
    },
    {
        "function": "setPolicyQualifiersRejected",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing."
    },
    {
        "function": "setRevocationEnabled",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the PolicyMappingInhibited flag."
    },
    {
        "function": "setSigProvider",
        "parameters": [
            "String"
        ],
        "comments": "Sets the PolicyQualifiersRejected flag."
    },
    {
        "function": "setTargetCertConstraints",
        "parameters": [
            "CertSelector"
        ],
        "comments": "Sets the RevocationEnabled flag."
    },
    {
        "function": "setTrustAnchors",
        "parameters": [
            "Set<TrustAnchor>"
        ],
        "comments": "Sets the signature provider's name."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the required constraints on the target certificate."
    },
    {
        "function": "getOcspExtensions",
        "parameters": [
            ""
        ],
        "comments": "Default constructor."
    },
    {
        "function": "getOcspResponder",
        "parameters": [
            ""
        ],
        "comments": "Gets the optional OCSP request extensions."
    },
    {
        "function": "getOcspResponderCert",
        "parameters": [
            ""
        ],
        "comments": "Gets the URI that identifies the location of the OCSP responder."
    },
    {
        "function": "getOcspResponses",
        "parameters": [
            ""
        ],
        "comments": "Gets the OCSP responder's certificate."
    },
    {
        "function": "getOptions",
        "parameters": [
            ""
        ],
        "comments": "Gets the OCSP responses."
    },
    {
        "function": "getSoftFailExceptions",
        "parameters": [
            ""
        ],
        "comments": "Gets the revocation options."
    },
    {
        "function": "setOcspExtensions",
        "parameters": [
            "List<Extension>"
        ],
        "comments": "Returns a list containing the exceptions that are ignored by the revocation checker when the SOFT_FAIL option is set."
    },
    {
        "function": "setOcspResponder",
        "parameters": [
            "URI"
        ],
        "comments": "Sets the optional OCSP request extensions."
    },
    {
        "function": "setOcspResponderCert",
        "parameters": [
            "X509Certificate"
        ],
        "comments": "Sets the URI that identifies the location of the OCSP responder."
    },
    {
        "function": "setOcspResponses",
        "parameters": [
            "Map<X509Certificate",
            "byte[]>"
        ],
        "comments": "Sets the OCSP responder's certificate."
    },
    {
        "function": "setOptions",
        "parameters": [
            "Set<PKIXRevocationChecker.Option>"
        ],
        "comments": "Sets the OCSP responses."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of PolicyQualifierInfo from the encoded bytes."
    },
    {
        "function": "getPolicyQualifier",
        "parameters": [
            ""
        ],
        "comments": "Returns the ASN.1 DER encoded form of this PolicyQualifierInfo."
    },
    {
        "function": "getPolicyQualifierId",
        "parameters": [
            ""
        ],
        "comments": "Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the policyQualifierId field of this PolicyQualifierInfo."
    },
    {
        "function": "getCA",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of TrustAnchor where the most-trusted CA is specified as a distinguished name and public key."
    },
    {
        "function": "getCAName",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of TrustAnchor with the specified X509Certificate and optional name constraints, which are intended to be used as additional constraints when validating an X.509 certification path."
    },
    {
        "function": "getCAPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of TrustAnchor where the most-trusted CA is specified as an X500Principal and public key."
    },
    {
        "function": "getNameConstraints",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the most-trusted CA as an X500Principal."
    },
    {
        "function": "getTrustedCert",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the most-trusted CA in RFC 2253 String format."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the public key of the most-trusted CA."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of URICertStoreParameters with the specified URI."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getURI",
        "parameters": [
            ""
        ],
        "comments": "Compares the specified object with this parameters object for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the URI used to construct this URICertStoreParameters object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for this parameters object."
    },
    {
        "function": "checkValidity",
        "parameters": [
            ""
        ],
        "comments": "Constructor for X.509 certificates."
    },
    {
        "function": "checkValidity",
        "parameters": [
            "Date"
        ],
        "comments": "Checks that the certificate is currently valid."
    },
    {
        "function": "getBasicConstraints",
        "parameters": [
            ""
        ],
        "comments": "Checks that the given date is within the certificate's validity period."
    },
    {
        "function": "getExtendedKeyUsage",
        "parameters": [
            ""
        ],
        "comments": "Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19)."
    },
    {
        "function": "getIssuerAlternativeNames",
        "parameters": [
            ""
        ],
        "comments": "Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37)."
    },
    {
        "function": "getIssuerDN",
        "parameters": [
            ""
        ],
        "comments": "Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18)."
    },
    {
        "function": "getIssuerUniqueID",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, replaced by getIssuerX500Principal()."
    },
    {
        "function": "getIssuerX500Principal",
        "parameters": [
            ""
        ],
        "comments": "Gets the issuerUniqueID value from the certificate."
    },
    {
        "function": "getKeyUsage",
        "parameters": [
            ""
        ],
        "comments": "Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal."
    },
    {
        "function": "getNotAfter",
        "parameters": [
            ""
        ],
        "comments": "Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15)."
    },
    {
        "function": "getNotBefore",
        "parameters": [
            ""
        ],
        "comments": "Gets the notAfter date from the validity period of the certificate."
    },
    {
        "function": "getSerialNumber",
        "parameters": [
            ""
        ],
        "comments": "Gets the notBefore date from the validity period of the certificate."
    },
    {
        "function": "getSigAlgName",
        "parameters": [
            ""
        ],
        "comments": "Gets the serialNumber value from the certificate."
    },
    {
        "function": "getSigAlgOID",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature algorithm name for the certificate signature algorithm."
    },
    {
        "function": "getSigAlgParams",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature algorithm OID string from the certificate."
    },
    {
        "function": "getSignature",
        "parameters": [
            ""
        ],
        "comments": "Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm."
    },
    {
        "function": "getSubjectAlternativeNames",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature value (the raw signature bits) from the certificate."
    },
    {
        "function": "getSubjectDN",
        "parameters": [
            ""
        ],
        "comments": "Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17)."
    },
    {
        "function": "getSubjectUniqueID",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, replaced by getSubjectX500Principal()."
    },
    {
        "function": "getSubjectX500Principal",
        "parameters": [
            ""
        ],
        "comments": "Gets the subjectUniqueID value from the certificate."
    },
    {
        "function": "getTBSCertificate",
        "parameters": [
            ""
        ],
        "comments": "Returns the subject (subject distinguished name) value from the certificate as an X500Principal."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Gets the DER-encoded certificate information, the tbsCertificate from this certificate."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "Provider"
        ],
        "comments": "Gets the version (version number) value from the certificate."
    },
    {
        "function": "addPathToName",
        "parameters": [
            "int",
            "byte[]"
        ],
        "comments": "Creates an X509CertSelector."
    },
    {
        "function": "addPathToName",
        "parameters": [
            "int",
            "String"
        ],
        "comments": "Adds a name to the pathToNames criterion."
    },
    {
        "function": "addSubjectAlternativeName",
        "parameters": [
            "int",
            "byte[]"
        ],
        "comments": "Adds a name to the pathToNames criterion."
    },
    {
        "function": "addSubjectAlternativeName",
        "parameters": [
            "int",
            "String"
        ],
        "comments": "Adds a name to the subjectAlternativeNames criterion."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Adds a name to the subjectAlternativeNames criterion."
    },
    {
        "function": "getAuthorityKeyIdentifier",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getBasicConstraints",
        "parameters": [
            ""
        ],
        "comments": "Returns the authorityKeyIdentifier criterion."
    },
    {
        "function": "getCertificate",
        "parameters": [
            ""
        ],
        "comments": "Returns the basic constraints constraint."
    },
    {
        "function": "getCertificateValid",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificateEquals criterion."
    },
    {
        "function": "getExtendedKeyUsage",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificateValid criterion."
    },
    {
        "function": "getIssuer",
        "parameters": [
            ""
        ],
        "comments": "Returns the extendedKeyUsage criterion."
    },
    {
        "function": "getIssuerAsBytes",
        "parameters": [
            ""
        ],
        "comments": "Returns the issuer criterion as an X500Principal."
    },
    {
        "function": "getIssuerAsString",
        "parameters": [
            ""
        ],
        "comments": "Returns the issuer criterion as a byte array."
    },
    {
        "function": "getKeyUsage",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, use getIssuer() or getIssuerAsBytes() instead."
    },
    {
        "function": "getMatchAllSubjectAltNames",
        "parameters": [
            ""
        ],
        "comments": "Returns the keyUsage criterion."
    },
    {
        "function": "getNameConstraints",
        "parameters": [
            ""
        ],
        "comments": "Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods."
    },
    {
        "function": "getPathToNames",
        "parameters": [
            ""
        ],
        "comments": "Returns the name constraints criterion."
    },
    {
        "function": "getPolicy",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the pathToNames criterion."
    },
    {
        "function": "getPrivateKeyValid",
        "parameters": [
            ""
        ],
        "comments": "Returns the policy criterion."
    },
    {
        "function": "getSerialNumber",
        "parameters": [
            ""
        ],
        "comments": "Returns the privateKeyValid criterion."
    },
    {
        "function": "getSubject",
        "parameters": [
            ""
        ],
        "comments": "Returns the serialNumber criterion."
    },
    {
        "function": "getSubjectAlternativeNames",
        "parameters": [
            ""
        ],
        "comments": "Returns the subject criterion as an X500Principal."
    },
    {
        "function": "getSubjectAsBytes",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the subjectAlternativeNames criterion."
    },
    {
        "function": "getSubjectAsString",
        "parameters": [
            ""
        ],
        "comments": "Returns the subject criterion as a byte array."
    },
    {
        "function": "getSubjectKeyIdentifier",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, use getSubject() or getSubjectAsBytes() instead."
    },
    {
        "function": "getSubjectPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Returns the subjectKeyIdentifier criterion."
    },
    {
        "function": "getSubjectPublicKeyAlgID",
        "parameters": [
            ""
        ],
        "comments": "Returns the subjectPublicKey criterion."
    },
    {
        "function": "match",
        "parameters": [
            "Certificate"
        ],
        "comments": "Returns the subjectPublicKeyAlgID criterion."
    },
    {
        "function": "setAuthorityKeyIdentifier",
        "parameters": [
            "byte[]"
        ],
        "comments": "Decides whether a Certificate should be selected."
    },
    {
        "function": "setBasicConstraints",
        "parameters": [
            "int"
        ],
        "comments": "Sets the authorityKeyIdentifier criterion."
    },
    {
        "function": "setCertificate",
        "parameters": [
            "X509Certificate"
        ],
        "comments": "Sets the basic constraints constraint."
    },
    {
        "function": "setCertificateValid",
        "parameters": [
            "Date"
        ],
        "comments": "Sets the certificateEquals criterion."
    },
    {
        "function": "setExtendedKeyUsage",
        "parameters": [
            "Set<String>"
        ],
        "comments": "Sets the certificateValid criterion."
    },
    {
        "function": "setIssuer",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the extendedKeyUsage criterion."
    },
    {
        "function": "setIssuer",
        "parameters": [
            "String"
        ],
        "comments": "Sets the issuer criterion."
    },
    {
        "function": "setIssuer",
        "parameters": [
            "X500Principal"
        ],
        "comments": "Denigrated, use setIssuer(X500Principal) or setIssuer(byte[]) instead."
    },
    {
        "function": "setKeyUsage",
        "parameters": [
            "boolean[]"
        ],
        "comments": "Sets the issuer criterion."
    },
    {
        "function": "setMatchAllSubjectAltNames",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the keyUsage criterion."
    },
    {
        "function": "setNameConstraints",
        "parameters": [
            "byte[]"
        ],
        "comments": "Enables/disables matching all of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods."
    },
    {
        "function": "setPathToNames",
        "parameters": [
            "Collection<List<?>>"
        ],
        "comments": "Sets the name constraints criterion."
    },
    {
        "function": "setPolicy",
        "parameters": [
            "Set<String>"
        ],
        "comments": "Sets the pathToNames criterion."
    },
    {
        "function": "setPrivateKeyValid",
        "parameters": [
            "Date"
        ],
        "comments": "Sets the policy constraint."
    },
    {
        "function": "setSerialNumber",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Sets the privateKeyValid criterion."
    },
    {
        "function": "setSubject",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the serialNumber criterion."
    },
    {
        "function": "setSubject",
        "parameters": [
            "String"
        ],
        "comments": "Sets the subject criterion."
    },
    {
        "function": "setSubject",
        "parameters": [
            "X500Principal"
        ],
        "comments": "Denigrated, use setSubject(X500Principal) or setSubject(byte[]) instead."
    },
    {
        "function": "setSubjectAlternativeNames",
        "parameters": [
            "Collection<List<?>>"
        ],
        "comments": "Sets the subject criterion."
    },
    {
        "function": "setSubjectKeyIdentifier",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the subjectAlternativeNames criterion."
    },
    {
        "function": "setSubjectPublicKey",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the subjectKeyIdentifier criterion."
    },
    {
        "function": "setSubjectPublicKey",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Sets the subjectPublicKey criterion."
    },
    {
        "function": "setSubjectPublicKeyAlgID",
        "parameters": [
            "String"
        ],
        "comments": "Sets the subjectPublicKey criterion."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the subjectPublicKeyAlgID criterion."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructor for X.509 CRLs."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Compares this CRL for equality with the given object."
    },
    {
        "function": "getIssuerDN",
        "parameters": [
            ""
        ],
        "comments": "Returns the ASN.1 DER-encoded form of this CRL."
    },
    {
        "function": "getIssuerX500Principal",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, replaced by getIssuerX500Principal()."
    },
    {
        "function": "getNextUpdate",
        "parameters": [
            ""
        ],
        "comments": "Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal."
    },
    {
        "function": "getRevokedCertificate",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Gets the nextUpdate date from the CRL."
    },
    {
        "function": "getRevokedCertificate",
        "parameters": [
            "X509Certificate"
        ],
        "comments": "Gets the CRL entry, if any, with the given certificate serialNumber."
    },
    {
        "function": "getRevokedCertificates",
        "parameters": [
            ""
        ],
        "comments": "Get the CRL entry, if any, for the given certificate."
    },
    {
        "function": "getSigAlgName",
        "parameters": [
            ""
        ],
        "comments": "Gets all the entries from this CRL."
    },
    {
        "function": "getSigAlgOID",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature algorithm name for the CRL signature algorithm."
    },
    {
        "function": "getSigAlgParams",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature algorithm OID string from the CRL."
    },
    {
        "function": "getSignature",
        "parameters": [
            ""
        ],
        "comments": "Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm."
    },
    {
        "function": "getTBSCertList",
        "parameters": [
            ""
        ],
        "comments": "Gets the signature value (the raw signature bits) from the CRL."
    },
    {
        "function": "getThisUpdate",
        "parameters": [
            ""
        ],
        "comments": "Gets the DER-encoded CRL information, the tbsCertList from this CRL."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Gets the thisUpdate date from the CRL."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the version (version number) value from the CRL."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Returns a hashcode value for this CRL from its encoded form."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "String"
        ],
        "comments": "Verifies that this CRL was signed using the private key that corresponds to the given public key."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "Provider"
        ],
        "comments": "Verifies that this CRL was signed using the private key that corresponds to the given public key."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this CRL entry for equality with the given object."
    },
    {
        "function": "getCertificateIssuer",
        "parameters": [
            ""
        ],
        "comments": "Get the issuer of the X509Certificate described by this entry."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE."
    },
    {
        "function": "getRevocationDate",
        "parameters": [
            ""
        ],
        "comments": "Gets the revocation date from this X509CRLEntry, the revocationDate."
    },
    {
        "function": "getRevocationReason",
        "parameters": [
            ""
        ],
        "comments": "Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry."
    },
    {
        "function": "getSerialNumber",
        "parameters": [
            ""
        ],
        "comments": "Gets the serial number from this X509CRLEntry, the userCertificate."
    },
    {
        "function": "hasExtensions",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this CRL entry has extensions."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode value for this CRL entry from its encoded form."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of this CRL entry."
    },
    {
        "function": "addIssuer",
        "parameters": [
            "X500Principal"
        ],
        "comments": "Creates an X509CRLSelector."
    },
    {
        "function": "addIssuerName",
        "parameters": [
            "byte[]"
        ],
        "comments": "Adds a name to the issuerNames criterion."
    },
    {
        "function": "addIssuerName",
        "parameters": [
            "String"
        ],
        "comments": "Adds a name to the issuerNames criterion."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Denigrated, use addIssuer(X500Principal) or addIssuerName(byte[]) instead."
    },
    {
        "function": "getCertificateChecking",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this object."
    },
    {
        "function": "getDateAndTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate being checked."
    },
    {
        "function": "getIssuerNames",
        "parameters": [
            ""
        ],
        "comments": "Returns the dateAndTime criterion."
    },
    {
        "function": "getIssuers",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the issuerNames criterion."
    },
    {
        "function": "getMaxCRL",
        "parameters": [
            ""
        ],
        "comments": "Returns the issuerNames criterion."
    },
    {
        "function": "getMinCRL",
        "parameters": [
            ""
        ],
        "comments": "Returns the maxCRLNumber criterion."
    },
    {
        "function": "match",
        "parameters": [
            "CRL"
        ],
        "comments": "Returns the minCRLNumber criterion."
    },
    {
        "function": "setCertificateChecking",
        "parameters": [
            "X509Certificate"
        ],
        "comments": "Decides whether a CRL should be selected."
    },
    {
        "function": "setDateAndTime",
        "parameters": [
            "Date"
        ],
        "comments": "Sets the certificate being checked."
    },
    {
        "function": "setIssuerNames",
        "parameters": [
            "Collection<?>"
        ],
        "comments": "Sets the dateAndTime criterion."
    },
    {
        "function": "setIssuers",
        "parameters": [
            "Collection<X500Principal>"
        ],
        "comments": "Note: use setIssuers(Collection) instead or only specify the byte array form of distinguished names when using this method."
    },
    {
        "function": "setMaxCRLNumber",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Sets the issuerNames criterion."
    },
    {
        "function": "setMinCRLNumber",
        "parameters": [
            "BigInteger"
        ],
        "comments": "Sets the maxCRLNumber criterion."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the minCRLNumber criterion."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "This reason indicates that it is known or suspected that the certificate subject's private key has been compromised."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "This reason indicates that the subject's name or other information has changed."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The certificate's key usage is invalid."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The name constraints have been violated."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Disable the fallback mechanism."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Only check the revocation status of end-entity certificates."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Returns the DSA-specific key parameters."
    },
    {
        "function": "initialize",
        "parameters": [
            "int",
            "boolean",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source."
    },
    {
        "function": "initialize",
        "parameters": [
            "DSAParams",
            "SecureRandom"
        ],
        "comments": "Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Returns the base, g."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime, p."
    },
    {
        "function": "getQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the subprime, q."
    },
    {
        "function": "getX",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the private key, x."
    },
    {
        "function": "getY",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the public key, y."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Returns the domain parameters associated with this key."
    },
    {
        "function": "getS",
        "parameters": [
            ""
        ],
        "comments": "Returns the private value S."
    },
    {
        "function": "getW",
        "parameters": [
            ""
        ],
        "comments": "Returns the public point W."
    },
    {
        "function": "getModulus",
        "parameters": [
            ""
        ],
        "comments": "Returns the modulus."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters associated with this key."
    },
    {
        "function": "getCrtCoefficient",
        "parameters": [
            ""
        ],
        "comments": "Returns the crtCoefficient."
    },
    {
        "function": "getOtherPrimeInfo",
        "parameters": [
            ""
        ],
        "comments": "Returns the otherPrimeInfo or null if there are only two prime factors (p and q)."
    },
    {
        "function": "getPrimeExponentP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentP."
    },
    {
        "function": "getPrimeExponentQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentQ."
    },
    {
        "function": "getPrimeP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeP."
    },
    {
        "function": "getPrimeQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeQ."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the public exponent."
    },
    {
        "function": "getCrtCoefficient",
        "parameters": [
            ""
        ],
        "comments": "Returns the crtCoefficient."
    },
    {
        "function": "getPrimeExponentP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentP."
    },
    {
        "function": "getPrimeExponentQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentQ."
    },
    {
        "function": "getPrimeP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeP."
    },
    {
        "function": "getPrimeQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeQ."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the public exponent."
    },
    {
        "function": "getPrivateExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the private exponent."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the public exponent."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Returns the algorithm parameters associated with the key."
    },
    {
        "function": "getScalar",
        "parameters": [
            ""
        ],
        "comments": "Get the scalar value encoded as an unpruned byte array."
    },
    {
        "function": "getU",
        "parameters": [
            ""
        ],
        "comments": "Get the u coordinate of the point."
    },
    {
        "function": "getFieldSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the field size in bits."
    },
    {
        "function": "getPrimePLength",
        "parameters": [
            ""
        ],
        "comments": "Creates a domain parameter specification for DSA parameter generation using primePLen and subprimeQLen."
    },
    {
        "function": "getSeedLength",
        "parameters": [
            ""
        ],
        "comments": "Creates a domain parameter specification for DSA parameter generation using primePLen, subprimeQLen, and seedLen."
    },
    {
        "function": "getSubprimeQLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Creates a new DSAParameterSpec with the specified parameter values."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base g."
    },
    {
        "function": "getQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime p."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Creates a new DSAPrivateKeySpec with the specified parameter values."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base g."
    },
    {
        "function": "getQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime p."
    },
    {
        "function": "getX",
        "parameters": [
            ""
        ],
        "comments": "Returns the sub-prime q."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Creates a new DSAPublicKeySpec with the specified parameter values."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base g."
    },
    {
        "function": "getQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime p."
    },
    {
        "function": "getY",
        "parameters": [
            ""
        ],
        "comments": "Returns the sub-prime q."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an elliptic curve characteristic 2 finite field which has 2^m elements with normal basis."
    },
    {
        "function": "getFieldSize",
        "parameters": [
            ""
        ],
        "comments": "Creates an elliptic curve characteristic 2 finite field which has 2^m elements with polynomial basis."
    },
    {
        "function": "getM",
        "parameters": [
            ""
        ],
        "comments": "Creates an elliptic curve characteristic 2 finite field which has 2^m elements with polynomial basis."
    },
    {
        "function": "getMidTermsOfReductionPolynomial",
        "parameters": [
            ""
        ],
        "comments": "Compares this finite field for equality with the specified object."
    },
    {
        "function": "getReductionPolynomial",
        "parameters": [
            ""
        ],
        "comments": "Returns the field size in bits which is m for this characteristic 2 finite field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the value m of this characteristic 2 finite field."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an elliptic curve prime finite field with the specified prime p."
    },
    {
        "function": "getFieldSize",
        "parameters": [
            ""
        ],
        "comments": "Compares this prime finite field for equality with the specified object."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the field size in bits which is size of prime p for this prime finite field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime p of this prime finite field."
    },
    {
        "function": "getCofactor",
        "parameters": [
            ""
        ],
        "comments": "Creates elliptic curve domain parameters based on the specified values."
    },
    {
        "function": "getCurve",
        "parameters": [
            ""
        ],
        "comments": "Returns the cofactor."
    },
    {
        "function": "getGenerator",
        "parameters": [
            ""
        ],
        "comments": "Returns the elliptic curve that this parameter defines."
    },
    {
        "function": "getOrder",
        "parameters": [
            ""
        ],
        "comments": "Returns the generator which is also known as the base point."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an ECPoint from the specified affine x-coordinate x and affine y-coordinate y."
    },
    {
        "function": "getAffineX",
        "parameters": [
            ""
        ],
        "comments": "Compares this elliptic curve point for equality with the specified object."
    },
    {
        "function": "getAffineY",
        "parameters": [
            ""
        ],
        "comments": "Returns the affine x-coordinate x."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the affine y-coordinate y."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ECPrivateKeySpec with the specified parameter values."
    },
    {
        "function": "getS",
        "parameters": [
            ""
        ],
        "comments": "Returns the associated elliptic curve domain parameters."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ECPublicKeySpec with the specified parameter values."
    },
    {
        "function": "getW",
        "parameters": [
            ""
        ],
        "comments": "Returns the associated elliptic curve domain parameters."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an elliptic curve with the specified elliptic field field and the coefficients a and b."
    },
    {
        "function": "getA",
        "parameters": [
            ""
        ],
        "comments": "Creates an elliptic curve with the specified elliptic field field, the coefficients a and b, and the seed used for curve generation."
    },
    {
        "function": "getB",
        "parameters": [
            ""
        ],
        "comments": "Compares this elliptic curve for equality with the specified object."
    },
    {
        "function": "getField",
        "parameters": [
            ""
        ],
        "comments": "Returns the first coefficient a of the elliptic curve."
    },
    {
        "function": "getSeed",
        "parameters": [
            ""
        ],
        "comments": "Returns the second coefficient b of the elliptic curve."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the finite field field that this elliptic curve is over."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a new EncodedKeySpec with the given encoded key."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Creates a new EncodedKeySpec with the given encoded key."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the algorithm of the encoded key."
    },
    {
        "function": "getDigestAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for mask generation function MGF1 as defined in the PKCS #1 standard."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Creates a parameter specification using a standard (or predefined) name stdName."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PKCS8EncodedKeySpec with the given encoded key."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PKCS8EncodedKeySpec with the given encoded key and algorithm."
    },
    {
        "function": "getDigestAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PSSParameterSpec using the specified salt length and other default values as defined in PKCS#1."
    },
    {
        "function": "getMGFAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a new PSSParameterSpec as defined in the PKCS #1 standard using the specified message digest, mask generation function, parameters for mask generation function, salt length, and trailer field values."
    },
    {
        "function": "getMGFParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the message digest algorithm name."
    },
    {
        "function": "getSaltLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the mask generation function algorithm name."
    },
    {
        "function": "getTrailerField",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters for the mask generation function."
    },
    {
        "function": "getKeyParams",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new RSAKeyGenParameterSpec object from the given keysize, public-exponent value, and null key parameters."
    },
    {
        "function": "getKeysize",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new RSAKeyGenParameterSpec object from the given keysize, public-exponent value, and key parameters."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters to be associated with key."
    },
    {
        "function": "getCrtCoefficient",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAMultiPrimePrivateCrtKeySpec."
    },
    {
        "function": "getOtherPrimeInfo",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAMultiPrimePrivateCrtKeySpec with additional key parameters."
    },
    {
        "function": "getPrimeExponentP",
        "parameters": [
            ""
        ],
        "comments": "Returns the crtCoefficient."
    },
    {
        "function": "getPrimeExponentQ",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q)."
    },
    {
        "function": "getPrimeP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentP."
    },
    {
        "function": "getPrimeQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentQ."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeP."
    },
    {
        "function": "getCrtCoefficient",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAOtherPrimeInfo given the prime, primeExponent, and crtCoefficient as defined in PKCS#1."
    },
    {
        "function": "getExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime's crtCoefficient."
    },
    {
        "function": "getPrime",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime's exponent."
    },
    {
        "function": "getCrtCoefficient",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPrivateCrtKeySpec."
    },
    {
        "function": "getPrimeExponentP",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPrivateCrtKeySpec with additional key parameters."
    },
    {
        "function": "getPrimeExponentQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the crtCoefficient."
    },
    {
        "function": "getPrimeP",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentP."
    },
    {
        "function": "getPrimeQ",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeExponentQ."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the primeP."
    },
    {
        "function": "getModulus",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPrivateKeySpec."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPrivateKeySpec with additional key parameters."
    },
    {
        "function": "getPrivateExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the modulus."
    },
    {
        "function": "getModulus",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPublicKeySpec."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Creates a new RSAPublicKeySpec with additional key parameters."
    },
    {
        "function": "getPublicExponent",
        "parameters": [
            ""
        ],
        "comments": "Returns the modulus."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Creates a new X509EncodedKeySpec with the given encoded key."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Creates a new X509EncodedKeySpec with the given encoded key."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Construct a private key spec using the supplied parameters and encoded scalar value."
    },
    {
        "function": "getScalar",
        "parameters": [
            ""
        ],
        "comments": "Get the algorithm parameters that define the curve and other settings."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Construct a public key spec using the supplied parameters and u coordinate."
    },
    {
        "function": "getU",
        "parameters": [
            ""
        ],
        "comments": "Get the algorithm parameters that define the curve and other settings."
    },
    {
        "function": "getAllAttributeKeys",
        "parameters": [
            ""
        ],
        "comments": "Returns the keys of all attributes defined on the iterator's text range."
    },
    {
        "function": "getAttribute",
        "parameters": [
            "AttributedCharacterIterator.Attribute"
        ],
        "comments": "Returns the value of the named attribute for the current character."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": "Returns a map with the attributes defined on the current character."
    },
    {
        "function": "getRunLimit",
        "parameters": [
            ""
        ],
        "comments": "Returns the index of the first character following the run with respect to all attributes containing the current character."
    },
    {
        "function": "getRunLimit",
        "parameters": [
            "AttributedCharacterIterator.Attribute"
        ],
        "comments": "Returns the index of the first character following the run with respect to the given attribute containing the current character."
    },
    {
        "function": "getRunLimit",
        "parameters": [
            "Set<?"
        ],
        "comments": "Returns the index of the first character following the run with respect to the given attributes containing the current character."
    },
    {
        "function": "getRunStart",
        "parameters": [
            ""
        ],
        "comments": "Returns the index of the first character of the run with respect to all attributes containing the current character."
    },
    {
        "function": "getRunStart",
        "parameters": [
            "AttributedCharacterIterator.Attribute"
        ],
        "comments": "Returns the index of the first character of the run with respect to the given attribute containing the current character."
    },
    {
        "function": "getRunStart",
        "parameters": [
            "Set<?"
        ],
        "comments": "Returns the index of the first character of the run with respect to the given attributes containing the current character."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Create a copy of this iterator"
    },
    {
        "function": "current",
        "parameters": [
            ""
        ],
        "comments": "Gets the character at the current position (as returned by getIndex())."
    },
    {
        "function": "first",
        "parameters": [
            ""
        ],
        "comments": "Sets the position to getBeginIndex() and returns the character at that position."
    },
    {
        "function": "getBeginIndex",
        "parameters": [
            ""
        ],
        "comments": "Returns the start index of the text."
    },
    {
        "function": "getEndIndex",
        "parameters": [
            ""
        ],
        "comments": "Returns the end index of the text."
    },
    {
        "function": "getIndex",
        "parameters": [
            ""
        ],
        "comments": "Returns the current index."
    },
    {
        "function": "last",
        "parameters": [
            ""
        ],
        "comments": "Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Increments the iterator's index by one and returns the character at the new index."
    },
    {
        "function": "previous",
        "parameters": [
            ""
        ],
        "comments": "Decrements the iterator's index by one and returns the character at the new index."
    },
    {
        "function": "setIndex",
        "parameters": [
            "int"
        ],
        "comments": "Sets the position to the specified position in the text and returns that character."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Constructs an annotation record with the given value, which may be null."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the attribute, which may be null."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs an Attribute with the given name."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Compares two objects for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the attribute."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for the object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Resolves instances being deserialized to the predefined constants."
    },
    {
        "function": "addAttribute",
        "parameters": [
            "AttributedCharacterIterator.Attribute",
            "Object"
        ],
        "comments": "Constructs an AttributedString instance with the given text."
    },
    {
        "function": "addAttribute",
        "parameters": [
            "AttributedCharacterIterator.Attribute",
            "Object",
            "int",
            "int"
        ],
        "comments": "Constructs an AttributedString instance with the given text and attributes."
    },
    {
        "function": "addAttributes",
        "parameters": [
            "Map<?",
            "?>",
            "int",
            "int"
        ],
        "comments": "Constructs an AttributedString instance with the given attributed text represented by AttributedCharacterIterator."
    },
    {
        "function": "getIterator",
        "parameters": [
            ""
        ],
        "comments": "Constructs an AttributedString instance with the subrange of the given attributed text represented by AttributedCharacterIterator."
    },
    {
        "function": "getIterator",
        "parameters": [
            "AttributedCharacterIterator.Attribute[]"
        ],
        "comments": "Constructs an AttributedString instance with the subrange of the given attributed text represented by AttributedCharacterIterator."
    },
    {
        "function": "getIterator",
        "parameters": [
            "AttributedCharacterIterator.Attribute[]",
            "int",
            "int"
        ],
        "comments": "Adds an attribute to the entire string."
    },
    {
        "function": "baseIsLeftToRight",
        "parameters": [
            ""
        ],
        "comments": "Create Bidi from the given text, embedding, and direction information."
    },
    {
        "function": "createLineBidi",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Create Bidi from the given paragraph of text and base direction."
    },
    {
        "function": "getBaseLevel",
        "parameters": [
            ""
        ],
        "comments": "Create Bidi from the given paragraph of text."
    },
    {
        "function": "getLength",
        "parameters": [
            ""
        ],
        "comments": "Return true if the base direction is left-to-right."
    },
    {
        "function": "getLevelAt",
        "parameters": [
            "int"
        ],
        "comments": "Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi."
    },
    {
        "function": "getRunCount",
        "parameters": [
            ""
        ],
        "comments": "Return the base level (0 if left-to-right, 1 if right-to-left)."
    },
    {
        "function": "getRunLevel",
        "parameters": [
            "int"
        ],
        "comments": "Return the length of text in the line."
    },
    {
        "function": "getRunLimit",
        "parameters": [
            "int"
        ],
        "comments": "Return the resolved level of the character at offset."
    },
    {
        "function": "getRunStart",
        "parameters": [
            "int"
        ],
        "comments": "Return the number of level runs."
    },
    {
        "function": "isLeftToRight",
        "parameters": [
            ""
        ],
        "comments": "Return the level of the nth logical run in this line."
    },
    {
        "function": "isMixed",
        "parameters": [
            ""
        ],
        "comments": "Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line."
    },
    {
        "function": "isRightToLeft",
        "parameters": [
            ""
        ],
        "comments": "Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line."
    },
    {
        "function": "reorderVisually",
        "parameters": [
            "byte[]",
            "int",
            "Object[]",
            "int",
            "int"
        ],
        "comments": "Return true if the line is all left-to-right text and the base direction is left-to-right."
    },
    {
        "function": "requiresBidi",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Return true if the line is not left-to-right or right-to-left."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Return true if the line is all right-to-left text, and the base direction is right-to-left."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructor."
    },
    {
        "function": "current",
        "parameters": [
            ""
        ],
        "comments": "Create a copy of this iterator"
    },
    {
        "function": "first",
        "parameters": [
            ""
        ],
        "comments": "Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)."
    },
    {
        "function": "following",
        "parameters": [
            "int"
        ],
        "comments": "Returns the first boundary."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Returns the first boundary following the specified character offset."
    },
    {
        "function": "getCharacterInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances."
    },
    {
        "function": "getCharacterInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for character breaks for the default locale."
    },
    {
        "function": "getLineInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a new BreakIterator instance for character breaks for the given locale."
    },
    {
        "function": "getLineInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for line breaks for the default locale."
    },
    {
        "function": "getSentenceInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a new BreakIterator instance for line breaks for the given locale."
    },
    {
        "function": "getSentenceInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for sentence breaks for the default locale."
    },
    {
        "function": "getText",
        "parameters": [
            ""
        ],
        "comments": "Returns a new BreakIterator instance for sentence breaks for the given locale."
    },
    {
        "function": "getWordInstance",
        "parameters": [
            ""
        ],
        "comments": "Get the text being scanned"
    },
    {
        "function": "getWordInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for word breaks for the default locale."
    },
    {
        "function": "isBoundary",
        "parameters": [
            "int"
        ],
        "comments": "Returns a new BreakIterator instance for word breaks for the given locale."
    },
    {
        "function": "last",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified character offset is a text boundary."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Returns the last boundary."
    },
    {
        "function": "next",
        "parameters": [
            "int"
        ],
        "comments": "Returns the boundary following the current boundary."
    },
    {
        "function": "preceding",
        "parameters": [
            "int"
        ],
        "comments": "Returns the nth boundary from the current boundary."
    },
    {
        "function": "previous",
        "parameters": [
            ""
        ],
        "comments": "Returns the last boundary preceding the specified character offset."
    },
    {
        "function": "setText",
        "parameters": [
            "String"
        ],
        "comments": "Returns the boundary preceding the current boundary."
    },
    {
        "function": "setText",
        "parameters": [
            "CharacterIterator"
        ],
        "comments": "Set a new text string to be scanned."
    },
    {
        "function": "applyPattern",
        "parameters": [
            "String"
        ],
        "comments": "Constructs with the limits and the corresponding formats."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs with limits and corresponding formats based on the pattern."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Sets the pattern."
    },
    {
        "function": "format",
        "parameters": [
            "double",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Overrides Cloneable"
    },
    {
        "function": "format",
        "parameters": [
            "long",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Equality comparison between two"
    },
    {
        "function": "getFormats",
        "parameters": [
            ""
        ],
        "comments": "Returns pattern with formatted double."
    },
    {
        "function": "getLimits",
        "parameters": [
            ""
        ],
        "comments": "Specialization of format."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Get the formats passed in the constructor."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double"
        ],
        "comments": "Get the limits passed in the constructor."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double",
            "boolean"
        ],
        "comments": "Generates a hash code for the message format object."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Finds the least double greater than d."
    },
    {
        "function": "previousDouble",
        "parameters": [
            "double"
        ],
        "comments": "Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false)."
    },
    {
        "function": "setChoices",
        "parameters": [
            "double[]",
            "String[]"
        ],
        "comments": "Parses a Number from the input text."
    },
    {
        "function": "toPattern",
        "parameters": [
            ""
        ],
        "comments": "Finds the greatest double less than d."
    },
    {
        "function": "getMaxExpansion",
        "parameters": [
            "int"
        ],
        "comments": "Return the maximum length of any expansion sequences that end with the specified comparison order."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the character offset in the original text corresponding to the next collation element."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Get the next collation element in the string."
    },
    {
        "function": "previous",
        "parameters": [
            ""
        ],
        "comments": "Get the previous collation element in the string."
    },
    {
        "function": "primaryOrder",
        "parameters": [
            "int"
        ],
        "comments": "Return the primary component of a collation element."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Resets the cursor to the beginning of the string."
    },
    {
        "function": "secondaryOrder",
        "parameters": [
            "int"
        ],
        "comments": "Return the secondary component of a collation element."
    },
    {
        "function": "setOffset",
        "parameters": [
            "int"
        ],
        "comments": "Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements)."
    },
    {
        "function": "setText",
        "parameters": [
            "String"
        ],
        "comments": "Set a new string over which to iterate."
    },
    {
        "function": "setText",
        "parameters": [
            "CharacterIterator"
        ],
        "comments": "Set a new string over which to iterate."
    },
    {
        "function": "tertiaryOrder",
        "parameters": [
            "int"
        ],
        "comments": "Return the tertiary component of a collation element."
    },
    {
        "function": "compareTo",
        "parameters": [
            "CollationKey"
        ],
        "comments": "CollationKey constructor."
    },
    {
        "function": "getSourceString",
        "parameters": [
            ""
        ],
        "comments": "Compare this CollationKey to the target CollationKey."
    },
    {
        "function": "toByteArray",
        "parameters": [
            ""
        ],
        "comments": "Returns the String that this CollationKey represents."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Default constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Overrides Cloneable"
    },
    {
        "function": "compare",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Compares its two arguments for order."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the source string to the target string according to the collation rules for this Collator."
    },
    {
        "function": "equals",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Compares the equality of two Collators."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Convenience method for comparing the equality of two strings based on this Collator's collation rules."
    },
    {
        "function": "getCollationKey",
        "parameters": [
            "String"
        ],
        "comments": "Returns an array of all locales for which the getInstance methods of this class can return localized instances."
    },
    {
        "function": "getDecomposition",
        "parameters": [
            ""
        ],
        "comments": "Transforms the String into a series of bits that can be compared bitwise to other CollationKeys."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Get the decomposition mode of this Collator."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the Collator for the current default locale."
    },
    {
        "function": "getStrength",
        "parameters": [
            ""
        ],
        "comments": "Gets the Collator for the desired locale."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns this Collator's strength property."
    },
    {
        "function": "setDecomposition",
        "parameters": [
            "int"
        ],
        "comments": "Generates the hash code for this Collator."
    },
    {
        "function": "setStrength",
        "parameters": [
            "int"
        ],
        "comments": "Set the decomposition mode of this Collator."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Create a new date format."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Overrides Cloneable"
    },
    {
        "function": "format",
        "parameters": [
            "Object",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Overrides equals"
    },
    {
        "function": "format",
        "parameters": [
            "Date"
        ],
        "comments": "Formats the given Object into a date-time string."
    },
    {
        "function": "format",
        "parameters": [
            "Date",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Formats a Date into a date-time string."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Formats a Date into a date-time string."
    },
    {
        "function": "getCalendar",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances."
    },
    {
        "function": "getDateInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar associated with this date/time formatter."
    },
    {
        "function": "getDateInstance",
        "parameters": [
            "int"
        ],
        "comments": "Gets the date formatter with the default formatting style for the default FORMAT locale."
    },
    {
        "function": "getDateInstance",
        "parameters": [
            "int",
            "Locale"
        ],
        "comments": "Gets the date formatter with the given formatting style for the default FORMAT locale."
    },
    {
        "function": "getDateTimeInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the date formatter with the given formatting style for the given locale."
    },
    {
        "function": "getDateTimeInstance",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Gets the date/time formatter with the default formatting style for the default FORMAT locale."
    },
    {
        "function": "getDateTimeInstance",
        "parameters": [
            "int",
            "int",
            "Locale"
        ],
        "comments": "Gets the date/time formatter with the given date and time formatting styles for the default FORMAT locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the date/time formatter with the given formatting styles for the given locale."
    },
    {
        "function": "getNumberFormat",
        "parameters": [
            ""
        ],
        "comments": "Get a default date/time formatter that uses the SHORT style for both the date and the time."
    },
    {
        "function": "getTimeInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the number formatter which this date/time formatter uses to format and parse a time."
    },
    {
        "function": "getTimeInstance",
        "parameters": [
            "int"
        ],
        "comments": "Gets the time formatter with the default formatting style for the default FORMAT locale."
    },
    {
        "function": "getTimeInstance",
        "parameters": [
            "int",
            "Locale"
        ],
        "comments": "Gets the time formatter with the given formatting style for the default FORMAT locale."
    },
    {
        "function": "getTimeZone",
        "parameters": [
            ""
        ],
        "comments": "Gets the time formatter with the given formatting style for the given locale."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the time zone."
    },
    {
        "function": "isLenient",
        "parameters": [
            ""
        ],
        "comments": "Overrides hashCode"
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Tell whether date/time parsing is to be lenient."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Parses text from the beginning of the given string to produce a date."
    },
    {
        "function": "parseObject",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Parse a date/time string according to the given parse position."
    },
    {
        "function": "setCalendar",
        "parameters": [
            "Calendar"
        ],
        "comments": "Parses text from a string to produce a Date."
    },
    {
        "function": "setLenient",
        "parameters": [
            "boolean"
        ],
        "comments": "Set the calendar to be used by this date format."
    },
    {
        "function": "setNumberFormat",
        "parameters": [
            "NumberFormat"
        ],
        "comments": "Specify whether or not date/time parsing is to be lenient."
    },
    {
        "function": "setTimeZone",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Allows you to set the number formatter."
    },
    {
        "function": "getCalendarField",
        "parameters": [
            ""
        ],
        "comments": "Creates a Field."
    },
    {
        "function": "ofCalendarField",
        "parameters": [
            "int"
        ],
        "comments": "Returns the Calendar field associated with this attribute."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Returns the Field constant that corresponds to the Calendar constant calendarField."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Construct a DateFormatSymbols object by loading format data from resources for the default FORMAT locale."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Construct a DateFormatSymbols object by loading format data from resources for the given locale."
    },
    {
        "function": "getAmPmStrings",
        "parameters": [
            ""
        ],
        "comments": "Overrides Cloneable"
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Override equals"
    },
    {
        "function": "getEras",
        "parameters": [
            ""
        ],
        "comments": "Gets ampm strings."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of all locales for which the getInstance methods of this class can return localized instances."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets era strings."
    },
    {
        "function": "getLocalPatternChars",
        "parameters": [
            ""
        ],
        "comments": "Gets the DateFormatSymbols instance for the default locale."
    },
    {
        "function": "getMonths",
        "parameters": [
            ""
        ],
        "comments": "Gets the DateFormatSymbols instance for the specified locale."
    },
    {
        "function": "getShortMonths",
        "parameters": [
            ""
        ],
        "comments": "Gets localized date-time pattern characters."
    },
    {
        "function": "getShortWeekdays",
        "parameters": [
            ""
        ],
        "comments": "Gets month strings."
    },
    {
        "function": "getWeekdays",
        "parameters": [
            ""
        ],
        "comments": "Gets short month strings."
    },
    {
        "function": "getZoneStrings",
        "parameters": [
            ""
        ],
        "comments": "Gets short weekday strings."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets weekday strings."
    },
    {
        "function": "setAmPmStrings",
        "parameters": [
            "String[]"
        ],
        "comments": "Gets time zone strings."
    },
    {
        "function": "setEras",
        "parameters": [
            "String[]"
        ],
        "comments": "Override hashCode."
    },
    {
        "function": "setLocalPatternChars",
        "parameters": [
            "String"
        ],
        "comments": "Sets ampm strings."
    },
    {
        "function": "setMonths",
        "parameters": [
            "String[]"
        ],
        "comments": "Sets era strings."
    },
    {
        "function": "setShortMonths",
        "parameters": [
            "String[]"
        ],
        "comments": "Sets localized date-time pattern characters."
    },
    {
        "function": "setShortWeekdays",
        "parameters": [
            "String[]"
        ],
        "comments": "Sets month strings."
    },
    {
        "function": "setWeekdays",
        "parameters": [
            "String[]"
        ],
        "comments": "Sets short month strings."
    },
    {
        "function": "setZoneStrings",
        "parameters": [
            "String[][]"
        ],
        "comments": "Sets short weekday strings."
    },
    {
        "function": "applyLocalizedPattern",
        "parameters": [
            "String"
        ],
        "comments": "Creates a DecimalFormat using the default pattern and symbols for the default FORMAT locale."
    },
    {
        "function": "applyPattern",
        "parameters": [
            "String"
        ],
        "comments": "Creates a DecimalFormat using the given pattern and the symbols for the default FORMAT locale."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates a DecimalFormat using the given pattern and symbols."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Apply the given pattern to this Format object."
    },
    {
        "function": "format",
        "parameters": [
            "double",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Apply the given pattern to this Format object."
    },
    {
        "function": "format",
        "parameters": [
            "long",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Standard override; no change in semantics."
    },
    {
        "function": "format",
        "parameters": [
            "Object",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Overrides equals"
    },
    {
        "function": "formatToCharacterIterator",
        "parameters": [
            "Object"
        ],
        "comments": "Formats a double to produce a string."
    },
    {
        "function": "getCurrency",
        "parameters": [
            ""
        ],
        "comments": "Format a long to produce a string."
    },
    {
        "function": "getDecimalFormatSymbols",
        "parameters": [
            ""
        ],
        "comments": "Formats a number and appends the resulting text to the given string buffer."
    },
    {
        "function": "getGroupingSize",
        "parameters": [
            ""
        ],
        "comments": "Formats an Object producing an AttributedCharacterIterator."
    },
    {
        "function": "getMaximumFractionDigits",
        "parameters": [
            ""
        ],
        "comments": "Gets the currency used by this decimal format when formatting currency values."
    },
    {
        "function": "getMaximumIntegerDigits",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user."
    },
    {
        "function": "getMinimumFractionDigits",
        "parameters": [
            ""
        ],
        "comments": "Return the grouping size."
    },
    {
        "function": "getMinimumIntegerDigits",
        "parameters": [
            ""
        ],
        "comments": "Gets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "getMultiplier",
        "parameters": [
            ""
        ],
        "comments": "Gets the maximum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "getNegativePrefix",
        "parameters": [
            ""
        ],
        "comments": "Gets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "getNegativeSuffix",
        "parameters": [
            ""
        ],
        "comments": "Gets the minimum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "getPositivePrefix",
        "parameters": [
            ""
        ],
        "comments": "Gets the multiplier for use in percent, per mille, and similar formats."
    },
    {
        "function": "getPositiveSuffix",
        "parameters": [
            ""
        ],
        "comments": "Get the negative prefix."
    },
    {
        "function": "getRoundingMode",
        "parameters": [
            ""
        ],
        "comments": "Get the negative suffix."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Get the positive prefix."
    },
    {
        "function": "isDecimalSeparatorAlwaysShown",
        "parameters": [
            ""
        ],
        "comments": "Get the positive suffix."
    },
    {
        "function": "isParseBigDecimal",
        "parameters": [
            ""
        ],
        "comments": "Gets the RoundingMode used in this DecimalFormat."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Overrides hashCode"
    },
    {
        "function": "setCurrency",
        "parameters": [
            "Currency"
        ],
        "comments": "Allows you to get the behavior of the decimal separator with integers."
    },
    {
        "function": "setDecimalFormatSymbols",
        "parameters": [
            "DecimalFormatSymbols"
        ],
        "comments": "Returns whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal."
    },
    {
        "function": "setDecimalSeparatorAlwaysShown",
        "parameters": [
            "boolean"
        ],
        "comments": "Parses text from a string to produce a Number."
    },
    {
        "function": "setGroupingSize",
        "parameters": [
            "int"
        ],
        "comments": "Sets the currency used by this number format when formatting currency values."
    },
    {
        "function": "setMaximumFractionDigits",
        "parameters": [
            "int"
        ],
        "comments": "Sets the decimal format symbols, which is generally not changed by the programmer or user."
    },
    {
        "function": "setMaximumIntegerDigits",
        "parameters": [
            "int"
        ],
        "comments": "Allows you to set the behavior of the decimal separator with integers."
    },
    {
        "function": "setMinimumFractionDigits",
        "parameters": [
            "int"
        ],
        "comments": "Set the grouping size."
    },
    {
        "function": "setMinimumIntegerDigits",
        "parameters": [
            "int"
        ],
        "comments": "Sets the maximum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "setMultiplier",
        "parameters": [
            "int"
        ],
        "comments": "Sets the maximum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "setNegativePrefix",
        "parameters": [
            "String"
        ],
        "comments": "Sets the minimum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "setNegativeSuffix",
        "parameters": [
            "String"
        ],
        "comments": "Sets the minimum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "setParseBigDecimal",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the multiplier for use in percent, per mille, and similar formats."
    },
    {
        "function": "setPositivePrefix",
        "parameters": [
            "String"
        ],
        "comments": "Set the negative prefix."
    },
    {
        "function": "setPositiveSuffix",
        "parameters": [
            "String"
        ],
        "comments": "Set the negative suffix."
    },
    {
        "function": "setRoundingMode",
        "parameters": [
            "RoundingMode"
        ],
        "comments": "Sets whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal."
    },
    {
        "function": "toLocalizedPattern",
        "parameters": [
            ""
        ],
        "comments": "Set the positive prefix."
    },
    {
        "function": "toPattern",
        "parameters": [
            ""
        ],
        "comments": "Set the positive suffix."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Create a DecimalFormatSymbols object for the default FORMAT locale."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Create a DecimalFormatSymbols object for the given locale."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Standard override."
    },
    {
        "function": "getCurrency",
        "parameters": [
            ""
        ],
        "comments": "Override equals."
    },
    {
        "function": "getCurrencySymbol",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of all locales for which the getInstance methods of this class can return localized instances."
    },
    {
        "function": "getDecimalSeparator",
        "parameters": [
            ""
        ],
        "comments": "Gets the currency of these DecimalFormatSymbols."
    },
    {
        "function": "getDigit",
        "parameters": [
            ""
        ],
        "comments": "Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale."
    },
    {
        "function": "getExponentSeparator",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used for decimal sign."
    },
    {
        "function": "getGroupingSeparator",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used for a digit in a pattern."
    },
    {
        "function": "getInfinity",
        "parameters": [
            ""
        ],
        "comments": "Returns the string used to separate the mantissa from the exponent."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used for thousands separator."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the string used to represent infinity."
    },
    {
        "function": "getInternationalCurrencySymbol",
        "parameters": [
            ""
        ],
        "comments": "Gets the DecimalFormatSymbols instance for the default locale."
    },
    {
        "function": "getMinusSign",
        "parameters": [
            ""
        ],
        "comments": "Gets the DecimalFormatSymbols instance for the specified locale."
    },
    {
        "function": "getMonetaryDecimalSeparator",
        "parameters": [
            ""
        ],
        "comments": "Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols."
    },
    {
        "function": "getNaN",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used to represent minus sign."
    },
    {
        "function": "getPatternSeparator",
        "parameters": [
            ""
        ],
        "comments": "Returns the monetary decimal separator."
    },
    {
        "function": "getPercent",
        "parameters": [
            ""
        ],
        "comments": "Gets the string used to represent \"not a number\"."
    },
    {
        "function": "getPerMill",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used to separate positive and negative subpatterns in a pattern."
    },
    {
        "function": "getZeroDigit",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used for percent sign."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the character used for per mille sign."
    },
    {
        "function": "setCurrency",
        "parameters": [
            "Currency"
        ],
        "comments": "Gets the character used for zero."
    },
    {
        "function": "setCurrencySymbol",
        "parameters": [
            "String"
        ],
        "comments": "Override hashCode."
    },
    {
        "function": "setDecimalSeparator",
        "parameters": [
            "char"
        ],
        "comments": "Sets the currency of these DecimalFormatSymbols."
    },
    {
        "function": "setDigit",
        "parameters": [
            "char"
        ],
        "comments": "Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale."
    },
    {
        "function": "setExponentSeparator",
        "parameters": [
            "String"
        ],
        "comments": "Sets the character used for decimal sign."
    },
    {
        "function": "setGroupingSeparator",
        "parameters": [
            "char"
        ],
        "comments": "Sets the character used for a digit in a pattern."
    },
    {
        "function": "setInfinity",
        "parameters": [
            "String"
        ],
        "comments": "Sets the string used to separate the mantissa from the exponent."
    },
    {
        "function": "setInternationalCurrencySymbol",
        "parameters": [
            "String"
        ],
        "comments": "Sets the character used for thousands separator."
    },
    {
        "function": "setMinusSign",
        "parameters": [
            "char"
        ],
        "comments": "Sets the string used to represent infinity."
    },
    {
        "function": "setMonetaryDecimalSeparator",
        "parameters": [
            "char"
        ],
        "comments": "Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols."
    },
    {
        "function": "setNaN",
        "parameters": [
            "String"
        ],
        "comments": "Sets the character used to represent minus sign."
    },
    {
        "function": "setPatternSeparator",
        "parameters": [
            "char"
        ],
        "comments": "Sets the monetary decimal separator."
    },
    {
        "function": "setPercent",
        "parameters": [
            "char"
        ],
        "comments": "Sets the string used to represent \"not a number\"."
    },
    {
        "function": "setPerMill",
        "parameters": [
            "char"
        ],
        "comments": "Sets the character used to separate positive and negative subpatterns in a pattern."
    },
    {
        "function": "setZeroDigit",
        "parameters": [
            "char"
        ],
        "comments": "Sets the character used for percent sign."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a FieldPosition object for the given field."
    },
    {
        "function": "getBeginIndex",
        "parameters": [
            ""
        ],
        "comments": "Creates a FieldPosition object for the given field constant."
    },
    {
        "function": "getEndIndex",
        "parameters": [
            ""
        ],
        "comments": "Creates a FieldPosition object for the given field."
    },
    {
        "function": "getField",
        "parameters": [
            ""
        ],
        "comments": "Overrides equals"
    },
    {
        "function": "getFieldAttribute",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the index of the first character in the requested field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the index of the character following the last character in the requested field."
    },
    {
        "function": "setBeginIndex",
        "parameters": [
            "int"
        ],
        "comments": "Retrieves the field identifier."
    },
    {
        "function": "setEndIndex",
        "parameters": [
            "int"
        ],
        "comments": "Returns the field identifier as an attribute constant from one of the Field subclasses."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this FieldPosition."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "format",
        "parameters": [
            "Object"
        ],
        "comments": "Creates and returns a copy of this object."
    },
    {
        "function": "format",
        "parameters": [
            "Object",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Formats an object to produce a string."
    },
    {
        "function": "formatToCharacterIterator",
        "parameters": [
            "Object"
        ],
        "comments": "Formats an object and appends the resulting text to a given string buffer."
    },
    {
        "function": "parseObject",
        "parameters": [
            "String"
        ],
        "comments": "Formats an Object producing an AttributedCharacterIterator."
    },
    {
        "function": "parseObject",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Parses text from the beginning of the given string to produce an object."
    },
    {
        "function": "applyPattern",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a MessageFormat for the default FORMAT locale and the specified pattern."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a MessageFormat for the specified locale and pattern."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Sets the pattern used by this message format."
    },
    {
        "function": "format",
        "parameters": [
            "Object[]",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Creates and returns a copy of this object."
    },
    {
        "function": "format",
        "parameters": [
            "Object",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Equality comparison between two message format objects"
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer."
    },
    {
        "function": "formatToCharacterIterator",
        "parameters": [
            "Object"
        ],
        "comments": "Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer."
    },
    {
        "function": "getFormats",
        "parameters": [
            ""
        ],
        "comments": "Creates a MessageFormat with the given pattern and uses it to format the given arguments."
    },
    {
        "function": "getFormatsByArgumentIndex",
        "parameters": [
            ""
        ],
        "comments": "Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator."
    },
    {
        "function": "getLocale",
        "parameters": [
            ""
        ],
        "comments": "Gets the formats used for the format elements in the previously set pattern string."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the formats used for the values passed into format methods or returned from parse methods."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Gets the locale that's used when creating or comparing subformats."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Generates a hash code for the message format object."
    },
    {
        "function": "parseObject",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Parses text from the beginning of the given string to produce an object array."
    },
    {
        "function": "setFormat",
        "parameters": [
            "int",
            "Format"
        ],
        "comments": "Parses the string."
    },
    {
        "function": "setFormatByArgumentIndex",
        "parameters": [
            "int",
            "Format"
        ],
        "comments": "Parses text from a string to produce an object array."
    },
    {
        "function": "setFormats",
        "parameters": [
            "Format[]"
        ],
        "comments": "Sets the format to use for the format element with the given format element index within the previously set pattern string."
    },
    {
        "function": "setFormatsByArgumentIndex",
        "parameters": [
            "Format[]"
        ],
        "comments": "Sets the format to use for the format elements within the previously set pattern string that use the given argument index."
    },
    {
        "function": "setLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Sets the formats to use for the format elements in the previously set pattern string."
    },
    {
        "function": "toPattern",
        "parameters": [
            ""
        ],
        "comments": "Sets the formats to use for the values passed into format methods or returned from parse methods."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Creates a Field with the specified name."
    },
    {
        "function": "isNormalized",
        "parameters": [
            "CharSequence",
            "Normalizer.Form"
        ],
        "comments": "Determines if the given sequence of char values is normalized."
    },
    {
        "function": "normalize",
        "parameters": [
            "CharSequence",
            "Normalizer.Form"
        ],
        "comments": "Normalize a sequence of char values."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Overrides Cloneable."
    },
    {
        "function": "format",
        "parameters": [
            "double"
        ],
        "comments": "Overrides equals."
    },
    {
        "function": "format",
        "parameters": [
            "double",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Specialization of format."
    },
    {
        "function": "format",
        "parameters": [
            "long"
        ],
        "comments": "Specialization of format."
    },
    {
        "function": "format",
        "parameters": [
            "long",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Specialization of format."
    },
    {
        "function": "format",
        "parameters": [
            "Object",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Specialization of format."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Formats a number and appends the resulting text to the given string buffer."
    },
    {
        "function": "getCurrency",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances."
    },
    {
        "function": "getCurrencyInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets the currency used by this number format when formatting currency values."
    },
    {
        "function": "getCurrencyInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a currency format for the current default FORMAT locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a currency format for the specified locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a general-purpose number format for the current default FORMAT locale."
    },
    {
        "function": "getIntegerInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a general-purpose number format for the specified locale."
    },
    {
        "function": "getIntegerInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns an integer number format for the current default FORMAT locale."
    },
    {
        "function": "getMaximumFractionDigits",
        "parameters": [
            ""
        ],
        "comments": "Returns an integer number format for the specified locale."
    },
    {
        "function": "getMaximumIntegerDigits",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "getMinimumFractionDigits",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "getMinimumIntegerDigits",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum number of digits allowed in the fraction portion of a number."
    },
    {
        "function": "getNumberInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum number of digits allowed in the integer portion of a number."
    },
    {
        "function": "getNumberInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a general-purpose number format for the current default FORMAT locale."
    },
    {
        "function": "getPercentInstance",
        "parameters": [
            ""
        ],
        "comments": "Returns a general-purpose number format for the specified locale."
    },
    {
        "function": "getPercentInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a percentage format for the current default FORMAT locale."
    },
    {
        "function": "getRoundingMode",
        "parameters": [
            ""
        ],
        "comments": "Returns a percentage format for the specified locale."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the RoundingMode used in this NumberFormat."
    },
    {
        "function": "isGroupingUsed",
        "parameters": [
            ""
        ],
        "comments": "Overrides hashCode."
    },
    {
        "function": "isParseIntegerOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns true if grouping is used in this format."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if this format will parse numbers as integers only."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Parses text from the beginning of the given string to produce a number."
    },
    {
        "function": "parseObject",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double."
    },
    {
        "function": "setCurrency",
        "parameters": [
            "Currency"
        ],
        "comments": "Parses text from a string to produce a Number."
    },
    {
        "function": "setGroupingUsed",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the currency used by this number format when formatting currency values."
    },
    {
        "function": "setMaximumFractionDigits",
        "parameters": [
            "int"
        ],
        "comments": "Set whether or not grouping will be used in this format."
    },
    {
        "function": "setMaximumIntegerDigits",
        "parameters": [
            "int"
        ],
        "comments": "Sets the maximum number of digits allowed in the fraction portion of a number. maximumFractionDigits must be \u2265 minimumFractionDigits."
    },
    {
        "function": "setMinimumFractionDigits",
        "parameters": [
            "int"
        ],
        "comments": "Sets the maximum number of digits allowed in the integer portion of a number. maximumIntegerDigits must be \u2265 minimumIntegerDigits."
    },
    {
        "function": "setMinimumIntegerDigits",
        "parameters": [
            "int"
        ],
        "comments": "Sets the minimum number of digits allowed in the fraction portion of a number. minimumFractionDigits must be \u2264 maximumFractionDigits."
    },
    {
        "function": "setParseIntegerOnly",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the minimum number of digits allowed in the integer portion of a number. minimumIntegerDigits must be \u2264 maximumIntegerDigits."
    },
    {
        "function": "setRoundingMode",
        "parameters": [
            "RoundingMode"
        ],
        "comments": "Sets whether or not numbers should be parsed as integers only."
    },
    {
        "function": "readResolve",
        "parameters": [
            ""
        ],
        "comments": "Creates a Field instance with the specified name."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Create a new ParsePosition with the given initial index."
    },
    {
        "function": "getErrorIndex",
        "parameters": [
            ""
        ],
        "comments": "Overrides equals"
    },
    {
        "function": "getIndex",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the index at which an error occurred, or -1 if the error index has not been set."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the current parse position."
    },
    {
        "function": "setErrorIndex",
        "parameters": [
            "int"
        ],
        "comments": "Returns a hash code for this ParsePosition."
    },
    {
        "function": "setIndex",
        "parameters": [
            "int"
        ],
        "comments": "Set the index at which a parse error occurred."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Set the current parse position."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "RuleBasedCollator constructor."
    },
    {
        "function": "compare",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Standard override; no change in semantics."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares the character data stored in two different strings based on the collation rules."
    },
    {
        "function": "getCollationElementIterator",
        "parameters": [
            "String"
        ],
        "comments": "Compares the equality of two collation objects."
    },
    {
        "function": "getCollationElementIterator",
        "parameters": [
            "CharacterIterator"
        ],
        "comments": "Returns a CollationElementIterator for the given String."
    },
    {
        "function": "getCollationKey",
        "parameters": [
            "String"
        ],
        "comments": "Returns a CollationElementIterator for the given CharacterIterator."
    },
    {
        "function": "getRules",
        "parameters": [
            ""
        ],
        "comments": "Transforms the string into a series of characters that can be compared with CollationKey.compareTo."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the table-based rules for the collation object."
    },
    {
        "function": "applyLocalizedPattern",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a SimpleDateFormat using the default pattern and date format symbols for the default FORMAT locale."
    },
    {
        "function": "applyPattern",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the default FORMAT locale."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SimpleDateFormat using the given pattern and date format symbols."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the given locale."
    },
    {
        "function": "format",
        "parameters": [
            "Date",
            "StringBuffer",
            "FieldPosition"
        ],
        "comments": "Applies the given localized pattern string to this date format."
    },
    {
        "function": "formatToCharacterIterator",
        "parameters": [
            "Object"
        ],
        "comments": "Applies the given pattern string to this date format."
    },
    {
        "function": "get2DigitYearStart",
        "parameters": [
            ""
        ],
        "comments": "Creates a copy of this SimpleDateFormat."
    },
    {
        "function": "getDateFormatSymbols",
        "parameters": [
            ""
        ],
        "comments": "Compares the given object with this SimpleDateFormat for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Formats the given Date into a date/time string and appends the result to the given StringBuffer."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "ParsePosition"
        ],
        "comments": "Formats an Object producing an AttributedCharacterIterator."
    },
    {
        "function": "set2DigitYearStart",
        "parameters": [
            "Date"
        ],
        "comments": "Returns the beginning date of the 100-year period 2-digit years are interpreted as being within."
    },
    {
        "function": "setDateFormatSymbols",
        "parameters": [
            "DateFormatSymbols"
        ],
        "comments": "Gets a copy of the date and time format symbols of this date format."
    },
    {
        "function": "toLocalizedPattern",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this SimpleDateFormat object."
    },
    {
        "function": "toPattern",
        "parameters": [
            ""
        ],
        "comments": "Parses text from a string to produce a Date."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs an iterator with an initial index of 0."
    },
    {
        "function": "current",
        "parameters": [
            ""
        ],
        "comments": "Constructs an iterator with the specified initial index."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs an iterator over the given range of the given string, with the index set at the specified position."
    },
    {
        "function": "first",
        "parameters": [
            ""
        ],
        "comments": "Creates a copy of this iterator."
    },
    {
        "function": "getBeginIndex",
        "parameters": [
            ""
        ],
        "comments": "Implements CharacterIterator.current() for String."
    },
    {
        "function": "getEndIndex",
        "parameters": [
            ""
        ],
        "comments": "Compares the equality of two StringCharacterIterator objects."
    },
    {
        "function": "getIndex",
        "parameters": [
            ""
        ],
        "comments": "Implements CharacterIterator.first() for String."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Implements CharacterIterator.getBeginIndex() for String."
    },
    {
        "function": "last",
        "parameters": [
            ""
        ],
        "comments": "Implements CharacterIterator.getEndIndex() for String."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Implements CharacterIterator.getIndex() for String."
    },
    {
        "function": "previous",
        "parameters": [
            ""
        ],
        "comments": "Computes a hashcode for this iterator."
    },
    {
        "function": "setIndex",
        "parameters": [
            "int"
        ],
        "comments": "Implements CharacterIterator.last() for String."
    },
    {
        "function": "setText",
        "parameters": [
            "String"
        ],
        "comments": "Implements CharacterIterator.next() for String."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Canonical decomposition, followed by canonical composition."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Canonical decomposition."
    },
    {
        "function": "getCharacterInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getLineInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for character breaks for the given locale."
    },
    {
        "function": "getSentenceInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for line breaks for the given locale."
    },
    {
        "function": "getWordInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new BreakIterator instance for sentence breaks for the given locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getDateInstance",
        "parameters": [
            "int",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getDateTimeInstance",
        "parameters": [
            "int",
            "int",
            "Locale"
        ],
        "comments": "Returns a new DateFormat instance which formats date with the given formatting style for the specified locale."
    },
    {
        "function": "getTimeInstance",
        "parameters": [
            "int",
            "Locale"
        ],
        "comments": "Returns a new DateFormat instance which formats date and time with the given formatting style for the specified locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getCurrencyInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getIntegerInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new NumberFormat instance which formats monetary values for the specified locale."
    },
    {
        "function": "getNumberInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new NumberFormat instance which formats integer values for the specified locale."
    },
    {
        "function": "getPercentInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a new general-purpose NumberFormat instance for the specified locale."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructor accessible by subclasses."
    },
    {
        "function": "fixed",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Checks if this clock is equal to another clock."
    },
    {
        "function": "getZone",
        "parameters": [
            ""
        ],
        "comments": "Obtains a clock that always returns the same instant."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the time-zone being used to create dates and times."
    },
    {
        "function": "instant",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this clock."
    },
    {
        "function": "millis",
        "parameters": [
            ""
        ],
        "comments": "Gets the current instant of the clock."
    },
    {
        "function": "offset",
        "parameters": [
            "Clock",
            "Duration"
        ],
        "comments": "Gets the current millisecond instant of the clock."
    },
    {
        "function": "system",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains a clock that returns instants from the specified clock with the specified duration added"
    },
    {
        "function": "systemDefaultZone",
        "parameters": [
            ""
        ],
        "comments": "Obtains a clock that returns the current instant using the best available system clock."
    },
    {
        "function": "systemUTC",
        "parameters": [
            ""
        ],
        "comments": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone."
    },
    {
        "function": "tick",
        "parameters": [
            "Clock",
            "Duration"
        ],
        "comments": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone."
    },
    {
        "function": "tickMillis",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration."
    },
    {
        "function": "tickMinutes",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock."
    },
    {
        "function": "tickSeconds",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock."
    },
    {
        "function": "withZone",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock."
    },
    {
        "function": "abs",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this duration with a positive length."
    },
    {
        "function": "addTo",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adds this duration to the specified temporal object."
    },
    {
        "function": "between",
        "parameters": [
            "Temporal",
            "Temporal"
        ],
        "comments": "Obtains a Duration representing the duration between two temporal objects."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Duration"
        ],
        "comments": "Compares this duration to the specified Duration."
    },
    {
        "function": "dividedBy",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration divided by the specified value."
    },
    {
        "function": "dividedBy",
        "parameters": [
            "Duration"
        ],
        "comments": "Returns number of whole times a specified Duration occurs within this Duration."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this duration is equal to the specified Duration."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Obtains an instance of Duration from a temporal amount."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Gets the value of the requested unit."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of nanoseconds within the second in this duration."
    },
    {
        "function": "getSeconds",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of seconds in this duration."
    },
    {
        "function": "getUnits",
        "parameters": [
            ""
        ],
        "comments": "Gets the set of units supported by this duration."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this duration."
    },
    {
        "function": "isNegative",
        "parameters": [
            ""
        ],
        "comments": "Checks if this duration is negative, excluding zero."
    },
    {
        "function": "isZero",
        "parameters": [
            ""
        ],
        "comments": "Checks if this duration is zero length."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this duration with the specified duration subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "Duration"
        ],
        "comments": "Returns a copy of this duration with the specified duration subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in standard 24 hour days subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in hours subtracted."
    },
    {
        "function": "minusMillis",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in milliseconds subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in minutes subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in seconds subtracted."
    },
    {
        "function": "multipliedBy",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration multiplied by the scalar."
    },
    {
        "function": "negated",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this duration with the length negated."
    },
    {
        "function": "of",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Obtains a Duration representing an amount in the specified unit."
    },
    {
        "function": "ofDays",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of standard 24 hour days."
    },
    {
        "function": "ofHours",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of standard hours."
    },
    {
        "function": "ofMillis",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of milliseconds."
    },
    {
        "function": "ofMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of standard minutes."
    },
    {
        "function": "ofNanos",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of nanoseconds."
    },
    {
        "function": "ofSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a Duration representing a number of seconds."
    },
    {
        "function": "ofSeconds",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Obtains a Duration representing a number of seconds and an adjustment in nanoseconds."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains a Duration from a text string such as PnDTnHnMn.nS."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this duration with the specified duration added."
    },
    {
        "function": "plus",
        "parameters": [
            "Duration"
        ],
        "comments": "Returns a copy of this duration with the specified duration added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in standard 24 hour days added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in hours added."
    },
    {
        "function": "plusMillis",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in milliseconds added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in minutes added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified duration in seconds added."
    },
    {
        "function": "subtractFrom",
        "parameters": [
            "Temporal"
        ],
        "comments": "Subtracts this duration from the specified temporal object."
    },
    {
        "function": "toDays",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of days in this duration."
    },
    {
        "function": "toDaysPart",
        "parameters": [
            ""
        ],
        "comments": "Extracts the number of days in the duration."
    },
    {
        "function": "toHours",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of hours in this duration."
    },
    {
        "function": "toHoursPart",
        "parameters": [
            ""
        ],
        "comments": "Extracts the number of hours part in the duration."
    },
    {
        "function": "toMillis",
        "parameters": [
            ""
        ],
        "comments": "Converts this duration to the total length in milliseconds."
    },
    {
        "function": "toMillisPart",
        "parameters": [
            ""
        ],
        "comments": "Extracts the number of milliseconds part of the duration."
    },
    {
        "function": "toMinutes",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of minutes in this duration."
    },
    {
        "function": "toMinutesPart",
        "parameters": [
            ""
        ],
        "comments": "Extracts the number of minutes part in the duration."
    },
    {
        "function": "toNanos",
        "parameters": [
            ""
        ],
        "comments": "Converts this duration to the total length in nanoseconds expressed as a long."
    },
    {
        "function": "toNanosPart",
        "parameters": [
            ""
        ],
        "comments": "Get the nanoseconds part within seconds of the duration."
    },
    {
        "function": "toSeconds",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of seconds in this duration."
    },
    {
        "function": "toSecondsPart",
        "parameters": [
            ""
        ],
        "comments": "Extracts the number of seconds part in the duration."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this Duration truncated to the specified unit."
    },
    {
        "function": "withNanos",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this duration with the specified nano-of-second."
    },
    {
        "function": "withSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this duration with the specified amount of seconds."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have this instant."
    },
    {
        "function": "atOffset",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Combines this instant with an offset to create an OffsetDateTime."
    },
    {
        "function": "atZone",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Combines this instant with a time-zone to create a ZonedDateTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Instant"
        ],
        "comments": "Compares this instant to the specified instant."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this instant is equal to the specified instant."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of Instant from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this instant as an int."
    },
    {
        "function": "getEpochSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this instant as a long."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the number of nanoseconds, later along the time-line, from the start of the second."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this instant."
    },
    {
        "function": "isAfter",
        "parameters": [
            "Instant"
        ],
        "comments": "Checks if this instant is after the specified instant."
    },
    {
        "function": "isBefore",
        "parameters": [
            "Instant"
        ],
        "comments": "Checks if this instant is before the specified instant."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this instant with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this instant with the specified amount subtracted."
    },
    {
        "function": "minusMillis",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in milliseconds subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in seconds subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current instant from the system clock."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current instant from the specified clock."
    },
    {
        "function": "ofEpochMilli",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "ofEpochSecond",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "ofEpochSecond",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this instant with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this instant with the specified amount added."
    },
    {
        "function": "plusMillis",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in milliseconds added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified duration in seconds added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this instant using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toEpochMilli",
        "parameters": [
            ""
        ],
        "comments": "Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "A string representation of this instant using ISO-8601 representation."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this Instant truncated to the specified unit."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another instant in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this instant."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this instant with the specified field set to a new value."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same date as this object."
    },
    {
        "function": "atStartOfDay",
        "parameters": [
            ""
        ],
        "comments": "Combines this date with the time of midnight to create a LocalDateTime at the start of this date."
    },
    {
        "function": "atStartOfDay",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone."
    },
    {
        "function": "atTime",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Combines this date with a time to create a LocalDateTime."
    },
    {
        "function": "atTime",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Combines this date with a time to create a LocalDateTime."
    },
    {
        "function": "atTime",
        "parameters": [
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Combines this date with a time to create a LocalDateTime."
    },
    {
        "function": "atTime",
        "parameters": [
            "LocalTime"
        ],
        "comments": "Combines this date with a time to create a LocalDateTime."
    },
    {
        "function": "atTime",
        "parameters": [
            "OffsetTime"
        ],
        "comments": "Combines this date with an offset time to create an OffsetDateTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Compares this date to another date."
    },
    {
        "function": "datesUntil",
        "parameters": [
            "LocalDate"
        ],
        "comments": "Returns a sequential ordered stream of dates."
    },
    {
        "function": "datesUntil",
        "parameters": [
            "LocalDate",
            "Period"
        ],
        "comments": "Returns a sequential ordered stream of dates by given incremental step."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this date is equal to another date."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this date using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of LocalDate from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date as an int."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date, which is the ISO calendar system."
    },
    {
        "function": "getDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-month field."
    },
    {
        "function": "getDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-week field, which is an enum DayOfWeek."
    },
    {
        "function": "getDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-year field."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era applicable at this date."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date as a long."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the year field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "isAfter",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is after the specified date."
    },
    {
        "function": "isBefore",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is before the specified date."
    },
    {
        "function": "isEqual",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is equal to the specified date."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            ""
        ],
        "comments": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date."
    },
    {
        "function": "lengthOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the year represented by this date."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date with the specified amount subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of days subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of months subtracted."
    },
    {
        "function": "minusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of weeks subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current date from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current date from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current date from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDate from a year, month and day."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "Month",
            "int"
        ],
        "comments": "Obtains an instance of LocalDate from a year, month and day."
    },
    {
        "function": "ofEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an instance of LocalDate from the epoch day count."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of LocalDate from an Instant and zone ID."
    },
    {
        "function": "ofYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDate from a year and day-of-year."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of LocalDate from a text string such as 2007-12-03."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of LocalDate from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date with the specified amount added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of days added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of months added."
    },
    {
        "function": "plusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of weeks added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDate with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toEpochSecond",
        "parameters": [
            "LocalTime",
            "ZoneOffset"
        ],
        "comments": "Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this date as a String, such as 2007-12-03."
    },
    {
        "function": "until",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Calculates the period between this date and another date as a Period."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this date."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this date with the specified field set to a new value."
    },
    {
        "function": "withDayOfMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDate with the day-of-month altered."
    },
    {
        "function": "withDayOfYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDate with the day-of-year altered."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDate with the month-of-year altered."
    },
    {
        "function": "withYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDate with the year altered."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same date and time as this object."
    },
    {
        "function": "atOffset",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Combines this date-time with an offset to create an OffsetDateTime."
    },
    {
        "function": "atZone",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Combines this date-time with a time-zone to create a ZonedDateTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ChronoLocalDateTime<?>"
        ],
        "comments": "Compares this date-time to another date-time."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this date-time is equal to another date-time."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this date-time using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of LocalDateTime from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as an int."
    },
    {
        "function": "getDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-month field."
    },
    {
        "function": "getDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-week field, which is an enum DayOfWeek."
    },
    {
        "function": "getDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-year field."
    },
    {
        "function": "getHour",
        "parameters": [
            ""
        ],
        "comments": "Gets the hour-of-day field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as a long."
    },
    {
        "function": "getMinute",
        "parameters": [
            ""
        ],
        "comments": "Gets the minute-of-hour field."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the nano-of-second field."
    },
    {
        "function": "getSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the second-of-minute field."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the year field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date-time."
    },
    {
        "function": "isAfter",
        "parameters": [
            "ChronoLocalDateTime<?>"
        ],
        "comments": "Checks if this date-time is after the specified date-time."
    },
    {
        "function": "isBefore",
        "parameters": [
            "ChronoLocalDateTime<?>"
        ],
        "comments": "Checks if this date-time is before the specified date-time."
    },
    {
        "function": "isEqual",
        "parameters": [
            "ChronoLocalDateTime<?>"
        ],
        "comments": "Checks if this date-time is equal to the specified date-time."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of days subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of hours subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of minutes subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of months subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of seconds subtracted."
    },
    {
        "function": "minusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of weeks subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current date-time from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current date-time from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current date-time from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "Month",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "Month",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "Month",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDate",
            "LocalTime"
        ],
        "comments": "Obtains an instance of LocalDateTime from a date and time."
    },
    {
        "function": "ofEpochSecond",
        "parameters": [
            "long",
            "int",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of LocalDateTime from an Instant and zone ID."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of LocalDateTime from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of days added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of hours added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of minutes added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of months added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of seconds added."
    },
    {
        "function": "plusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of weeks added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalDateTime with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date-time using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toLocalDate",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalDate part of this date-time."
    },
    {
        "function": "toLocalTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalTime part of this date-time."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this date-time as a String, such as 2007-12-03T10:15:30."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this LocalDateTime with the time truncated."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date-time in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this date-time."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this date-time with the specified field set to a new value."
    },
    {
        "function": "withDayOfMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the day-of-month altered."
    },
    {
        "function": "withDayOfYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the day-of-year altered."
    },
    {
        "function": "withHour",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the hour-of-day altered."
    },
    {
        "function": "withMinute",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the minute-of-hour altered."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the month-of-year altered."
    },
    {
        "function": "withNano",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the nano-of-second altered."
    },
    {
        "function": "withSecond",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the second-of-minute altered."
    },
    {
        "function": "withYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalDateTime with the year altered."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same time as this object."
    },
    {
        "function": "atDate",
        "parameters": [
            "LocalDate"
        ],
        "comments": "Combines this time with a date to create a LocalDateTime."
    },
    {
        "function": "atOffset",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Combines this time with an offset to create an OffsetTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "LocalTime"
        ],
        "comments": "Compares this time to another time."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this time is equal to another time."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this time using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of LocalTime from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this time as an int."
    },
    {
        "function": "getHour",
        "parameters": [
            ""
        ],
        "comments": "Gets the hour-of-day field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this time as a long."
    },
    {
        "function": "getMinute",
        "parameters": [
            ""
        ],
        "comments": "Gets the minute-of-hour field."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the nano-of-second field."
    },
    {
        "function": "getSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the second-of-minute field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this time."
    },
    {
        "function": "isAfter",
        "parameters": [
            "LocalTime"
        ],
        "comments": "Checks if this time is after the specified time."
    },
    {
        "function": "isBefore",
        "parameters": [
            "LocalTime"
        ],
        "comments": "Checks if this time is before the specified time."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this time with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this time with the specified amount subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of hours subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of minutes subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of seconds subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current time from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current time from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current time from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalTime from an hour and minute."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalTime from an hour, minute and second."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of LocalTime from an hour, minute, second and nanosecond."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of LocalTime from an Instant and zone ID."
    },
    {
        "function": "ofNanoOfDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an instance of LocalTime from a nanos-of-day value."
    },
    {
        "function": "ofSecondOfDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an instance of LocalTime from a second-of-day value."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of LocalTime from a text string such as 10:15."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of LocalTime from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this time with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this time with the specified amount added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of hours added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of minutes added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this LocalTime with the specified number of seconds added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this time using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toEpochSecond",
        "parameters": [
            "LocalDate",
            "ZoneOffset"
        ],
        "comments": "Converts this LocalTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "toNanoOfDay",
        "parameters": [
            ""
        ],
        "comments": "Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1."
    },
    {
        "function": "toSecondOfDay",
        "parameters": [
            ""
        ],
        "comments": "Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this time as a String, such as 10:15."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this LocalTime with the time truncated."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another time in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this time."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this time with the specified field set to a new value."
    },
    {
        "function": "withHour",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalTime with the hour-of-day altered."
    },
    {
        "function": "withMinute",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalTime with the minute-of-hour altered."
    },
    {
        "function": "withNano",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalTime with the nano-of-second altered."
    },
    {
        "function": "withSecond",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this LocalTime with the second-of-minute altered."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have this month-day."
    },
    {
        "function": "atYear",
        "parameters": [
            "int"
        ],
        "comments": "Combines this month-day with a year to create a LocalDate."
    },
    {
        "function": "compareTo",
        "parameters": [
            "MonthDay"
        ],
        "comments": "Compares this month-day to another month-day."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this month-day is equal to another month-day."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this month-day using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of MonthDay from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this month-day as an int."
    },
    {
        "function": "getDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-month field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this month-day as a long."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this month-day."
    },
    {
        "function": "isAfter",
        "parameters": [
            "MonthDay"
        ],
        "comments": "Checks if this month-day is after the specified month-day."
    },
    {
        "function": "isBefore",
        "parameters": [
            "MonthDay"
        ],
        "comments": "Checks if this month-day is before the specified month-day."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isValidYear",
        "parameters": [
            "int"
        ],
        "comments": "Checks if the year is valid for this month-day."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current month-day from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current month-day from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current month-day from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an instance of MonthDay."
    },
    {
        "function": "of",
        "parameters": [
            "Month",
            "int"
        ],
        "comments": "Obtains an instance of MonthDay."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of MonthDay from a text string such as --12-03."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of MonthDay from a text string using a specific formatter."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this month-day using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this month-day as a String, such as --12-03."
    },
    {
        "function": "with",
        "parameters": [
            "Month"
        ],
        "comments": "Returns a copy of this MonthDay with the month-of-year altered."
    },
    {
        "function": "withDayOfMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this MonthDay with the day-of-month altered."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this MonthDay with the month-of-year altered."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same offset, date and time as this object."
    },
    {
        "function": "atZoneSameInstant",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant."
    },
    {
        "function": "atZoneSimilarLocal",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time."
    },
    {
        "function": "compareTo",
        "parameters": [
            "OffsetDateTime"
        ],
        "comments": "Compares this date-time to another date-time."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this date-time is equal to another date-time."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this date-time using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as an int."
    },
    {
        "function": "getDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-month field."
    },
    {
        "function": "getDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-week field, which is an enum DayOfWeek."
    },
    {
        "function": "getDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-year field."
    },
    {
        "function": "getHour",
        "parameters": [
            ""
        ],
        "comments": "Gets the hour-of-day field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as a long."
    },
    {
        "function": "getMinute",
        "parameters": [
            ""
        ],
        "comments": "Gets the minute-of-hour field."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the nano-of-second field."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Gets the zone offset, such as '+01:00'."
    },
    {
        "function": "getSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the second-of-minute field."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the year field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date-time."
    },
    {
        "function": "isAfter",
        "parameters": [
            "OffsetDateTime"
        ],
        "comments": "Checks if the instant of this date-time is after that of the specified date-time."
    },
    {
        "function": "isBefore",
        "parameters": [
            "OffsetDateTime"
        ],
        "comments": "Checks if the instant of this date-time is before that of the specified date-time."
    },
    {
        "function": "isEqual",
        "parameters": [
            "OffsetDateTime"
        ],
        "comments": "Checks if the instant of this date-time is equal to that of the specified date-time."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of days subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of hours subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of minutes subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of months subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of seconds subtracted."
    },
    {
        "function": "minusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of weeks subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current date-time from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current date-time from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current date-time from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDate",
            "LocalTime",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a date, time and offset."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a date-time and offset."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of OffsetDateTime from an Instant and zone ID."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of OffsetDateTime from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of days added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of hours added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of minutes added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of months added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of seconds added."
    },
    {
        "function": "plusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of weeks added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date-time using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "timeLineOrder",
        "parameters": [
            ""
        ],
        "comments": "Gets a comparator that compares two OffsetDateTime instances based solely on the instant."
    },
    {
        "function": "toEpochSecond",
        "parameters": [
            ""
        ],
        "comments": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "toInstant",
        "parameters": [
            ""
        ],
        "comments": "Converts this date-time to an Instant."
    },
    {
        "function": "toLocalDate",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalDate part of this date-time."
    },
    {
        "function": "toLocalDateTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalDateTime part of this date-time."
    },
    {
        "function": "toLocalTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalTime part of this date-time."
    },
    {
        "function": "toOffsetTime",
        "parameters": [
            ""
        ],
        "comments": "Converts this date-time to an OffsetTime."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00."
    },
    {
        "function": "toZonedDateTime",
        "parameters": [
            ""
        ],
        "comments": "Converts this date-time to a ZonedDateTime using the offset as the zone ID."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the time truncated."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date-time in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this date-time."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this date-time with the specified field set to a new value."
    },
    {
        "function": "withDayOfMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the day-of-month altered."
    },
    {
        "function": "withDayOfYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the day-of-year altered."
    },
    {
        "function": "withHour",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the hour-of-day altered."
    },
    {
        "function": "withMinute",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the minute-of-hour altered."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the month-of-year altered."
    },
    {
        "function": "withNano",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the nano-of-second altered."
    },
    {
        "function": "withOffsetSameInstant",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant."
    },
    {
        "function": "withOffsetSameLocal",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time."
    },
    {
        "function": "withSecond",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the second-of-minute altered."
    },
    {
        "function": "withYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetDateTime with the year altered."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same offset and time as this object."
    },
    {
        "function": "atDate",
        "parameters": [
            "LocalDate"
        ],
        "comments": "Combines this time with a date to create an OffsetDateTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "OffsetTime"
        ],
        "comments": "Compares this OffsetTime to another time."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this time is equal to another time."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this time using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of OffsetTime from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this time as an int."
    },
    {
        "function": "getHour",
        "parameters": [
            ""
        ],
        "comments": "Gets the hour-of-day field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this time as a long."
    },
    {
        "function": "getMinute",
        "parameters": [
            ""
        ],
        "comments": "Gets the minute-of-hour field."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the nano-of-second field."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Gets the zone offset, such as '+01:00'."
    },
    {
        "function": "getSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the second-of-minute field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this time."
    },
    {
        "function": "isAfter",
        "parameters": [
            "OffsetTime"
        ],
        "comments": "Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date."
    },
    {
        "function": "isBefore",
        "parameters": [
            "OffsetTime"
        ],
        "comments": "Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date."
    },
    {
        "function": "isEqual",
        "parameters": [
            "OffsetTime"
        ],
        "comments": "Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this time with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this time with the specified amount subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of hours subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of minutes subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of seconds subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current time from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current time from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current time from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of OffsetTime from an hour, minute, second and nanosecond."
    },
    {
        "function": "of",
        "parameters": [
            "LocalTime",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of OffsetTime from a local time and an offset."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of OffsetTime from an Instant and zone ID."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of OffsetTime from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this time with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this time with the specified amount added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of hours added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of minutes added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified number of seconds added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this time using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toEpochSecond",
        "parameters": [
            "LocalDate"
        ],
        "comments": "Converts this OffsetTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "toLocalTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalTime part of this date-time."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this time as a String, such as 10:15:30+01:00."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this OffsetTime with the time truncated."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another time in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this time."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this time with the specified field set to a new value."
    },
    {
        "function": "withHour",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetTime with the hour-of-day altered."
    },
    {
        "function": "withMinute",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetTime with the minute-of-hour altered."
    },
    {
        "function": "withNano",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetTime with the nano-of-second altered."
    },
    {
        "function": "withOffsetSameInstant",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day."
    },
    {
        "function": "withOffsetSameLocal",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time."
    },
    {
        "function": "withSecond",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this OffsetTime with the second-of-minute altered."
    },
    {
        "function": "addTo",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adds this period to the specified temporal object."
    },
    {
        "function": "between",
        "parameters": [
            "LocalDate",
            "LocalDate"
        ],
        "comments": "Obtains a Period consisting of the number of years, months, and days between two dates."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this period is equal to another period."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Obtains an instance of Period from a temporal amount."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Gets the value of the requested unit."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this period, which is the ISO calendar system."
    },
    {
        "function": "getDays",
        "parameters": [
            ""
        ],
        "comments": "Gets the amount of days of this period."
    },
    {
        "function": "getMonths",
        "parameters": [
            ""
        ],
        "comments": "Gets the amount of months of this period."
    },
    {
        "function": "getUnits",
        "parameters": [
            ""
        ],
        "comments": "Gets the set of units supported by this period."
    },
    {
        "function": "getYears",
        "parameters": [
            ""
        ],
        "comments": "Gets the amount of years of this period."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this period."
    },
    {
        "function": "isNegative",
        "parameters": [
            ""
        ],
        "comments": "Checks if any of the three units of this period are negative."
    },
    {
        "function": "isZero",
        "parameters": [
            ""
        ],
        "comments": "Checks if all three units of this period are zero."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this period with the specified period subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified days subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified months subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified years subtracted."
    },
    {
        "function": "multipliedBy",
        "parameters": [
            "int"
        ],
        "comments": "Returns a new instance with each element in this period multiplied by the specified scalar."
    },
    {
        "function": "negated",
        "parameters": [
            ""
        ],
        "comments": "Returns a new instance with each amount in this period negated."
    },
    {
        "function": "normalized",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this period with the years and months normalized."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a Period representing a number of years, months and days."
    },
    {
        "function": "ofDays",
        "parameters": [
            "int"
        ],
        "comments": "Obtains a Period representing a number of days."
    },
    {
        "function": "ofMonths",
        "parameters": [
            "int"
        ],
        "comments": "Obtains a Period representing a number of months."
    },
    {
        "function": "ofWeeks",
        "parameters": [
            "int"
        ],
        "comments": "Obtains a Period representing a number of weeks."
    },
    {
        "function": "ofYears",
        "parameters": [
            "int"
        ],
        "comments": "Obtains a Period representing a number of years."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains a Period from a text string such as PnYnMnD."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this period with the specified period added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified days added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified months added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this period with the specified years added."
    },
    {
        "function": "subtractFrom",
        "parameters": [
            "Temporal"
        ],
        "comments": "Subtracts this period from the specified temporal object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this period as a String, such as P6Y3M1D."
    },
    {
        "function": "toTotalMonths",
        "parameters": [
            ""
        ],
        "comments": "Gets the total number of months in this period."
    },
    {
        "function": "withDays",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this period with the specified amount of days."
    },
    {
        "function": "withMonths",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this period with the specified amount of months."
    },
    {
        "function": "withYears",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this period with the specified amount of years."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have this year."
    },
    {
        "function": "atDay",
        "parameters": [
            "int"
        ],
        "comments": "Combines this year with a day-of-year to create a LocalDate."
    },
    {
        "function": "atMonth",
        "parameters": [
            "int"
        ],
        "comments": "Combines this year with a month to create a YearMonth."
    },
    {
        "function": "atMonth",
        "parameters": [
            "Month"
        ],
        "comments": "Combines this year with a month to create a YearMonth."
    },
    {
        "function": "atMonthDay",
        "parameters": [
            "MonthDay"
        ],
        "comments": "Combines this year with a month-day to create a LocalDate."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Year"
        ],
        "comments": "Compares this year to another year."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this year is equal to another year."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this year using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of Year from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this year as an int."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this year as a long."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the year value."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this year."
    },
    {
        "function": "isAfter",
        "parameters": [
            "Year"
        ],
        "comments": "Checks if this year is after the specified year."
    },
    {
        "function": "isBefore",
        "parameters": [
            "Year"
        ],
        "comments": "Checks if this year is before the specified year."
    },
    {
        "function": "isLeap",
        "parameters": [
            ""
        ],
        "comments": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
        "function": "isLeap",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "isValidMonthDay",
        "parameters": [
            "MonthDay"
        ],
        "comments": "Checks if the month-day is valid for this year."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Gets the length of this year in days."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this year with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this year with the specified amount subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this Year with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current year from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current year from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current year from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of Year."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of Year from a text string such as 2007."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of Year from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this year with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this year with the specified amount added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this Year with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this year using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this year as a String."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another year in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this year."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this year with the specified field set to a new value."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have this year-month."
    },
    {
        "function": "atDay",
        "parameters": [
            "int"
        ],
        "comments": "Combines this year-month with a day-of-month to create a LocalDate."
    },
    {
        "function": "atEndOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns a LocalDate at the end of the month."
    },
    {
        "function": "compareTo",
        "parameters": [
            "YearMonth"
        ],
        "comments": "Compares this year-month to another year-month."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this year-month is equal to another year-month."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this year-month using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of YearMonth from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this year-month as an int."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this year-month as a long."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the year field."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this year-month."
    },
    {
        "function": "isAfter",
        "parameters": [
            "YearMonth"
        ],
        "comments": "Checks if this year-month is after the specified year-month."
    },
    {
        "function": "isBefore",
        "parameters": [
            "YearMonth"
        ],
        "comments": "Checks if this year-month is before the specified year-month."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            ""
        ],
        "comments": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "isValidDay",
        "parameters": [
            "int"
        ],
        "comments": "Checks if the day-of-month is valid for this year-month."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month, taking account of the year."
    },
    {
        "function": "lengthOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the year."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this year-month with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this year-month with the specified amount subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this YearMonth with the specified number of months subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this YearMonth with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current year-month from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current year-month from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current year-month from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an instance of YearMonth from a year and month."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "Month"
        ],
        "comments": "Obtains an instance of YearMonth from a year and month."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of YearMonth from a text string such as 2007-12."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of YearMonth from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this year-month with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this year-month with the specified amount added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this YearMonth with the specified number of months added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this YearMonth with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this year-month using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this year-month as a String, such as 2007-12."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another year-month in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this year-month."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this year-month with the specified field set to a new value."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this YearMonth with the month-of-year altered."
    },
    {
        "function": "withYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this YearMonth with the year altered."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this date-time is equal to another date-time."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this date-time using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as an int."
    },
    {
        "function": "getDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-month field."
    },
    {
        "function": "getDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-week field, which is an enum DayOfWeek."
    },
    {
        "function": "getDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-year field."
    },
    {
        "function": "getHour",
        "parameters": [
            ""
        ],
        "comments": "Gets the hour-of-day field."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this date-time as a long."
    },
    {
        "function": "getMinute",
        "parameters": [
            ""
        ],
        "comments": "Gets the minute-of-hour field."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field using the Month enum."
    },
    {
        "function": "getMonthValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the month-of-year field from 1 to 12."
    },
    {
        "function": "getNano",
        "parameters": [
            ""
        ],
        "comments": "Gets the nano-of-second field."
    },
    {
        "function": "getOffset",
        "parameters": [
            ""
        ],
        "comments": "Gets the zone offset, such as '+01:00'."
    },
    {
        "function": "getSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the second-of-minute field."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the year field."
    },
    {
        "function": "getZone",
        "parameters": [
            ""
        ],
        "comments": "Gets the time-zone, such as 'Europe/Paris'."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date-time."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount subtracted."
    },
    {
        "function": "minusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of days subtracted."
    },
    {
        "function": "minusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of hours subtracted."
    },
    {
        "function": "minusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of minutes subtracted."
    },
    {
        "function": "minusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of months subtracted."
    },
    {
        "function": "minusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted."
    },
    {
        "function": "minusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of seconds subtracted."
    },
    {
        "function": "minusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of weeks subtracted."
    },
    {
        "function": "minusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of years subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current date-time from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current date-time from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current date-time from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDate",
            "LocalTime",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a local date and time."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDateTime",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a local date-time."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime from an Instant."
    },
    {
        "function": "ofInstant",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset."
    },
    {
        "function": "ofLocal",
        "parameters": [
            "LocalDateTime",
            "ZoneId",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible."
    },
    {
        "function": "ofStrict",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset",
            "ZoneId"
        ],
        "comments": "Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "DateTimeFormatter"
        ],
        "comments": "Obtains an instance of ZonedDateTime from a text string using a specific formatter."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this date-time with the specified amount added."
    },
    {
        "function": "plusDays",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of days added."
    },
    {
        "function": "plusHours",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of hours added."
    },
    {
        "function": "plusMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of minutes added."
    },
    {
        "function": "plusMonths",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of months added."
    },
    {
        "function": "plusNanos",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds added."
    },
    {
        "function": "plusSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of seconds added."
    },
    {
        "function": "plusWeeks",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of weeks added."
    },
    {
        "function": "plusYears",
        "parameters": [
            "long"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the specified number of years added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date-time using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toLocalDate",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalDate part of this date-time."
    },
    {
        "function": "toLocalDateTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalDateTime part of this date-time."
    },
    {
        "function": "toLocalTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the LocalTime part of this date-time."
    },
    {
        "function": "toOffsetDateTime",
        "parameters": [
            ""
        ],
        "comments": "Converts this date-time to an OffsetDateTime."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]."
    },
    {
        "function": "truncatedTo",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the time truncated."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date-time in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted copy of this date-time."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns a copy of this date-time with the specified field set to a new value."
    },
    {
        "function": "withDayOfMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the day-of-month altered."
    },
    {
        "function": "withDayOfYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the day-of-year altered."
    },
    {
        "function": "withEarlierOffsetAtOverlap",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap."
    },
    {
        "function": "withFixedOffsetZone",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this date-time with the zone ID set to the offset."
    },
    {
        "function": "withHour",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the hour-of-day altered."
    },
    {
        "function": "withLaterOffsetAtOverlap",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap."
    },
    {
        "function": "withMinute",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the minute-of-hour altered."
    },
    {
        "function": "withMonth",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the month-of-year altered."
    },
    {
        "function": "withNano",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the nano-of-second altered."
    },
    {
        "function": "withSecond",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the second-of-minute altered."
    },
    {
        "function": "withYear",
        "parameters": [
            "int"
        ],
        "comments": "Returns a copy of this ZonedDateTime with the year altered."
    },
    {
        "function": "withZoneSameInstant",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Returns a copy of this date-time with a different time-zone, retaining the instant."
    },
    {
        "function": "withZoneSameLocal",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this time-zone ID is equal to another time-zone ID."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of ZoneId from a temporal object."
    },
    {
        "function": "getAvailableZoneIds",
        "parameters": [
            ""
        ],
        "comments": "Gets the set of available zone IDs."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "Gets the textual representation of the zone, such as 'British Time' or '+02:00'."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the unique time-zone ID."
    },
    {
        "function": "getRules",
        "parameters": [
            ""
        ],
        "comments": "Gets the time-zone rules for this ID allowing calculations to be performed."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this time-zone ID."
    },
    {
        "function": "normalized",
        "parameters": [
            ""
        ],
        "comments": "Normalizes the time-zone ID, returning a ZoneOffset where possible."
    },
    {
        "function": "of",
        "parameters": [
            "String"
        ],
        "comments": "Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use."
    },
    {
        "function": "of",
        "parameters": [
            "String",
            "Map<String",
            "String>"
        ],
        "comments": "Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs."
    },
    {
        "function": "ofOffset",
        "parameters": [
            "String",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of ZoneId wrapping an offset."
    },
    {
        "function": "systemDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the system default time-zone."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this zone as a String, using the ID."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same offset as this object."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Compares this offset to another offset in descending order."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this offset is equal to another offset."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of ZoneOffset from a temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this offset as an int."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the normalized zone offset ID."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this offset as a long."
    },
    {
        "function": "getRules",
        "parameters": [
            ""
        ],
        "comments": "Gets the associated time-zone rules."
    },
    {
        "function": "getTotalSeconds",
        "parameters": [
            ""
        ],
        "comments": "Gets the total zone offset in seconds."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this offset."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "of",
        "parameters": [
            "String"
        ],
        "comments": "Obtains an instance of ZoneOffset using the ID."
    },
    {
        "function": "ofHours",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of ZoneOffset using an offset in hours."
    },
    {
        "function": "ofHoursMinutes",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an instance of ZoneOffset using an offset in hours and minutes."
    },
    {
        "function": "ofHoursMinutesSeconds",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds."
    },
    {
        "function": "ofTotalSeconds",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of ZoneOffset specifying the total offset in seconds"
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this offset using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this offset as a String, using the normalized ID."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "The singleton instance for the day-of-week of Friday."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "The singleton instance for the day-of-week of Monday."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the day-of-week of Saturday."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "The singleton instance for the day-of-week of Sunday."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the day-of-week of Thursday."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the day-of-week of Tuesday."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the day-of-week of Wednesday."
    },
    {
        "function": "minus",
        "parameters": [
            "long"
        ],
        "comments": "Adjusts the specified temporal object to have this day-of-week."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of DayOfWeek from a temporal object."
    },
    {
        "function": "plus",
        "parameters": [
            "long"
        ],
        "comments": "Gets the value of the specified field from this day-of-week as an int."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Gets the textual representation, such as 'Mon' or 'Friday'."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this day-of-week as a long."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the day-of-week int value."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "The singleton instance for the month of April with 30 days."
    },
    {
        "function": "firstDayOfYear",
        "parameters": [
            "boolean"
        ],
        "comments": "The singleton instance for the month of August with 31 days."
    },
    {
        "function": "firstMonthOfQuarter",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the month of December with 31 days."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "The singleton instance for the month of February with 28 days, or 29 in a leap year."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the month of January with 31 days."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "The singleton instance for the month of July with 31 days."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the month of June with 30 days."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the month of March with 31 days."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "The singleton instance for the month of May with 31 days."
    },
    {
        "function": "length",
        "parameters": [
            "boolean"
        ],
        "comments": "The singleton instance for the month of November with 30 days."
    },
    {
        "function": "maxLength",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the month of October with 31 days."
    },
    {
        "function": "minLength",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the month of September with 30 days."
    },
    {
        "function": "minus",
        "parameters": [
            "long"
        ],
        "comments": "Adjusts the specified temporal object to have this month-of-year."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Gets the day-of-year corresponding to the first day of this month."
    },
    {
        "function": "plus",
        "parameters": [
            "long"
        ],
        "comments": "Gets the month corresponding to the first month of this quarter."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Obtains an instance of Month from a temporal object."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this month-of-year as an int."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the textual representation, such as 'Jan' or 'December'."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Gets the value of the specified field from this month-of-year as a long."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same date as this object."
    },
    {
        "function": "atTime",
        "parameters": [
            "LocalTime"
        ],
        "comments": "Combines this date with a time to create a ChronoLocalDateTime."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Compares this date to another date, including the chronology."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this date is equal to another date, including the chronology."
    },
    {
        "function": "format",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Formats this date using the specified formatter."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of ChronoLocalDate from a temporal object."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era, as defined by the chronology."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "isAfter",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is after the specified date ignoring the chronology."
    },
    {
        "function": "isBefore",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is before the specified date ignoring the chronology."
    },
    {
        "function": "isEqual",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Checks if this date is equal to the specified date ignoring the chronology."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            ""
        ],
        "comments": "Checks if the year is a leap year, as defined by the calendar system."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date, as defined by the calendar system."
    },
    {
        "function": "lengthOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the year represented by this date, as defined by the calendar system."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns an object of the same type as this object with the specified period subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns an object of the same type as this object with the specified period added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date using the specified query."
    },
    {
        "function": "timeLineOrder",
        "parameters": [
            ""
        ],
        "comments": "Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology."
    },
    {
        "function": "toEpochDay",
        "parameters": [
            ""
        ],
        "comments": "Converts this date to the Epoch Day."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this date as a String."
    },
    {
        "function": "until",
        "parameters": [
            "ChronoLocalDate"
        ],
        "comments": "Calculates the period between this date and another date as a ChronoPeriod."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns an object of the same type as this object with the specified field altered."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Chronology"
        ],
        "comments": "Compares this chronology to another chronology."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a local date in this chronology from another temporal object."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a local date in this chronology from the epoch-day."
    },
    {
        "function": "dateNow",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current local date in this chronology from the system clock in the default time-zone."
    },
    {
        "function": "dateNow",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current local date in this chronology from the specified clock."
    },
    {
        "function": "dateNow",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current local date in this chronology from the system clock in the specified time-zone."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains a local date in this chronology from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in this chronology from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "epochSecond",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "ZoneOffset"
        ],
        "comments": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "epochSecond",
        "parameters": [
            "Era",
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "ZoneOffset"
        ],
        "comments": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this chronology is equal to another chronology."
    },
    {
        "function": "eraOf",
        "parameters": [
            "int"
        ],
        "comments": "Creates the chronology era object from the numeric value."
    },
    {
        "function": "eras",
        "parameters": [
            ""
        ],
        "comments": "Gets the list of eras for the chronology."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an instance of Chronology from a temporal object."
    },
    {
        "function": "getAvailableChronologies",
        "parameters": [
            ""
        ],
        "comments": "Returns the available chronologies."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the calendar system."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "Gets the textual representation of this chronology."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this chronology."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the specified year is a leap year."
    },
    {
        "function": "localDateTime",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a local date-time in this chronology from another temporal object."
    },
    {
        "function": "of",
        "parameters": [
            "String"
        ],
        "comments": "Obtains an instance of Chronology from a chronology ID or calendar system type."
    },
    {
        "function": "ofLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Obtains an instance of Chronology from a locale."
    },
    {
        "function": "period",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a period for this chronology based on years, months and days."
    },
    {
        "function": "prolepticYear",
        "parameters": [
            "Era",
            "int"
        ],
        "comments": "Calculates the proleptic-year given the era and year-of-era."
    },
    {
        "function": "range",
        "parameters": [
            "ChronoField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "resolveDate",
        "parameters": [
            "Map<TemporalField",
            "Long>",
            "ResolverStyle"
        ],
        "comments": "Resolves parsed ChronoField values into a date during parsing."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this chronology as a String."
    },
    {
        "function": "zonedDateTime",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains a ChronoZonedDateTime in this chronology from an Instant."
    },
    {
        "function": "zonedDateTime",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a ChronoZonedDateTime in this chronology from another temporal object."
    },
    {
        "function": "addTo",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adds this period to the specified temporal object."
    },
    {
        "function": "between",
        "parameters": [
            "ChronoLocalDate",
            "ChronoLocalDate"
        ],
        "comments": "Obtains a ChronoPeriod consisting of amount of time between two dates."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this period is equal to another period, including the chronology."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Gets the value of the requested unit."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology that defines the meaning of the supported units."
    },
    {
        "function": "getUnits",
        "parameters": [
            ""
        ],
        "comments": "Gets the set of units supported by this period."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this period."
    },
    {
        "function": "isNegative",
        "parameters": [
            ""
        ],
        "comments": "Checks if any of the supported units of this period are negative."
    },
    {
        "function": "isZero",
        "parameters": [
            ""
        ],
        "comments": "Checks if all the supported units of this period are zero."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this period with the specified period subtracted."
    },
    {
        "function": "multipliedBy",
        "parameters": [
            "int"
        ],
        "comments": "Returns a new instance with each amount in this period in this period multiplied by the specified scalar."
    },
    {
        "function": "negated",
        "parameters": [
            ""
        ],
        "comments": "Returns a new instance with each amount in this period negated."
    },
    {
        "function": "normalized",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of this period with the amounts of each unit normalized."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns a copy of this period with the specified period added."
    },
    {
        "function": "subtractFrom",
        "parameters": [
            "Temporal"
        ],
        "comments": "Subtracts this period from the specified temporal object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this period as a String."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object to have the same era as this object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this era as an int."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "Gets the textual representation of this era."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field from this era as a long."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the numeric value associated with the era as defined by the chronology."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this era using the specified query."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Chronology"
        ],
        "comments": "Creates an instance."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this chronology to another chronology."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Checks if this chronology is equal to another chronology."
    },
    {
        "function": "resolveDate",
        "parameters": [
            "Map<TemporalField",
            "Long>",
            "ResolverStyle"
        ],
        "comments": "A hash code for this chronology."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Resolves parsed ChronoField values into a date during parsing."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a local date in the Hijrah calendar system from the epoch-day."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "eraOf",
        "parameters": [
            "int"
        ],
        "comments": "Creates the HijrahEra object from the numeric value."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the Islamic calendar."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this date to another date, including the chronology."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date, which is the Hijrah calendar system."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era applicable at this date."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            ""
        ],
        "comments": "Checks if the year is a leap year, according to the Hijrah calendar system rules."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date."
    },
    {
        "function": "lengthOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the year represented by this date."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the object."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "withVariant",
        "parameters": [
            "HijrahChronology"
        ],
        "comments": "Returns a HijrahDate with the Chronology requested."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an ISO local date from another date-time object."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains an ISO local date from the epoch-day."
    },
    {
        "function": "dateNow",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current ISO local date from the system clock in the default time-zone."
    },
    {
        "function": "dateNow",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current ISO local date from the specified clock."
    },
    {
        "function": "dateNow",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current ISO local date from the system clock in the specified time-zone."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains an ISO local date from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains an ISO local date from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "epochSecond",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int",
            "ZoneOffset"
        ],
        "comments": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the underlying calendar system - 'iso8601'."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology - 'ISO'."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules."
    },
    {
        "function": "localDateTime",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an ISO local date-time from another date-time object."
    },
    {
        "function": "period",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a period for this chronology based on years, months and days."
    },
    {
        "function": "resolveDate",
        "parameters": [
            "Map<TemporalField",
            "Long>",
            "ResolverStyle"
        ],
        "comments": "Resolves parsed ChronoField values into a date during parsing."
    },
    {
        "function": "zonedDateTime",
        "parameters": [
            "Instant",
            "ZoneId"
        ],
        "comments": "Obtains an ISO zoned date-time in this chronology from an Instant."
    },
    {
        "function": "zonedDateTime",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains an ISO zoned date-time from another date-time object."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a local date in the Japanese calendar system from the epoch-day."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "eraOf",
        "parameters": [
            "int"
        ],
        "comments": "Returns the calendar system era object from the given numeric value."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the underlying calendar system - 'japanese'."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology - 'Japanese'."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the specified year is a leap year."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this date to another date, including the chronology."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a JapaneseDate from a temporal object."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date, which is the Japanese calendar system."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era applicable at this date."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current JapaneseDate from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current JapaneseDate from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current JapaneseDate from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "of",
        "parameters": [
            "JapaneseEra",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the object."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "Gets the textual representation of this era."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the numeric era int value."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of JapaneseEra from an int value."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Returns the JapaneseEra with the name."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of JapaneseEras."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a local date in the Minguo calendar system from the epoch-day."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the underlying calendar system - 'roc'."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology - 'Minguo'."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the specified year is a leap year."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this date to another date, including the chronology."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a MinguoDate from a temporal object."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date, which is the Minguo calendar system."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era applicable at this date."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current MinguoDate from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current MinguoDate from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current MinguoDate from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a MinguoDate representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the object."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "date",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "date",
        "parameters": [
            "Era",
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields."
    },
    {
        "function": "dateEpochDay",
        "parameters": [
            "long"
        ],
        "comments": "Obtains a local date in the Thai Buddhist calendar system from the epoch-day."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields."
    },
    {
        "function": "dateYearDay",
        "parameters": [
            "Era",
            "int",
            "int"
        ],
        "comments": "Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Gets the calendar type of the underlying calendar system - 'buddhist'."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Gets the ID of the chronology - 'ThaiBuddhist'."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the specified year is a leap year."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this date to another date, including the chronology."
    },
    {
        "function": "from",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Obtains a ThaiBuddhistDate from a temporal object."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the chronology of this date, which is the Thai Buddhist calendar system."
    },
    {
        "function": "getEra",
        "parameters": [
            ""
        ],
        "comments": "Gets the era applicable at this date."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this date."
    },
    {
        "function": "lengthOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the month represented by this date."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "now",
        "parameters": [
            ""
        ],
        "comments": "Obtains the current ThaiBuddhistDate from the system clock in the default time-zone."
    },
    {
        "function": "now",
        "parameters": [
            "Clock"
        ],
        "comments": "Obtains the current ThaiBuddhistDate from the specified clock."
    },
    {
        "function": "now",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone."
    },
    {
        "function": "of",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the object."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another date in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "The singleton instance for the current era, 'Anno Hegirae', which has the numeric value 1."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Gets the textual representation of this era."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Gets the numeric era int value."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Obtains an instance of HijrahEra from an int value."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Returns the enum constant of this type with the specified name."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the era before the current one, 'Before Current Era', which has the numeric value 0."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "The singleton instance for the current era, 'Current Era', which has the numeric value 1."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the numeric era int value."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Obtains an instance of IsoEra from an int value."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "The singleton instance for the era before the current one, 'Before Republic of China Era', which has the numeric value 0."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the current era, 'Republic of China Era', which has the numeric value 1."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Gets the textual representation of this era."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the numeric era int value."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Obtains an instance of MinguoEra from an int value."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "TextStyle",
            "Locale"
        ],
        "comments": "The singleton instance for the current era, 'Buddhist Era', which has the numeric value 1."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "The singleton instance for the era before the current one, 'Before Buddhist Era', which has the numeric value 0."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Gets the textual representation of this era."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Gets the numeric era int value."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Obtains an instance of ThaiBuddhistEra from an int value."
    },
    {
        "function": "format",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Formats a date-time object using this formatter."
    },
    {
        "function": "formatTo",
        "parameters": [
            "TemporalAccessor",
            "Appendable"
        ],
        "comments": "Formats a date-time object to an Appendable using this formatter."
    },
    {
        "function": "getChronology",
        "parameters": [
            ""
        ],
        "comments": "Gets the overriding chronology to be used during formatting."
    },
    {
        "function": "getDecimalStyle",
        "parameters": [
            ""
        ],
        "comments": "Gets the DecimalStyle to be used during formatting."
    },
    {
        "function": "getLocale",
        "parameters": [
            ""
        ],
        "comments": "Gets the locale to be used during formatting."
    },
    {
        "function": "getResolverFields",
        "parameters": [
            ""
        ],
        "comments": "Gets the resolver fields to use during parsing."
    },
    {
        "function": "getResolverStyle",
        "parameters": [
            ""
        ],
        "comments": "Gets the resolver style to use during parsing."
    },
    {
        "function": "getZone",
        "parameters": [
            ""
        ],
        "comments": "Gets the overriding zone to be used during formatting."
    },
    {
        "function": "localizedBy",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a copy of this formatter with localized values of the locale, calendar, region, decimal style and/or timezone, that supercede values in this formatter."
    },
    {
        "function": "ofLocalizedDate",
        "parameters": [
            "FormatStyle"
        ],
        "comments": "Returns a locale specific date format for the ISO chronology."
    },
    {
        "function": "ofLocalizedDateTime",
        "parameters": [
            "FormatStyle"
        ],
        "comments": "Returns a locale specific date-time formatter for the ISO chronology."
    },
    {
        "function": "ofLocalizedDateTime",
        "parameters": [
            "FormatStyle",
            "FormatStyle"
        ],
        "comments": "Returns a locale specific date and time format for the ISO chronology."
    },
    {
        "function": "ofLocalizedTime",
        "parameters": [
            "FormatStyle"
        ],
        "comments": "Returns a locale specific time format for the ISO chronology."
    },
    {
        "function": "ofPattern",
        "parameters": [
            "String"
        ],
        "comments": "Creates a formatter using the specified pattern."
    },
    {
        "function": "ofPattern",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Creates a formatter using the specified pattern and locale."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Fully parses the text producing a temporal object."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "ParsePosition"
        ],
        "comments": "Parses the text using this formatter, providing control over the text position."
    },
    {
        "function": "parse",
        "parameters": [
            "CharSequence",
            "TemporalQuery<T>"
        ],
        "comments": "Fully parses the text producing an object of the specified type."
    },
    {
        "function": "parseBest",
        "parameters": [
            "CharSequence",
            "TemporalQuery<?>..."
        ],
        "comments": "Fully parses the text producing an object of one of the specified types."
    },
    {
        "function": "parsedExcessDays",
        "parameters": [
            ""
        ],
        "comments": "A query that provides access to the excess days that were parsed."
    },
    {
        "function": "parsedLeapSecond",
        "parameters": [
            ""
        ],
        "comments": "A query that provides access to whether a leap-second was parsed."
    },
    {
        "function": "parseUnresolved",
        "parameters": [
            "CharSequence",
            "ParsePosition"
        ],
        "comments": "Parses the text using this formatter, without resolving the result, intended for advanced use cases."
    },
    {
        "function": "toFormat",
        "parameters": [
            ""
        ],
        "comments": "Returns this formatter as a java.text.Format instance."
    },
    {
        "function": "toFormat",
        "parameters": [
            "TemporalQuery<?>"
        ],
        "comments": "Returns this formatter as a java.text.Format instance that will parse using the specified query."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a description of the underlying formatters."
    },
    {
        "function": "withChronology",
        "parameters": [
            "Chronology"
        ],
        "comments": "Returns a copy of this formatter with a new override chronology."
    },
    {
        "function": "withDecimalStyle",
        "parameters": [
            "DecimalStyle"
        ],
        "comments": "Returns a copy of this formatter with a new DecimalStyle."
    },
    {
        "function": "withLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a copy of this formatter with a new locale."
    },
    {
        "function": "withResolverFields",
        "parameters": [
            "TemporalField..."
        ],
        "comments": "Returns a copy of this formatter with a new set of resolver fields."
    },
    {
        "function": "withResolverFields",
        "parameters": [
            "Set<TemporalField>"
        ],
        "comments": "Returns a copy of this formatter with a new set of resolver fields."
    },
    {
        "function": "withResolverStyle",
        "parameters": [
            "ResolverStyle"
        ],
        "comments": "Returns a copy of this formatter with a new resolver style."
    },
    {
        "function": "withZone",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Returns a copy of this formatter with a new override zone."
    },
    {
        "function": "append",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Constructs a new instance of the builder."
    },
    {
        "function": "appendChronologyId",
        "parameters": [
            ""
        ],
        "comments": "Appends all the elements of a formatter to the builder."
    },
    {
        "function": "appendChronologyText",
        "parameters": [
            "TextStyle"
        ],
        "comments": "Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter."
    },
    {
        "function": "appendFraction",
        "parameters": [
            "TemporalField",
            "int",
            "int",
            "boolean"
        ],
        "comments": "Appends the chronology name to the formatter."
    },
    {
        "function": "appendGenericZoneText",
        "parameters": [
            "TextStyle"
        ],
        "comments": "Appends the fractional value of a date-time field to the formatter."
    },
    {
        "function": "appendGenericZoneText",
        "parameters": [
            "TextStyle",
            "Set<ZoneId>"
        ],
        "comments": "Appends the generic time-zone name, such as 'Pacific Time', to the formatter."
    },
    {
        "function": "appendInstant",
        "parameters": [
            ""
        ],
        "comments": "Appends the generic time-zone name, such as 'Pacific Time', to the formatter."
    },
    {
        "function": "appendInstant",
        "parameters": [
            "int"
        ],
        "comments": "Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three."
    },
    {
        "function": "appendLiteral",
        "parameters": [
            "char"
        ],
        "comments": "Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits."
    },
    {
        "function": "appendLiteral",
        "parameters": [
            "String"
        ],
        "comments": "Appends a character literal to the formatter."
    },
    {
        "function": "appendLocalized",
        "parameters": [
            "FormatStyle",
            "FormatStyle"
        ],
        "comments": "Appends a string literal to the formatter."
    },
    {
        "function": "appendLocalizedOffset",
        "parameters": [
            "TextStyle"
        ],
        "comments": "Appends a localized date-time pattern to the formatter."
    },
    {
        "function": "appendOffset",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Appends the localized zone offset, such as 'GMT+01:00', to the formatter."
    },
    {
        "function": "appendOffsetId",
        "parameters": [
            ""
        ],
        "comments": "Appends the zone offset, such as '+01:00', to the formatter."
    },
    {
        "function": "appendOptional",
        "parameters": [
            "DateTimeFormatter"
        ],
        "comments": "Appends the zone offset, such as '+01:00', to the formatter."
    },
    {
        "function": "appendPattern",
        "parameters": [
            "String"
        ],
        "comments": "Appends a formatter to the builder which will optionally format/parse."
    },
    {
        "function": "appendText",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Appends the elements defined by the specified pattern to the builder."
    },
    {
        "function": "appendText",
        "parameters": [
            "TemporalField",
            "TextStyle"
        ],
        "comments": "Appends the text of a date-time field to the formatter using the full text style."
    },
    {
        "function": "appendText",
        "parameters": [
            "TemporalField",
            "Map<Long",
            "String>"
        ],
        "comments": "Appends the text of a date-time field to the formatter."
    },
    {
        "function": "appendValue",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Appends the text of a date-time field to the formatter using the specified map to supply the text."
    },
    {
        "function": "appendValue",
        "parameters": [
            "TemporalField",
            "int"
        ],
        "comments": "Appends the value of a date-time field to the formatter using a normal output style."
    },
    {
        "function": "appendValue",
        "parameters": [
            "TemporalField",
            "int",
            "int",
            "SignStyle"
        ],
        "comments": "Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach."
    },
    {
        "function": "appendValueReduced",
        "parameters": [
            "TemporalField",
            "int",
            "int",
            "int"
        ],
        "comments": "Appends the value of a date-time field to the formatter providing full control over formatting."
    },
    {
        "function": "appendValueReduced",
        "parameters": [
            "TemporalField",
            "int",
            "int",
            "ChronoLocalDate"
        ],
        "comments": "Appends the reduced value of a date-time field to the formatter."
    },
    {
        "function": "appendZoneId",
        "parameters": [
            ""
        ],
        "comments": "Appends the reduced value of a date-time field to the formatter."
    },
    {
        "function": "appendZoneOrOffsetId",
        "parameters": [
            ""
        ],
        "comments": "Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter."
    },
    {
        "function": "appendZoneRegionId",
        "parameters": [
            ""
        ],
        "comments": "Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID."
    },
    {
        "function": "appendZoneText",
        "parameters": [
            "TextStyle"
        ],
        "comments": "Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a ZoneOffset."
    },
    {
        "function": "appendZoneText",
        "parameters": [
            "TextStyle",
            "Set<ZoneId>"
        ],
        "comments": "Appends the time-zone name, such as 'British Summer Time', to the formatter."
    },
    {
        "function": "getLocalizedDateTimePattern",
        "parameters": [
            "FormatStyle",
            "FormatStyle",
            "Chronology",
            "Locale"
        ],
        "comments": "Appends the time-zone name, such as 'British Summer Time', to the formatter."
    },
    {
        "function": "optionalEnd",
        "parameters": [
            ""
        ],
        "comments": "Gets the formatting pattern for date and time styles for a locale and chronology."
    },
    {
        "function": "optionalStart",
        "parameters": [
            ""
        ],
        "comments": "Ends an optional section."
    },
    {
        "function": "padNext",
        "parameters": [
            "int"
        ],
        "comments": "Mark the start of an optional section."
    },
    {
        "function": "padNext",
        "parameters": [
            "int",
            "char"
        ],
        "comments": "Causes the next added printer/parser to pad to a fixed width using a space."
    },
    {
        "function": "parseCaseInsensitive",
        "parameters": [
            ""
        ],
        "comments": "Causes the next added printer/parser to pad to a fixed width."
    },
    {
        "function": "parseCaseSensitive",
        "parameters": [
            ""
        ],
        "comments": "Changes the parse style to be case insensitive for the remainder of the formatter."
    },
    {
        "function": "parseDefaulting",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Changes the parse style to be case sensitive for the remainder of the formatter."
    },
    {
        "function": "parseLenient",
        "parameters": [
            ""
        ],
        "comments": "Appends a default value for a field to the formatter for use in parsing."
    },
    {
        "function": "parseStrict",
        "parameters": [
            ""
        ],
        "comments": "Changes the parse style to be lenient for the remainder of the formatter."
    },
    {
        "function": "toFormatter",
        "parameters": [
            ""
        ],
        "comments": "Changes the parse style to be strict for the remainder of the formatter."
    },
    {
        "function": "toFormatter",
        "parameters": [
            "Locale"
        ],
        "comments": "Completes this builder by creating the DateTimeFormatter using the default locale."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this DecimalStyle is equal to another DecimalStyle."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Lists all the locales that are supported."
    },
    {
        "function": "getDecimalSeparator",
        "parameters": [
            ""
        ],
        "comments": "Gets the character that represents the decimal point."
    },
    {
        "function": "getNegativeSign",
        "parameters": [
            ""
        ],
        "comments": "Gets the character that represents the negative sign."
    },
    {
        "function": "getPositiveSign",
        "parameters": [
            ""
        ],
        "comments": "Gets the character that represents the positive sign."
    },
    {
        "function": "getZeroDigit",
        "parameters": [
            ""
        ],
        "comments": "Gets the character that represents zero."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this DecimalStyle."
    },
    {
        "function": "of",
        "parameters": [
            "Locale"
        ],
        "comments": "Obtains the DecimalStyle for the specified locale."
    },
    {
        "function": "ofDefaultLocale",
        "parameters": [
            ""
        ],
        "comments": "Obtains the DecimalStyle for the default FORMAT locale."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this DecimalStyle."
    },
    {
        "function": "withDecimalSeparator",
        "parameters": [
            "char"
        ],
        "comments": "Returns a copy of the info with a new character that represents the decimal point."
    },
    {
        "function": "withNegativeSign",
        "parameters": [
            "char"
        ],
        "comments": "Returns a copy of the info with a new character that represents the negative sign."
    },
    {
        "function": "withPositiveSign",
        "parameters": [
            "char"
        ],
        "comments": "Returns a copy of the info with a new character that represents the positive sign."
    },
    {
        "function": "withZeroDigit",
        "parameters": [
            "char"
        ],
        "comments": "Returns a copy of the info with a new character that represents zero."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Full text style, with the most detail."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Long text style, with lots of detail."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Style to resolve dates and times leniently."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Style to resolve dates and times in a smart, or intelligent, manner."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Style to always output the sign, where zero will output '+'."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Style to always output the sign if the value exceeds the pad width."
    },
    {
        "function": "asNormal",
        "parameters": [
            ""
        ],
        "comments": "Full text, typically the full description."
    },
    {
        "function": "asStandalone",
        "parameters": [
            ""
        ],
        "comments": "Full text for stand-alone use, typically the full description."
    },
    {
        "function": "isStandalone",
        "parameters": [
            ""
        ],
        "comments": "Narrow text, typically a single letter."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Narrow text for stand-alone use, typically a single letter."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Short text, typically an abbreviation."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Checks if the specified unit is supported."
    },
    {
        "function": "minus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns an object of the same type as this object with the specified period subtracted."
    },
    {
        "function": "minus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount subtracted."
    },
    {
        "function": "plus",
        "parameters": [
            "long",
            "TemporalUnit"
        ],
        "comments": "Returns an object of the same type as this object with the specified period added."
    },
    {
        "function": "plus",
        "parameters": [
            "TemporalAmount"
        ],
        "comments": "Returns an object of the same type as this object with an amount added."
    },
    {
        "function": "until",
        "parameters": [
            "Temporal",
            "TemporalUnit"
        ],
        "comments": "Calculates the amount of time until another temporal in terms of the specified unit."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalAdjuster"
        ],
        "comments": "Returns an adjusted object of the same type as this object with the adjustment made."
    },
    {
        "function": "with",
        "parameters": [
            "TemporalField",
            "long"
        ],
        "comments": "Returns an object of the same type as this object with the specified field altered."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field as an int."
    },
    {
        "function": "getLong",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the value of the specified field as a long."
    },
    {
        "function": "isSupported",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Checks if the specified field is supported."
    },
    {
        "function": "query",
        "parameters": [
            "TemporalQuery<R>"
        ],
        "comments": "Queries this date-time."
    },
    {
        "function": "range",
        "parameters": [
            "TemporalField"
        ],
        "comments": "Gets the range of valid values for the specified field."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adjusts the specified temporal object."
    },
    {
        "function": "addTo",
        "parameters": [
            "Temporal"
        ],
        "comments": "Adds to the specified temporal object."
    },
    {
        "function": "get",
        "parameters": [
            "TemporalUnit"
        ],
        "comments": "Returns the value of the requested unit."
    },
    {
        "function": "getUnits",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of units uniquely defining the value of this TemporalAmount."
    },
    {
        "function": "subtractFrom",
        "parameters": [
            "Temporal"
        ],
        "comments": "Subtracts this object from the specified temporal object."
    },
    {
        "function": "adjustInto",
        "parameters": [
            "R",
            "long"
        ],
        "comments": "Returns a copy of the specified temporal object with the value of this field set."
    },
    {
        "function": "getBaseUnit",
        "parameters": [
            ""
        ],
        "comments": "Gets the unit that the field is measured in."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the display name for the field in the requested locale."
    },
    {
        "function": "getFrom",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Gets the value of this field from the specified temporal object."
    },
    {
        "function": "getRangeUnit",
        "parameters": [
            ""
        ],
        "comments": "Gets the range that the field is bound by."
    },
    {
        "function": "isDateBased",
        "parameters": [
            ""
        ],
        "comments": "Checks if this field represents a component of a date."
    },
    {
        "function": "isSupportedBy",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Checks if this field is supported by the temporal object."
    },
    {
        "function": "isTimeBased",
        "parameters": [
            ""
        ],
        "comments": "Checks if this field represents a component of a time."
    },
    {
        "function": "range",
        "parameters": [
            ""
        ],
        "comments": "Gets the range of valid values for the field."
    },
    {
        "function": "rangeRefinedBy",
        "parameters": [
            "TemporalAccessor"
        ],
        "comments": "Get the range of valid values for this field using the temporal object to refine the result."
    },
    {
        "function": "resolve",
        "parameters": [
            "Map<TemporalField",
            "Long>",
            "TemporalAccessor",
            "ResolverStyle"
        ],
        "comments": "Resolves this field to provide a simpler alternative or a date."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Gets a descriptive name for the field."
    },
    {
        "function": "addTo",
        "parameters": [
            "R",
            "long"
        ],
        "comments": "Returns a copy of the specified temporal object with the specified period added."
    },
    {
        "function": "between",
        "parameters": [
            "Temporal",
            "Temporal"
        ],
        "comments": "Calculates the amount of time between two temporal objects."
    },
    {
        "function": "getDuration",
        "parameters": [
            ""
        ],
        "comments": "Gets the duration of this unit, which may be an estimate."
    },
    {
        "function": "isDateBased",
        "parameters": [
            ""
        ],
        "comments": "Checks if this unit represents a component of a date."
    },
    {
        "function": "isDurationEstimated",
        "parameters": [
            ""
        ],
        "comments": "Checks if the duration of the unit is an estimate."
    },
    {
        "function": "isSupportedBy",
        "parameters": [
            "Temporal"
        ],
        "comments": "Checks if this unit is supported by the specified temporal object."
    },
    {
        "function": "isTimeBased",
        "parameters": [
            ""
        ],
        "comments": "Checks if this unit represents a component of a time."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Gets a descriptive name for the unit."
    },
    {
        "function": "dayOfWeekInMonth",
        "parameters": [
            "int",
            "DayOfWeek"
        ],
        "comments": "Returns the day-of-week in month adjuster, which returns a new date with the ordinal day-of-week based on the month."
    },
    {
        "function": "firstDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"first day of month\" adjuster, which returns a new date set to the first day of the current month."
    },
    {
        "function": "firstDayOfNextMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"first day of next month\" adjuster, which returns a new date set to the first day of the next month."
    },
    {
        "function": "firstDayOfNextYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"first day of next year\" adjuster, which returns a new date set to the first day of the next year."
    },
    {
        "function": "firstDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"first day of year\" adjuster, which returns a new date set to the first day of the current year."
    },
    {
        "function": "firstInMonth",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week."
    },
    {
        "function": "lastDayOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"last day of month\" adjuster, which returns a new date set to the last day of the current month."
    },
    {
        "function": "lastDayOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"last day of year\" adjuster, which returns a new date set to the last day of the current year."
    },
    {
        "function": "lastInMonth",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week."
    },
    {
        "function": "next",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted."
    },
    {
        "function": "nextOrSame",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned."
    },
    {
        "function": "ofDateAdjuster",
        "parameters": [
            "UnaryOperator<LocalDate>"
        ],
        "comments": "Obtains a TemporalAdjuster that wraps a date adjuster."
    },
    {
        "function": "previous",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted."
    },
    {
        "function": "previousOrSame",
        "parameters": [
            "DayOfWeek"
        ],
        "comments": "Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned."
    },
    {
        "function": "chronology",
        "parameters": [
            ""
        ],
        "comments": "A query for the Chronology."
    },
    {
        "function": "localDate",
        "parameters": [
            ""
        ],
        "comments": "A query for LocalDate returning null if not found."
    },
    {
        "function": "localTime",
        "parameters": [
            ""
        ],
        "comments": "A query for LocalTime returning null if not found."
    },
    {
        "function": "offset",
        "parameters": [
            ""
        ],
        "comments": "A query for ZoneOffset returning null if not found."
    },
    {
        "function": "precision",
        "parameters": [
            ""
        ],
        "comments": "A query for the smallest supported unit."
    },
    {
        "function": "zone",
        "parameters": [
            ""
        ],
        "comments": "A lenient query for the ZoneId, falling back to the ZoneOffset."
    },
    {
        "function": "zoneId",
        "parameters": [
            ""
        ],
        "comments": "A strict query for the ZoneId."
    },
    {
        "function": "checkValidIntValue",
        "parameters": [
            "long",
            "TemporalField"
        ],
        "comments": "Checks that the specified value is valid and fits in an int."
    },
    {
        "function": "checkValidValue",
        "parameters": [
            "long",
            "TemporalField"
        ],
        "comments": "Checks that the specified value is valid."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this range is equal to another range."
    },
    {
        "function": "getLargestMinimum",
        "parameters": [
            ""
        ],
        "comments": "Gets the largest possible minimum value that the field can take."
    },
    {
        "function": "getMaximum",
        "parameters": [
            ""
        ],
        "comments": "Gets the maximum value that the field can take."
    },
    {
        "function": "getMinimum",
        "parameters": [
            ""
        ],
        "comments": "Gets the minimum value that the field can take."
    },
    {
        "function": "getSmallestMaximum",
        "parameters": [
            ""
        ],
        "comments": "Gets the smallest possible maximum value that the field can take."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this range."
    },
    {
        "function": "isFixed",
        "parameters": [
            ""
        ],
        "comments": "Is the value range fixed and fully known."
    },
    {
        "function": "isIntValue",
        "parameters": [
            ""
        ],
        "comments": "Checks if all values in the range fit in an int."
    },
    {
        "function": "isValidIntValue",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the value is within the valid range and that all values in the range fit in an int."
    },
    {
        "function": "isValidValue",
        "parameters": [
            "long"
        ],
        "comments": "Checks if the value is within the valid range."
    },
    {
        "function": "of",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Obtains a fixed value range."
    },
    {
        "function": "of",
        "parameters": [
            "long",
            "long",
            "long"
        ],
        "comments": "Obtains a variable value range."
    },
    {
        "function": "of",
        "parameters": [
            "long",
            "long",
            "long",
            "long"
        ],
        "comments": "Obtains a fully variable value range."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Outputs this range as a String."
    },
    {
        "function": "dayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Returns a field to access the day of week based on this WeekFields."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this WeekFields is equal to the specified object."
    },
    {
        "function": "getFirstDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the first day-of-week."
    },
    {
        "function": "getMinimalDaysInFirstWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the minimal number of days in the first week."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "A hash code for this WeekFields."
    },
    {
        "function": "of",
        "parameters": [
            "DayOfWeek",
            "int"
        ],
        "comments": "Obtains an instance of WeekFields from the first day-of-week and minimal days."
    },
    {
        "function": "of",
        "parameters": [
            "Locale"
        ],
        "comments": "Obtains an instance of WeekFields appropriate for a locale."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "A string representation of this WeekFields instance."
    },
    {
        "function": "weekBasedYear",
        "parameters": [
            ""
        ],
        "comments": "Returns a field to access the year of a week-based-year based on this WeekFields."
    },
    {
        "function": "weekOfMonth",
        "parameters": [
            ""
        ],
        "comments": "Returns a field to access the week of month based on this WeekFields."
    },
    {
        "function": "weekOfWeekBasedYear",
        "parameters": [
            ""
        ],
        "comments": "Returns a field to access the week of a week-based-year based on this WeekFields."
    },
    {
        "function": "weekOfYear",
        "parameters": [
            ""
        ],
        "comments": "Returns a field to access the week of year based on this WeekFields."
    },
    {
        "function": "checkValidIntValue",
        "parameters": [
            "long"
        ],
        "comments": "The aligned day-of-week within a month."
    },
    {
        "function": "checkValidValue",
        "parameters": [
            "long"
        ],
        "comments": "The aligned day-of-week within a year."
    },
    {
        "function": "isDateBased",
        "parameters": [
            ""
        ],
        "comments": "The aligned week within a month."
    },
    {
        "function": "isTimeBased",
        "parameters": [
            ""
        ],
        "comments": "The aligned week within a year."
    },
    {
        "function": "range",
        "parameters": [
            ""
        ],
        "comments": "The am-pm-of-day."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The clock-hour-of-am-pm."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The clock-hour-of-day."
    },
    {
        "function": "getDuration",
        "parameters": [
            ""
        ],
        "comments": "Unit that represents the concept of a century."
    },
    {
        "function": "isDateBased",
        "parameters": [
            ""
        ],
        "comments": "Unit that represents the concept of a day."
    },
    {
        "function": "isDurationEstimated",
        "parameters": [
            ""
        ],
        "comments": "Unit that represents the concept of a decade."
    },
    {
        "function": "isTimeBased",
        "parameters": [
            ""
        ],
        "comments": "Unit that represents the concept of an era."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Artificial unit that represents the concept of forever."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Unit that represents the concept of half a day, as used in AM/PM."
    },
    {
        "function": "compareTo",
        "parameters": [
            "ZoneOffsetTransition"
        ],
        "comments": "Compares this transition to another based on the transition instant."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this object equals another."
    },
    {
        "function": "getDateTimeAfter",
        "parameters": [
            ""
        ],
        "comments": "Gets the local transition date-time, as would be expressed with the 'after' offset."
    },
    {
        "function": "getDateTimeBefore",
        "parameters": [
            ""
        ],
        "comments": "Gets the local transition date-time, as would be expressed with the 'before' offset."
    },
    {
        "function": "getDuration",
        "parameters": [
            ""
        ],
        "comments": "Gets the duration of the transition."
    },
    {
        "function": "getInstant",
        "parameters": [
            ""
        ],
        "comments": "Gets the transition instant."
    },
    {
        "function": "getOffsetAfter",
        "parameters": [
            ""
        ],
        "comments": "Gets the offset after the transition."
    },
    {
        "function": "getOffsetBefore",
        "parameters": [
            ""
        ],
        "comments": "Gets the offset before the transition."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a suitable hash code."
    },
    {
        "function": "isGap",
        "parameters": [
            ""
        ],
        "comments": "Does this transition represent a gap in the local time-line."
    },
    {
        "function": "isOverlap",
        "parameters": [
            ""
        ],
        "comments": "Does this transition represent an overlap in the local time-line."
    },
    {
        "function": "isValidOffset",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Checks if the specified offset is valid during this transition."
    },
    {
        "function": "of",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance defining a transition between two offsets."
    },
    {
        "function": "toEpochSecond",
        "parameters": [
            ""
        ],
        "comments": "Gets the transition instant as an epoch second."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this object."
    },
    {
        "function": "createTransition",
        "parameters": [
            "int"
        ],
        "comments": "Creates a transition instance for the specified year."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this object equals another."
    },
    {
        "function": "getDayOfMonthIndicator",
        "parameters": [
            ""
        ],
        "comments": "Gets the indicator of the day-of-month of the transition."
    },
    {
        "function": "getDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Gets the day-of-week of the transition."
    },
    {
        "function": "getLocalTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the local time of day of the transition which must be checked with isMidnightEndOfDay()."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Gets the month of the transition."
    },
    {
        "function": "getOffsetAfter",
        "parameters": [
            ""
        ],
        "comments": "Gets the offset after the transition."
    },
    {
        "function": "getOffsetBefore",
        "parameters": [
            ""
        ],
        "comments": "Gets the offset before the transition."
    },
    {
        "function": "getStandardOffset",
        "parameters": [
            ""
        ],
        "comments": "Gets the standard offset in force at the transition."
    },
    {
        "function": "getTimeDefinition",
        "parameters": [
            ""
        ],
        "comments": "Gets the time definition, specifying how to convert the time to an instant."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a suitable hash code."
    },
    {
        "function": "isMidnightEndOfDay",
        "parameters": [
            ""
        ],
        "comments": "Is the transition local time midnight at the end of day."
    },
    {
        "function": "of",
        "parameters": [
            "Month",
            "int",
            "DayOfWeek",
            "LocalTime",
            "boolean",
            "ZoneOffsetTransitionRule.TimeDefinition",
            "ZoneOffset",
            "ZoneOffset",
            "ZoneOffset"
        ],
        "comments": "Obtains an instance defining the yearly rule to create transitions between two offsets."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Checks if this set of rules equals another."
    },
    {
        "function": "getDaylightSavings",
        "parameters": [
            "Instant"
        ],
        "comments": "Gets the amount of daylight savings in use for the specified instant in this zone."
    },
    {
        "function": "getOffset",
        "parameters": [
            "Instant"
        ],
        "comments": "Gets the offset applicable at the specified instant in these rules."
    },
    {
        "function": "getOffset",
        "parameters": [
            "LocalDateTime"
        ],
        "comments": "Gets a suitable offset for the specified local date-time in these rules."
    },
    {
        "function": "getStandardOffset",
        "parameters": [
            "Instant"
        ],
        "comments": "Gets the standard offset for the specified instant in this zone."
    },
    {
        "function": "getTransition",
        "parameters": [
            "LocalDateTime"
        ],
        "comments": "Gets the offset transition applicable at the specified local date-time in these rules."
    },
    {
        "function": "getTransitionRules",
        "parameters": [
            ""
        ],
        "comments": "Gets the list of transition rules for years beyond those defined in the transition list."
    },
    {
        "function": "getTransitions",
        "parameters": [
            ""
        ],
        "comments": "Gets the complete list of fully defined transitions."
    },
    {
        "function": "getValidOffsets",
        "parameters": [
            "LocalDateTime"
        ],
        "comments": "Gets the offset applicable at the specified local date-time in these rules."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns a suitable hash code given the definition of #equals."
    },
    {
        "function": "isDaylightSavings",
        "parameters": [
            "Instant"
        ],
        "comments": "Checks if the specified instant is in daylight savings."
    },
    {
        "function": "isFixedOffset",
        "parameters": [
            ""
        ],
        "comments": "Checks of the zone rules are fixed, such that the offset never varies."
    },
    {
        "function": "isValidOffset",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset"
        ],
        "comments": "Checks if the offset date-time is valid for these rules."
    },
    {
        "function": "nextTransition",
        "parameters": [
            "Instant"
        ],
        "comments": "Gets the next transition after the specified instant."
    },
    {
        "function": "of",
        "parameters": [
            "ZoneOffset"
        ],
        "comments": "Obtains an instance of ZoneRules that has fixed zone rules."
    },
    {
        "function": "of",
        "parameters": [
            "ZoneOffset",
            "ZoneOffset",
            "List<ZoneOffsetTransition>",
            "List<ZoneOffsetTransition>",
            "List<ZoneOffsetTransitionRule>"
        ],
        "comments": "Obtains an instance of a ZoneRules."
    },
    {
        "function": "previousTransition",
        "parameters": [
            "Instant"
        ],
        "comments": "Gets the previous transition before the specified instant."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string describing this object."
    },
    {
        "function": "getAvailableZoneIds",
        "parameters": [
            ""
        ],
        "comments": "Constructor."
    },
    {
        "function": "getRules",
        "parameters": [
            "String",
            "boolean"
        ],
        "comments": "Gets the set of available zone IDs."
    },
    {
        "function": "getVersions",
        "parameters": [
            "String"
        ],
        "comments": "Gets the rules for the zone ID."
    },
    {
        "function": "provideRefresh",
        "parameters": [
            ""
        ],
        "comments": "Gets the history of rules for the zone ID."
    },
    {
        "function": "provideRules",
        "parameters": [
            "String",
            "boolean"
        ],
        "comments": "SPI method to refresh the rules from the underlying data provider."
    },
    {
        "function": "provideVersions",
        "parameters": [
            "String"
        ],
        "comments": "SPI method to get the rules for the zone ID."
    },
    {
        "function": "provideZoneIds",
        "parameters": [
            ""
        ],
        "comments": "SPI method to get the history of rules for the zone ID."
    },
    {
        "function": "refresh",
        "parameters": [
            ""
        ],
        "comments": "SPI method to get the available zone IDs."
    },
    {
        "function": "registerProvider",
        "parameters": [
            "ZoneRulesProvider"
        ],
        "comments": "Refreshes the rules from the underlying data provider."
    },
    {
        "function": "createDateTime",
        "parameters": [
            "LocalDateTime",
            "ZoneOffset",
            "ZoneOffset"
        ],
        "comments": "The local date-time is expressed in terms of the standard offset."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The local date-time is expressed in terms of the UTC offset."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The local date-time is expressed in terms of the wall offset."
    },
    {
        "function": "formatTo",
        "parameters": [
            "Formatter",
            "int",
            "int",
            "int"
        ],
        "comments": "Formats the object using the provided formatter."
    },
    {
        "function": "update",
        "parameters": [
            "Observable",
            "Object"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Returns the next element in the iteration."
    },
    {
        "function": "nextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns the next double element in the iteration."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Returns the next element in the iteration."
    },
    {
        "function": "nextInt",
        "parameters": [
            ""
        ],
        "comments": "Returns the next int element in the iteration."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Returns the next element in the iteration."
    },
    {
        "function": "nextLong",
        "parameters": [
            ""
        ],
        "comments": "Returns the next long element in the iteration."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
    },
    {
        "function": "tryAdvance",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "If a remaining element exists, performs the given action on it, returning true; else returns false."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
    },
    {
        "function": "tryAdvance",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "If a remaining element exists, performs the given action on it, returning true; else returns false."
    },
    {
        "function": "forEachRemaining",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception."
    },
    {
        "function": "tryAdvance",
        "parameters": [
            "Consumer<?"
        ],
        "comments": "If a remaining element exists, performs the given action on it, returning true; else returns false."
    },
    {
        "function": "asList",
        "parameters": [
            "T..."
        ],
        "comments": "Returns a fixed-size list backed by the specified array."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "byte[]",
            "byte"
        ],
        "comments": "Searches the specified array of bytes for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte"
        ],
        "comments": "Searches a range of the specified array of bytes for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "char[]",
            "char"
        ],
        "comments": "Searches the specified array of chars for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "char[]",
            "int",
            "int",
            "char"
        ],
        "comments": "Searches a range of the specified array of chars for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "double[]",
            "double"
        ],
        "comments": "Searches the specified array of doubles for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "double[]",
            "int",
            "int",
            "double"
        ],
        "comments": "Searches a range of the specified array of doubles for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "float[]",
            "float"
        ],
        "comments": "Searches the specified array of floats for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "float[]",
            "int",
            "int",
            "float"
        ],
        "comments": "Searches a range of the specified array of floats for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "int[]",
            "int"
        ],
        "comments": "Searches the specified array of ints for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Searches a range of the specified array of ints for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long"
        ],
        "comments": "Searches a range of the specified array of longs for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "long[]",
            "long"
        ],
        "comments": "Searches the specified array of longs for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short"
        ],
        "comments": "Searches a range of the specified array of shorts for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "short[]",
            "short"
        ],
        "comments": "Searches the specified array of shorts for the specified value using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "Object[]",
            "int",
            "int",
            "Object"
        ],
        "comments": "Searches a range of the specified array for the specified object using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "Object[]",
            "Object"
        ],
        "comments": "Searches the specified array for the specified object using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "T[]",
            "int",
            "int",
            "T",
            "Comparator<?"
        ],
        "comments": "Searches a range of the specified array for the specified object using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "T[]",
            "T",
            "Comparator<?"
        ],
        "comments": "Searches the specified array for the specified object using the binary search algorithm."
    },
    {
        "function": "compare",
        "parameters": [
            "boolean[]",
            "boolean[]"
        ],
        "comments": "Compares two boolean arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "boolean[]",
            "int",
            "int",
            "boolean[]",
            "int",
            "int"
        ],
        "comments": "Compares two boolean arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Compares two byte arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Compares two byte arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "char[]",
            "char[]"
        ],
        "comments": "Compares two char arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "char[]",
            "int",
            "int",
            "char[]",
            "int",
            "int"
        ],
        "comments": "Compares two char arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "double[]",
            "double[]"
        ],
        "comments": "Compares two double arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "double[]",
            "int",
            "int",
            "double[]",
            "int",
            "int"
        ],
        "comments": "Compares two double arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "float[]",
            "float[]"
        ],
        "comments": "Compares two float arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "float[]",
            "int",
            "int",
            "float[]",
            "int",
            "int"
        ],
        "comments": "Compares two float arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "int[]",
            "int[]"
        ],
        "comments": "Compares two int arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int[]",
            "int",
            "int"
        ],
        "comments": "Compares two int arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long[]",
            "int",
            "int"
        ],
        "comments": "Compares two long arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "long[]",
            "long[]"
        ],
        "comments": "Compares two long arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short[]",
            "int",
            "int"
        ],
        "comments": "Compares two short arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "short[]",
            "short[]"
        ],
        "comments": "Compares two short arrays lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "T[]",
            "int",
            "int",
            "T[]",
            "int",
            "int"
        ],
        "comments": "Compares two Object arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "T[]",
            "int",
            "int",
            "T[]",
            "int",
            "int",
            "Comparator<?"
        ],
        "comments": "Compares two Object arrays lexicographically over the specified ranges."
    },
    {
        "function": "compare",
        "parameters": [
            "T[]",
            "T[]"
        ],
        "comments": "Compares two Object arrays, within comparable elements, lexicographically."
    },
    {
        "function": "compare",
        "parameters": [
            "T[]",
            "T[]",
            "Comparator<?"
        ],
        "comments": "Compares two Object arrays lexicographically using a specified comparator."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Compares two byte arrays lexicographically, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "int[]",
            "int[]"
        ],
        "comments": "Compares two int arrays lexicographically, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int[]",
            "int",
            "int"
        ],
        "comments": "Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long[]",
            "int",
            "int"
        ],
        "comments": "Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "long[]",
            "long[]"
        ],
        "comments": "Compares two long arrays lexicographically, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short[]",
            "int",
            "int"
        ],
        "comments": "Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned."
    },
    {
        "function": "compareUnsigned",
        "parameters": [
            "short[]",
            "short[]"
        ],
        "comments": "Compares two short arrays lexicographically, numerically treating elements as unsigned."
    },
    {
        "function": "copyOf",
        "parameters": [
            "boolean[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "char[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "double[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "float[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "int[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "long[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "short[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "T[]",
            "int"
        ],
        "comments": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOf",
        "parameters": [
            "U[]",
            "int",
            "Class<?"
        ],
        "comments": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "boolean[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "T[]",
            "int",
            "int"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "copyOfRange",
        "parameters": [
            "U[]",
            "int",
            "int",
            "Class<?"
        ],
        "comments": "Copies the specified range of the specified array into a new array."
    },
    {
        "function": "deepEquals",
        "parameters": [
            "Object[]",
            "Object[]"
        ],
        "comments": "Returns true if the two specified arrays are deeply equal to one another."
    },
    {
        "function": "deepHashCode",
        "parameters": [
            "Object[]"
        ],
        "comments": "Returns a hash code based on the \"deep contents\" of the specified array."
    },
    {
        "function": "deepToString",
        "parameters": [
            "Object[]"
        ],
        "comments": "Returns a string representation of the \"deep contents\" of the specified array."
    },
    {
        "function": "equals",
        "parameters": [
            "boolean[]",
            "boolean[]"
        ],
        "comments": "Returns true if the two specified arrays of booleans are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "boolean[]",
            "int",
            "int",
            "boolean[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Returns true if the two specified arrays of bytes are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "char[]",
            "char[]"
        ],
        "comments": "Returns true if the two specified arrays of chars are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "char[]",
            "int",
            "int",
            "char[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "double[]",
            "double[]"
        ],
        "comments": "Returns true if the two specified arrays of doubles are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "double[]",
            "int",
            "int",
            "double[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "float[]",
            "float[]"
        ],
        "comments": "Returns true if the two specified arrays of floats are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "float[]",
            "int",
            "int",
            "float[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "int[]",
            "int[]"
        ],
        "comments": "Returns true if the two specified arrays of ints are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "long[]",
            "long[]"
        ],
        "comments": "Returns true if the two specified arrays of longs are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "short[]",
            "short[]"
        ],
        "comments": "Returns true if the two specified arrays of shorts are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object[]",
            "int",
            "int",
            "Object[]",
            "int",
            "int"
        ],
        "comments": "Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "Object[]",
            "Object[]"
        ],
        "comments": "Returns true if the two specified arrays of Objects are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "T[]",
            "int",
            "int",
            "T[]",
            "int",
            "int",
            "Comparator<?"
        ],
        "comments": "Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another."
    },
    {
        "function": "equals",
        "parameters": [
            "T[]",
            "T[]",
            "Comparator<?"
        ],
        "comments": "Returns true if the two specified arrays of Objects are equal to one another."
    },
    {
        "function": "fill",
        "parameters": [
            "boolean[]",
            "boolean"
        ],
        "comments": "Assigns the specified boolean value to each element of the specified array of booleans."
    },
    {
        "function": "fill",
        "parameters": [
            "boolean[]",
            "int",
            "int",
            "boolean"
        ],
        "comments": "Assigns the specified boolean value to each element of the specified range of the specified array of booleans."
    },
    {
        "function": "fill",
        "parameters": [
            "byte[]",
            "byte"
        ],
        "comments": "Assigns the specified byte value to each element of the specified array of bytes."
    },
    {
        "function": "fill",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte"
        ],
        "comments": "Assigns the specified byte value to each element of the specified range of the specified array of bytes."
    },
    {
        "function": "fill",
        "parameters": [
            "char[]",
            "char"
        ],
        "comments": "Assigns the specified char value to each element of the specified array of chars."
    },
    {
        "function": "fill",
        "parameters": [
            "char[]",
            "int",
            "int",
            "char"
        ],
        "comments": "Assigns the specified char value to each element of the specified range of the specified array of chars."
    },
    {
        "function": "fill",
        "parameters": [
            "double[]",
            "double"
        ],
        "comments": "Assigns the specified double value to each element of the specified array of doubles."
    },
    {
        "function": "fill",
        "parameters": [
            "double[]",
            "int",
            "int",
            "double"
        ],
        "comments": "Assigns the specified double value to each element of the specified range of the specified array of doubles."
    },
    {
        "function": "fill",
        "parameters": [
            "float[]",
            "float"
        ],
        "comments": "Assigns the specified float value to each element of the specified array of floats."
    },
    {
        "function": "fill",
        "parameters": [
            "float[]",
            "int",
            "int",
            "float"
        ],
        "comments": "Assigns the specified float value to each element of the specified range of the specified array of floats."
    },
    {
        "function": "fill",
        "parameters": [
            "int[]",
            "int"
        ],
        "comments": "Assigns the specified int value to each element of the specified array of ints."
    },
    {
        "function": "fill",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Assigns the specified int value to each element of the specified range of the specified array of ints."
    },
    {
        "function": "fill",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long"
        ],
        "comments": "Assigns the specified long value to each element of the specified range of the specified array of longs."
    },
    {
        "function": "fill",
        "parameters": [
            "long[]",
            "long"
        ],
        "comments": "Assigns the specified long value to each element of the specified array of longs."
    },
    {
        "function": "fill",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short"
        ],
        "comments": "Assigns the specified short value to each element of the specified range of the specified array of shorts."
    },
    {
        "function": "fill",
        "parameters": [
            "short[]",
            "short"
        ],
        "comments": "Assigns the specified short value to each element of the specified array of shorts."
    },
    {
        "function": "fill",
        "parameters": [
            "Object[]",
            "int",
            "int",
            "Object"
        ],
        "comments": "Assigns the specified Object reference to each element of the specified range of the specified array of Objects."
    },
    {
        "function": "fill",
        "parameters": [
            "Object[]",
            "Object"
        ],
        "comments": "Assigns the specified Object reference to each element of the specified array of Objects."
    },
    {
        "function": "hashCode",
        "parameters": [
            "boolean[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "char[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "double[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "float[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "int[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "long[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "short[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "hashCode",
        "parameters": [
            "Object[]"
        ],
        "comments": "Returns a hash code based on the contents of the specified array."
    },
    {
        "function": "mismatch",
        "parameters": [
            "boolean[]",
            "boolean[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "boolean[]",
            "int",
            "int",
            "boolean[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "char[]",
            "char[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "char[]",
            "int",
            "int",
            "char[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "double[]",
            "double[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "double[]",
            "int",
            "int",
            "double[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "float[]",
            "float[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "float[]",
            "int",
            "int",
            "float[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "int[]",
            "int[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "long[]",
            "int",
            "int",
            "long[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "long[]",
            "long[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "short[]",
            "int",
            "int",
            "short[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "short[]",
            "short[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "Object[]",
            "int",
            "int",
            "Object[]",
            "int",
            "int"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "Object[]",
            "Object[]"
        ],
        "comments": "Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "T[]",
            "int",
            "int",
            "T[]",
            "int",
            "int",
            "Comparator<?"
        ],
        "comments": "Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "mismatch",
        "parameters": [
            "T[]",
            "T[]",
            "Comparator<?"
        ],
        "comments": "Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "double[]",
            "int",
            "int",
            "DoubleBinaryOperator"
        ],
        "comments": "Performs parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "double[]",
            "DoubleBinaryOperator"
        ],
        "comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "int[]",
            "int",
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Performs parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "int[]",
            "IntBinaryOperator"
        ],
        "comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "long[]",
            "int",
            "int",
            "LongBinaryOperator"
        ],
        "comments": "Performs parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "long[]",
            "LongBinaryOperator"
        ],
        "comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "T[]",
            "int",
            "int",
            "BinaryOperator<T>"
        ],
        "comments": "Performs parallelPrefix(Object[], BinaryOperator) for the given subrange of the array."
    },
    {
        "function": "parallelPrefix",
        "parameters": [
            "T[]",
            "BinaryOperator<T>"
        ],
        "comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function."
    },
    {
        "function": "parallelSetAll",
        "parameters": [
            "double[]",
            "IntToDoubleFunction"
        ],
        "comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
        "function": "parallelSetAll",
        "parameters": [
            "int[]",
            "IntUnaryOperator"
        ],
        "comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
        "function": "parallelSetAll",
        "parameters": [
            "long[]",
            "IntToLongFunction"
        ],
        "comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
        "function": "parallelSetAll",
        "parameters": [
            "T[]",
            "IntFunction<?"
        ],
        "comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "char[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "double[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "float[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "int[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "long[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "short[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending numerical order."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "T[]"
        ],
        "comments": "Sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "T[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "T[]",
            "int",
            "int",
            "Comparator<?"
        ],
        "comments": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator."
    },
    {
        "function": "parallelSort",
        "parameters": [
            "T[]",
            "Comparator<?"
        ],
        "comments": "Sorts the specified array of objects according to the order induced by the specified comparator."
    },
    {
        "function": "setAll",
        "parameters": [
            "double[]",
            "IntToDoubleFunction"
        ],
        "comments": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
        "function": "setAll",
        "parameters": [
            "int[]",
            "IntUnaryOperator"
        ],
        "comments": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
        "function": "setAll",
        "parameters": [
            "long[]",
            "IntToLongFunction"
        ],
        "comments": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
        "function": "setAll",
        "parameters": [
            "T[]",
            "IntFunction<?"
        ],
        "comments": "Set all elements of the specified array, using the provided generator function to compute each element."
    },
    {
        "function": "sort",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "char[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "char[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "double[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "float[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "float[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "int[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "long[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "short[]"
        ],
        "comments": "Sorts the specified array into ascending numerical order."
    },
    {
        "function": "sort",
        "parameters": [
            "short[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the array into ascending order."
    },
    {
        "function": "sort",
        "parameters": [
            "Object[]"
        ],
        "comments": "Sorts the specified array of objects into ascending order, according to the natural ordering of its elements."
    },
    {
        "function": "sort",
        "parameters": [
            "Object[]",
            "int",
            "int"
        ],
        "comments": "Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements."
    },
    {
        "function": "sort",
        "parameters": [
            "T[]",
            "int",
            "int",
            "Comparator<?"
        ],
        "comments": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator."
    },
    {
        "function": "sort",
        "parameters": [
            "T[]",
            "Comparator<?"
        ],
        "comments": "Sorts the specified array of objects according to the order induced by the specified comparator."
    },
    {
        "function": "spliterator",
        "parameters": [
            "double[]"
        ],
        "comments": "Returns a Spliterator.OfDouble covering all of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Returns a Spliterator.OfDouble covering the specified range of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "int[]"
        ],
        "comments": "Returns a Spliterator.OfInt covering all of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Returns a Spliterator.OfInt covering the specified range of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "long[]"
        ],
        "comments": "Returns a Spliterator.OfLong covering all of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Returns a Spliterator.OfLong covering the specified range of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "T[]"
        ],
        "comments": "Returns a Spliterator covering all of the specified array."
    },
    {
        "function": "spliterator",
        "parameters": [
            "T[]",
            "int",
            "int"
        ],
        "comments": "Returns a Spliterator covering the specified range of the specified array."
    },
    {
        "function": "stream",
        "parameters": [
            "double[]"
        ],
        "comments": "Returns a sequential DoubleStream with the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "double[]",
            "int",
            "int"
        ],
        "comments": "Returns a sequential DoubleStream with the specified range of the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "int[]"
        ],
        "comments": "Returns a sequential IntStream with the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "int[]",
            "int",
            "int"
        ],
        "comments": "Returns a sequential IntStream with the specified range of the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "long[]"
        ],
        "comments": "Returns a sequential LongStream with the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "long[]",
            "int",
            "int"
        ],
        "comments": "Returns a sequential LongStream with the specified range of the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "T[]"
        ],
        "comments": "Returns a sequential Stream with the specified array as its source."
    },
    {
        "function": "stream",
        "parameters": [
            "T[]",
            "int",
            "int"
        ],
        "comments": "Returns a sequential Stream with the specified range of the specified array as its source."
    },
    {
        "function": "toString",
        "parameters": [
            "boolean[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "char[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "double[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "float[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "int[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "long[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "short[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "toString",
        "parameters": [
            "Object[]"
        ],
        "comments": "Returns a string representation of the contents of the specified array."
    },
    {
        "function": "getDecoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Decoder that decodes using the Basic type base64 encoding scheme."
    },
    {
        "function": "getEncoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Encoder that encodes using the Basic type base64 encoding scheme."
    },
    {
        "function": "getMimeDecoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Decoder that decodes using the MIME type base64 decoding scheme."
    },
    {
        "function": "getMimeEncoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme."
    },
    {
        "function": "getMimeEncoder",
        "parameters": [
            "int",
            "byte[]"
        ],
        "comments": "Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators."
    },
    {
        "function": "getUrlDecoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Decoder that decodes using the URL and Filename safe type base64 encoding scheme."
    },
    {
        "function": "getUrlEncoder",
        "parameters": [
            ""
        ],
        "comments": "Returns a Base64.Encoder that encodes using the URL and Filename safe type base64 encoding scheme."
    },
    {
        "function": "decode",
        "parameters": [
            "byte[]"
        ],
        "comments": "Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array."
    },
    {
        "function": "decode",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0."
    },
    {
        "function": "decode",
        "parameters": [
            "String"
        ],
        "comments": "Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme."
    },
    {
        "function": "decode",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "InputStream"
        ],
        "comments": "Returns an input stream for decoding Base64 encoded byte stream."
    },
    {
        "function": "encode",
        "parameters": [
            "byte[]"
        ],
        "comments": "Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme."
    },
    {
        "function": "encode",
        "parameters": [
            "byte[]",
            "byte[]"
        ],
        "comments": "Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0."
    },
    {
        "function": "encode",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme."
    },
    {
        "function": "encodeToString",
        "parameters": [
            "byte[]"
        ],
        "comments": "Encodes the specified byte array into a String using the Base64 encoding scheme."
    },
    {
        "function": "withoutPadding",
        "parameters": [
            ""
        ],
        "comments": "Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data."
    },
    {
        "function": "wrap",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Wraps an output stream for encoding byte data using the Base64 encoding scheme."
    },
    {
        "function": "and",
        "parameters": [
            "BitSet"
        ],
        "comments": "Creates a new bit set."
    },
    {
        "function": "andNot",
        "parameters": [
            "BitSet"
        ],
        "comments": "Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1."
    },
    {
        "function": "cardinality",
        "parameters": [
            ""
        ],
        "comments": "Performs a logical AND of this target bit set with the argument bit set."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet."
    },
    {
        "function": "clear",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of bits set to true in this BitSet."
    },
    {
        "function": "clear",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets all of the bits in this BitSet to false."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Sets the bit specified by the index to false."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false."
    },
    {
        "function": "flip",
        "parameters": [
            "int"
        ],
        "comments": "Cloning this BitSet produces a new BitSet that is equal to it."
    },
    {
        "function": "flip",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Compares this object against the specified object."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Sets the bit at the specified index to the complement of its current value."
    },
    {
        "function": "get",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the bit with the specified index."
    },
    {
        "function": "intersects",
        "parameters": [
            "BitSet"
        ],
        "comments": "Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive)."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code value for this bit set."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet."
    },
    {
        "function": "nextClearBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns true if this BitSet contains no bits that are set to true."
    },
    {
        "function": "nextSetBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns the \"logical size\" of this BitSet: the index of the highest set bit in the BitSet plus one."
    },
    {
        "function": "or",
        "parameters": [
            "BitSet"
        ],
        "comments": "Returns the index of the first bit that is set to false that occurs on or after the specified starting index."
    },
    {
        "function": "previousClearBit",
        "parameters": [
            "int"
        ],
        "comments": "Returns the index of the first bit that is set to true that occurs on or after the specified starting index."
    },
    {
        "function": "previousSetBit",
        "parameters": [
            "int"
        ],
        "comments": "Performs a logical OR of this bit set with the bit set argument."
    },
    {
        "function": "set",
        "parameters": [
            "int"
        ],
        "comments": "Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the bit at the specified index to true."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int",
            "boolean"
        ],
        "comments": "Sets the bit at the specified index to the specified value."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true."
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": "Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value."
    },
    {
        "function": "toByteArray",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bits of space actually in use by this BitSet to represent bit values."
    },
    {
        "function": "toLongArray",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of indices for which this BitSet contains a bit in the set state."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a new byte array containing all the bits in this bit set."
    },
    {
        "function": "valueOf",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns a new long array containing all the bits in this bit set."
    },
    {
        "function": "valueOf",
        "parameters": [
            "long[]"
        ],
        "comments": "Returns a string representation of this bit set."
    },
    {
        "function": "valueOf",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Returns a new bit set containing all the bits in the given byte array."
    },
    {
        "function": "valueOf",
        "parameters": [
            "LongBuffer"
        ],
        "comments": "Returns a new bit set containing all the bits in the given long array."
    },
    {
        "function": "xor",
        "parameters": [
            "BitSet"
        ],
        "comments": "Returns a new bit set containing all the bits in the given byte buffer between its position and limit."
    },
    {
        "function": "add",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Constructs a Calendar with the default time zone and the default FORMAT locale."
    },
    {
        "function": "after",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a calendar with the specified time zone and locale."
    },
    {
        "function": "before",
        "parameters": [
            "Object"
        ],
        "comments": "Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Returns whether this Calendar represents a time after the time represented by the specified Object."
    },
    {
        "function": "clear",
        "parameters": [
            "int"
        ],
        "comments": "Returns whether this Calendar represents a time before the time represented by the specified Object."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Calendar"
        ],
        "comments": "Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined."
    },
    {
        "function": "complete",
        "parameters": [
            ""
        ],
        "comments": "Creates and returns a copy of this object."
    },
    {
        "function": "computeFields",
        "parameters": [
            ""
        ],
        "comments": "Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects."
    },
    {
        "function": "computeTime",
        "parameters": [
            ""
        ],
        "comments": "Fills in any unset fields in the calendar fields."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Converts the current millisecond time value time to calendar field values in fields[]."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Converts the current calendar field values in fields[] to the millisecond time value time."
    },
    {
        "function": "getActualMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Compares this Calendar to the specified Object."
    },
    {
        "function": "getActualMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value of the given calendar field."
    },
    {
        "function": "getAvailableCalendarTypes",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum value that the specified calendar field could have, given the time value of this Calendar."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum value that the specified calendar field could have, given the time value of this Calendar."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "int",
            "int",
            "Locale"
        ],
        "comments": "Returns an array of all locales for which the getInstance methods of this class can return localized instances."
    },
    {
        "function": "getDisplayNames",
        "parameters": [
            "int",
            "int",
            "Locale"
        ],
        "comments": "Returns the calendar type of this Calendar."
    },
    {
        "function": "getFirstDayOfWeek",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of the calendar field value in the given style and locale."
    },
    {
        "function": "getGreatestMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values."
    },
    {
        "function": "getInstance",
        "parameters": [
            ""
        ],
        "comments": "Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns the highest minimum value for the given calendar field of this Calendar instance."
    },
    {
        "function": "getInstance",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Gets a calendar using the default time zone and locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            "TimeZone",
            "Locale"
        ],
        "comments": "Gets a calendar using the default time zone and specified locale."
    },
    {
        "function": "getLeastMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Gets a calendar using the specified time zone and default locale."
    },
    {
        "function": "getMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Gets a calendar with the specified time zone and locale."
    },
    {
        "function": "getMinimalDaysInFirstWeek",
        "parameters": [
            ""
        ],
        "comments": "Returns the lowest maximum value for the given calendar field of this Calendar instance."
    },
    {
        "function": "getMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Returns the maximum value for the given calendar field of this Calendar instance."
    },
    {
        "function": "getTime",
        "parameters": [
            ""
        ],
        "comments": "Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1."
    },
    {
        "function": "getTimeInMillis",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum value for the given calendar field of this Calendar instance."
    },
    {
        "function": "getTimeZone",
        "parameters": [
            ""
        ],
        "comments": "Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch\")."
    },
    {
        "function": "getWeeksInWeekYear",
        "parameters": [
            ""
        ],
        "comments": "Returns this Calendar's time value in milliseconds."
    },
    {
        "function": "getWeekYear",
        "parameters": [
            ""
        ],
        "comments": "Gets the time zone."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of weeks in the week year represented by this Calendar."
    },
    {
        "function": "internalGet",
        "parameters": [
            "int"
        ],
        "comments": "Returns the week year represented by this Calendar."
    },
    {
        "function": "isLenient",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code for this calendar."
    },
    {
        "function": "isSet",
        "parameters": [
            "int"
        ],
        "comments": "Returns the value of the given calendar field."
    },
    {
        "function": "isWeekDateSupported",
        "parameters": [
            ""
        ],
        "comments": "Tells whether date/time interpretation is to be lenient."
    },
    {
        "function": "roll",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call."
    },
    {
        "function": "roll",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns whether this Calendar supports week dates."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Adds the specified (signed) amount to the specified calendar field without changing larger fields."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the given calendar field to the given value."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH."
    },
    {
        "function": "setFirstDayOfWeek",
        "parameters": [
            "int"
        ],
        "comments": "Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE."
    },
    {
        "function": "setLenient",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND."
    },
    {
        "function": "setMinimalDaysInFirstWeek",
        "parameters": [
            "int"
        ],
        "comments": "Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France."
    },
    {
        "function": "setTime",
        "parameters": [
            "Date"
        ],
        "comments": "Specifies whether or not date/time interpretation is to be lenient."
    },
    {
        "function": "setTimeInMillis",
        "parameters": [
            "long"
        ],
        "comments": "Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1."
    },
    {
        "function": "setTimeZone",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Sets this Calendar's time with the given Date."
    },
    {
        "function": "setWeekDate",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets this Calendar's current time from the given long value."
    },
    {
        "function": "toInstant",
        "parameters": [
            ""
        ],
        "comments": "Sets the time zone with the given time zone value."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Constructs a Calendar.Builder."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a Calendar built from the parameters set by the setter methods."
    },
    {
        "function": "setCalendarType",
        "parameters": [
            "String"
        ],
        "comments": "Sets the field parameter to the given value."
    },
    {
        "function": "setDate",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the calendar type parameter to the given type."
    },
    {
        "function": "setFields",
        "parameters": [
            "int..."
        ],
        "comments": "Sets the date field parameters to the values given by year, month, and dayOfMonth."
    },
    {
        "function": "setInstant",
        "parameters": [
            "long"
        ],
        "comments": "Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value."
    },
    {
        "function": "setInstant",
        "parameters": [
            "Date"
        ],
        "comments": "Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch."
    },
    {
        "function": "setLenient",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the instant parameter to the instant value given by a Date."
    },
    {
        "function": "setLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Sets the lenient mode parameter to the value given by lenient."
    },
    {
        "function": "setTimeOfDay",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the locale parameter to the given locale."
    },
    {
        "function": "setTimeOfDay",
        "parameters": [
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the time of day field parameters to the values given by hourOfDay, minute, and second."
    },
    {
        "function": "setTimeZone",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis."
    },
    {
        "function": "setWeekDate",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the time zone parameter to the given zone."
    },
    {
        "function": "setWeekDefinition",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week."
    },
    {
        "function": "addAll",
        "parameters": [
            "Collection<?",
            "T..."
        ],
        "comments": "Adds all of the specified elements to the specified collection."
    },
    {
        "function": "asLifoQueue",
        "parameters": [
            "Deque<T>"
        ],
        "comments": "Returns a view of a Deque as a Last-in-first-out (Lifo) Queue."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "List<?",
            "T"
        ],
        "comments": "Searches the specified list for the specified object using the binary search algorithm."
    },
    {
        "function": "binarySearch",
        "parameters": [
            "List<?",
            "T",
            "Comparator<?"
        ],
        "comments": "Searches the specified list for the specified object using the binary search algorithm."
    },
    {
        "function": "checkedCollection",
        "parameters": [
            "Collection<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified collection."
    },
    {
        "function": "checkedList",
        "parameters": [
            "List<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified list."
    },
    {
        "function": "checkedMap",
        "parameters": [
            "Map<K",
            "V>",
            "Class<K>",
            "Class<V>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified map."
    },
    {
        "function": "checkedNavigableMap",
        "parameters": [
            "NavigableMap<K",
            "V>",
            "Class<K>",
            "Class<V>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified navigable map."
    },
    {
        "function": "checkedNavigableSet",
        "parameters": [
            "NavigableSet<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified navigable set."
    },
    {
        "function": "checkedQueue",
        "parameters": [
            "Queue<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified queue."
    },
    {
        "function": "checkedSet",
        "parameters": [
            "Set<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified set."
    },
    {
        "function": "checkedSortedMap",
        "parameters": [
            "SortedMap<K",
            "V>",
            "Class<K>",
            "Class<V>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified sorted map."
    },
    {
        "function": "checkedSortedSet",
        "parameters": [
            "SortedSet<E>",
            "Class<E>"
        ],
        "comments": "Returns a dynamically typesafe view of the specified sorted set."
    },
    {
        "function": "copy",
        "parameters": [
            "List<?",
            "List<?"
        ],
        "comments": "Copies all of the elements from one list into another."
    },
    {
        "function": "disjoint",
        "parameters": [
            "Collection<?>",
            "Collection<?>"
        ],
        "comments": "Returns true if the two specified collections have no elements in common."
    },
    {
        "function": "emptyEnumeration",
        "parameters": [
            ""
        ],
        "comments": "Returns an enumeration that has no elements."
    },
    {
        "function": "emptyIterator",
        "parameters": [
            ""
        ],
        "comments": "Returns an iterator that has no elements."
    },
    {
        "function": "emptyList",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty list (immutable)."
    },
    {
        "function": "emptyListIterator",
        "parameters": [
            ""
        ],
        "comments": "Returns a list iterator that has no elements."
    },
    {
        "function": "emptyMap",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty map (immutable)."
    },
    {
        "function": "emptyNavigableMap",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty navigable map (immutable)."
    },
    {
        "function": "emptyNavigableSet",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty navigable set (immutable)."
    },
    {
        "function": "emptySet",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty set (immutable)."
    },
    {
        "function": "emptySortedMap",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty sorted map (immutable)."
    },
    {
        "function": "emptySortedSet",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty sorted set (immutable)."
    },
    {
        "function": "enumeration",
        "parameters": [
            "Collection<T>"
        ],
        "comments": "Returns an enumeration over the specified collection."
    },
    {
        "function": "fill",
        "parameters": [
            "List<?",
            "T"
        ],
        "comments": "Replaces all of the elements of the specified list with the specified element."
    },
    {
        "function": "frequency",
        "parameters": [
            "Collection<?>",
            "Object"
        ],
        "comments": "Returns the number of elements in the specified collection equal to the specified object."
    },
    {
        "function": "indexOfSubList",
        "parameters": [
            "List<?>",
            "List<?>"
        ],
        "comments": "Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
    },
    {
        "function": "lastIndexOfSubList",
        "parameters": [
            "List<?>",
            "List<?>"
        ],
        "comments": "Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
    },
    {
        "function": "list",
        "parameters": [
            "Enumeration<T>"
        ],
        "comments": "Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration."
    },
    {
        "function": "max",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Returns the maximum element of the given collection, according to the natural ordering of its elements."
    },
    {
        "function": "max",
        "parameters": [
            "Collection<?",
            "Comparator<?"
        ],
        "comments": "Returns the maximum element of the given collection, according to the order induced by the specified comparator."
    },
    {
        "function": "min",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Returns the minimum element of the given collection, according to the natural ordering of its elements."
    },
    {
        "function": "min",
        "parameters": [
            "Collection<?",
            "Comparator<?"
        ],
        "comments": "Returns the minimum element of the given collection, according to the order induced by the specified comparator."
    },
    {
        "function": "nCopies",
        "parameters": [
            "int",
            "T"
        ],
        "comments": "Returns an immutable list consisting of n copies of the specified object."
    },
    {
        "function": "newSetFromMap",
        "parameters": [
            "Map<E",
            "Boolean>"
        ],
        "comments": "Returns a set backed by the specified map."
    },
    {
        "function": "replaceAll",
        "parameters": [
            "List<T>",
            "T",
            "T"
        ],
        "comments": "Replaces all occurrences of one specified value in a list with another."
    },
    {
        "function": "reverse",
        "parameters": [
            "List<?>"
        ],
        "comments": "Reverses the order of the elements in the specified list."
    },
    {
        "function": "reverseOrder",
        "parameters": [
            ""
        ],
        "comments": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface."
    },
    {
        "function": "reverseOrder",
        "parameters": [
            "Comparator<T>"
        ],
        "comments": "Returns a comparator that imposes the reverse ordering of the specified comparator."
    },
    {
        "function": "rotate",
        "parameters": [
            "List<?>",
            "int"
        ],
        "comments": "Rotates the elements in the specified list by the specified distance."
    },
    {
        "function": "shuffle",
        "parameters": [
            "List<?>"
        ],
        "comments": "Randomly permutes the specified list using a default source of randomness."
    },
    {
        "function": "shuffle",
        "parameters": [
            "List<?>",
            "Random"
        ],
        "comments": "Randomly permute the specified list using the specified source of randomness."
    },
    {
        "function": "singleton",
        "parameters": [
            "T"
        ],
        "comments": "Returns an immutable set containing only the specified object."
    },
    {
        "function": "singletonList",
        "parameters": [
            "T"
        ],
        "comments": "Returns an immutable list containing only the specified object."
    },
    {
        "function": "singletonMap",
        "parameters": [
            "K",
            "V"
        ],
        "comments": "Returns an immutable map, mapping only the specified key to the specified value."
    },
    {
        "function": "sort",
        "parameters": [
            "List<T>"
        ],
        "comments": "Sorts the specified list into ascending order, according to the natural ordering of its elements."
    },
    {
        "function": "sort",
        "parameters": [
            "List<T>",
            "Comparator<?"
        ],
        "comments": "Sorts the specified list according to the order induced by the specified comparator."
    },
    {
        "function": "swap",
        "parameters": [
            "List<?>",
            "int",
            "int"
        ],
        "comments": "Swaps the elements at the specified positions in the specified list."
    },
    {
        "function": "synchronizedCollection",
        "parameters": [
            "Collection<T>"
        ],
        "comments": "Returns a synchronized (thread-safe) collection backed by the specified collection."
    },
    {
        "function": "synchronizedList",
        "parameters": [
            "List<T>"
        ],
        "comments": "Returns a synchronized (thread-safe) list backed by the specified list."
    },
    {
        "function": "synchronizedMap",
        "parameters": [
            "Map<K",
            "V>"
        ],
        "comments": "Returns a synchronized (thread-safe) map backed by the specified map."
    },
    {
        "function": "synchronizedNavigableMap",
        "parameters": [
            "NavigableMap<K",
            "V>"
        ],
        "comments": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map."
    },
    {
        "function": "synchronizedNavigableSet",
        "parameters": [
            "NavigableSet<T>"
        ],
        "comments": "Returns a synchronized (thread-safe) navigable set backed by the specified navigable set."
    },
    {
        "function": "synchronizedSet",
        "parameters": [
            "Set<T>"
        ],
        "comments": "Returns a synchronized (thread-safe) set backed by the specified set."
    },
    {
        "function": "synchronizedSortedMap",
        "parameters": [
            "SortedMap<K",
            "V>"
        ],
        "comments": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map."
    },
    {
        "function": "synchronizedSortedSet",
        "parameters": [
            "SortedSet<T>"
        ],
        "comments": "Returns a synchronized (thread-safe) sorted set backed by the specified sorted set."
    },
    {
        "function": "unmodifiableCollection",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Returns an unmodifiable view of the specified collection."
    },
    {
        "function": "unmodifiableList",
        "parameters": [
            "List<?"
        ],
        "comments": "Returns an unmodifiable view of the specified list."
    },
    {
        "function": "unmodifiableMap",
        "parameters": [
            "Map<?",
            "?"
        ],
        "comments": "Returns an unmodifiable view of the specified map."
    },
    {
        "function": "unmodifiableNavigableMap",
        "parameters": [
            "NavigableMap<K",
            "?"
        ],
        "comments": "Returns an unmodifiable view of the specified navigable map."
    },
    {
        "function": "unmodifiableNavigableSet",
        "parameters": [
            "NavigableSet<T>"
        ],
        "comments": "Returns an unmodifiable view of the specified navigable set."
    },
    {
        "function": "unmodifiableSet",
        "parameters": [
            "Set<?"
        ],
        "comments": "Returns an unmodifiable view of the specified set."
    },
    {
        "function": "unmodifiableSortedMap",
        "parameters": [
            "SortedMap<K",
            "?"
        ],
        "comments": "Returns an unmodifiable view of the specified sorted map."
    },
    {
        "function": "unmodifiableSortedSet",
        "parameters": [
            "SortedSet<T>"
        ],
        "comments": "Returns an unmodifiable view of the specified sorted set."
    },
    {
        "function": "getAvailableCurrencies",
        "parameters": [
            ""
        ],
        "comments": "Gets the set of available currencies."
    },
    {
        "function": "getCurrencyCode",
        "parameters": [
            ""
        ],
        "comments": "Gets the ISO 4217 currency code of this currency."
    },
    {
        "function": "getDefaultFractionDigits",
        "parameters": [
            ""
        ],
        "comments": "Gets the default number of fraction digits used with this currency."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            ""
        ],
        "comments": "Gets the name that is suitable for displaying this currency for the default DISPLAY locale."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the name that is suitable for displaying this currency for the specified locale."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the Currency instance for the given currency code."
    },
    {
        "function": "getInstance",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns the Currency instance for the country of the given locale."
    },
    {
        "function": "getNumericCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the ISO 4217 numeric code of this currency."
    },
    {
        "function": "getNumericCodeAsString",
        "parameters": [
            ""
        ],
        "comments": "Returns the 3 digit ISO 4217 numeric code of this currency as a String."
    },
    {
        "function": "getSymbol",
        "parameters": [
            ""
        ],
        "comments": "Gets the symbol of this currency for the default DISPLAY locale."
    },
    {
        "function": "getSymbol",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the symbol of this currency for the specified locale."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the ISO 4217 currency code of this currency."
    },
    {
        "function": "after",
        "parameters": [
            "Date"
        ],
        "comments": "Allocates a Date object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond."
    },
    {
        "function": "before",
        "parameters": [
            "Date"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date)."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min)."
    },
    {
        "function": "compareTo",
        "parameters": [
            "Date"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec)."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT."
    },
    {
        "function": "from",
        "parameters": [
            "Instant"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by DateFormat.parse(String s)."
    },
    {
        "function": "getDate",
        "parameters": [
            ""
        ],
        "comments": "Tests if this date is after the specified date."
    },
    {
        "function": "getDay",
        "parameters": [
            ""
        ],
        "comments": "Tests if this date is before the specified date."
    },
    {
        "function": "getHours",
        "parameters": [
            ""
        ],
        "comments": "Return a copy of this object."
    },
    {
        "function": "getMinutes",
        "parameters": [
            ""
        ],
        "comments": "Compares two Dates for ordering."
    },
    {
        "function": "getMonth",
        "parameters": [
            ""
        ],
        "comments": "Compares two dates for equality."
    },
    {
        "function": "getSeconds",
        "parameters": [
            ""
        ],
        "comments": "Obtains an instance of Date from an Instant object."
    },
    {
        "function": "getTime",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH)."
    },
    {
        "function": "getTimezoneOffset",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_WEEK)."
    },
    {
        "function": "getYear",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY)."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE)."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH)."
    },
    {
        "function": "setDate",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.SECOND)."
    },
    {
        "function": "setHours",
        "parameters": [
            "int"
        ],
        "comments": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object."
    },
    {
        "function": "setMinutes",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)."
    },
    {
        "function": "setMonth",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.get(Calendar.YEAR) - 1900."
    },
    {
        "function": "setSeconds",
        "parameters": [
            "int"
        ],
        "comments": "Returns a hash code value for this object."
    },
    {
        "function": "setTime",
        "parameters": [
            "long"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by DateFormat.parse(String s)."
    },
    {
        "function": "setYear",
        "parameters": [
            "int"
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date)."
    },
    {
        "function": "toGMTString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours)."
    },
    {
        "function": "toInstant",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes)."
    },
    {
        "function": "toLocaleString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds)."
    },
    {
        "function": "UTC",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT."
    },
    {
        "function": "accept",
        "parameters": [
            "double"
        ],
        "comments": "Constructs an empty instance with zero count, zero sum, Double.POSITIVE_INFINITY min, Double.NEGATIVE_INFINITY max and zero average."
    },
    {
        "function": "combine",
        "parameters": [
            "DoubleSummaryStatistics"
        ],
        "comments": "Constructs a non-empty instance with the specified count, min, max, and sum."
    },
    {
        "function": "getAverage",
        "parameters": [
            ""
        ],
        "comments": "Records another value into the summary information."
    },
    {
        "function": "getCount",
        "parameters": [
            ""
        ],
        "comments": "Combines the state of another DoubleSummaryStatistics into this one."
    },
    {
        "function": "getMax",
        "parameters": [
            ""
        ],
        "comments": "Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
    },
    {
        "function": "getMin",
        "parameters": [
            ""
        ],
        "comments": "Return the count of values recorded."
    },
    {
        "function": "getSum",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded."
    },
    {
        "function": "getSource",
        "parameters": [
            ""
        ],
        "comments": "Constructs a prototypical Event."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "The object on which the Event initially occurred."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter with the specified file."
    },
    {
        "function": "format",
        "parameters": [
            "String",
            "Object..."
        ],
        "comments": "Constructs a new formatter with the specified file and charset."
    },
    {
        "function": "format",
        "parameters": [
            "Locale",
            "String",
            "Object..."
        ],
        "comments": "Constructs a new formatter with the specified file, charset, and locale."
    },
    {
        "function": "ioException",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter with the specified file, charset, and locale."
    },
    {
        "function": "locale",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter with the specified output stream."
    },
    {
        "function": "out",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter with the specified output stream and charset."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new formatter with the specified output stream, charset, and locale."
    },
    {
        "function": "add",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Constructs a default GregorianCalendar using the current time in the default time zone with the default FORMAT locale."
    },
    {
        "function": "computeFields",
        "parameters": [
            ""
        ],
        "comments": "Constructs a GregorianCalendar with the given date set in the default time zone with the default locale."
    },
    {
        "function": "computeTime",
        "parameters": [
            ""
        ],
        "comments": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default locale."
    },
    {
        "function": "from",
        "parameters": [
            "ZonedDateTime"
        ],
        "comments": "Constructs a GregorianCalendar based on the current time in the default time zone with the given locale."
    },
    {
        "function": "getActualMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Constructs a GregorianCalendar based on the current time in the given time zone with the default FORMAT locale."
    },
    {
        "function": "getActualMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Constructs a GregorianCalendar based on the current time in the given time zone with the given locale."
    },
    {
        "function": "getCalendarType",
        "parameters": [
            ""
        ],
        "comments": "Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules."
    },
    {
        "function": "getGreatestMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Converts the time value (millisecond offset from the Epoch) to calendar field values."
    },
    {
        "function": "getGregorianChange",
        "parameters": [
            ""
        ],
        "comments": "Converts calendar field values to the time value (millisecond offset from the Epoch)."
    },
    {
        "function": "getLeastMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Compares this GregorianCalendar to the specified Object."
    },
    {
        "function": "getMaximum",
        "parameters": [
            "int"
        ],
        "comments": "Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object."
    },
    {
        "function": "getMinimum",
        "parameters": [
            "int"
        ],
        "comments": "Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek, getGregorianChange and getTimeZone methods."
    },
    {
        "function": "getWeeksInWeekYear",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek, getGregorianChange and getTimeZone methods."
    },
    {
        "function": "getWeekYear",
        "parameters": [
            ""
        ],
        "comments": "Returns \"gregory\" as the calendar type."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the highest minimum value for the given calendar field of this GregorianCalendar instance."
    },
    {
        "function": "isLeapYear",
        "parameters": [
            "int"
        ],
        "comments": "Gets the Gregorian Calendar change date."
    },
    {
        "function": "isWeekDateSupported",
        "parameters": [
            ""
        ],
        "comments": "Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance."
    },
    {
        "function": "roll",
        "parameters": [
            "int",
            "boolean"
        ],
        "comments": "Returns the maximum value for the given calendar field of this GregorianCalendar instance."
    },
    {
        "function": "roll",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the minimum value for the given calendar field of this GregorianCalendar instance."
    },
    {
        "function": "setGregorianChange",
        "parameters": [
            "Date"
        ],
        "comments": "Returns the number of weeks in the week year represented by this GregorianCalendar."
    },
    {
        "function": "setWeekDate",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the week year represented by this GregorianCalendar."
    },
    {
        "function": "toZonedDateTime",
        "parameters": [
            ""
        ],
        "comments": "Generates the hash code for this GregorianCalendar object."
    },
    {
        "function": "accept",
        "parameters": [
            "int"
        ],
        "comments": "Constructs an empty instance with zero count, zero sum, Integer.MAX_VALUE min, Integer.MIN_VALUE max and zero average."
    },
    {
        "function": "combine",
        "parameters": [
            "IntSummaryStatistics"
        ],
        "comments": "Constructs a non-empty instance with the specified count, min, max, and sum."
    },
    {
        "function": "getAverage",
        "parameters": [
            ""
        ],
        "comments": "Records a new value into the summary information"
    },
    {
        "function": "getCount",
        "parameters": [
            ""
        ],
        "comments": "Combines the state of another IntSummaryStatistics into this one."
    },
    {
        "function": "getMax",
        "parameters": [
            ""
        ],
        "comments": "Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
    },
    {
        "function": "getMin",
        "parameters": [
            ""
        ],
        "comments": "Returns the count of values recorded."
    },
    {
        "function": "getSum",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded."
    },
    {
        "function": "getContents",
        "parameters": [
            ""
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getKeys",
        "parameters": [
            ""
        ],
        "comments": "Returns an array in which each item is a pair of objects in an Object array."
    },
    {
        "function": "handleKeySet",
        "parameters": [
            ""
        ],
        "comments": "Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Construct a locale from a language code."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Construct a locale from language and country."
    },
    {
        "function": "filter",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<Locale>"
        ],
        "comments": "Construct a locale from language, country and variant."
    },
    {
        "function": "filter",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<Locale>",
            "Locale.FilteringMode"
        ],
        "comments": "Overrides Cloneable."
    },
    {
        "function": "filterTags",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<String>"
        ],
        "comments": "Returns true if this Locale is equal to another object."
    },
    {
        "function": "filterTags",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<String>",
            "Locale.FilteringMode"
        ],
        "comments": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647."
    },
    {
        "function": "forLanguageTag",
        "parameters": [
            "String"
        ],
        "comments": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647."
    },
    {
        "function": "getCountry",
        "parameters": [
            ""
        ],
        "comments": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns a locale for the specified IETF BCP 47 language tag string."
    },
    {
        "function": "getDefault",
        "parameters": [
            "Locale.Category"
        ],
        "comments": "Returns an array of all installed locales."
    },
    {
        "function": "getDisplayCountry",
        "parameters": [
            ""
        ],
        "comments": "Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code."
    },
    {
        "function": "getDisplayCountry",
        "parameters": [
            "Locale"
        ],
        "comments": "Gets the current value of the default locale for this instance of the Java Virtual Machine."
    },
    {
        "function": "getDisplayLanguage",
        "parameters": [
            ""
        ],
        "comments": "Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine."
    },
    {
        "function": "getDisplayLanguage",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a name for the locale's country that is appropriate for display to the user."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            ""
        ],
        "comments": "Returns a name for the locale's country that is appropriate for display to the user."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a name for the locale's language that is appropriate for display to the user."
    },
    {
        "function": "getDisplayScript",
        "parameters": [
            ""
        ],
        "comments": "Returns a name for the locale's language that is appropriate for display to the user."
    },
    {
        "function": "getDisplayScript",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a name for the locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayVariant",
        "parameters": [
            ""
        ],
        "comments": "Returns a name for the locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayVariant",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a name for the locale's script that is appropriate for display to the user."
    },
    {
        "function": "getExtension",
        "parameters": [
            "char"
        ],
        "comments": "Returns a name for the locale's script that is appropriate for display to the user."
    },
    {
        "function": "getExtensionKeys",
        "parameters": [
            ""
        ],
        "comments": "Returns a name for the locale's variant code that is appropriate for display to the user."
    },
    {
        "function": "getISO3Country",
        "parameters": [
            ""
        ],
        "comments": "Returns a name for the locale's variant code that is appropriate for display to the user."
    },
    {
        "function": "getISO3Language",
        "parameters": [
            ""
        ],
        "comments": "Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key."
    },
    {
        "function": "getISOCountries",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of extension keys associated with this locale, or the empty set if it has no extensions."
    },
    {
        "function": "getISOCountries",
        "parameters": [
            "Locale.IsoCountryCode"
        ],
        "comments": "Returns a three-letter abbreviation for this locale's country."
    },
    {
        "function": "getISOLanguages",
        "parameters": [
            ""
        ],
        "comments": "Returns a three-letter abbreviation of this locale's language."
    },
    {
        "function": "getLanguage",
        "parameters": [
            ""
        ],
        "comments": "Returns a list of all 2-letter country codes defined in ISO 3166."
    },
    {
        "function": "getScript",
        "parameters": [
            ""
        ],
        "comments": "Returns a Set of ISO3166 country codes for the specified type."
    },
    {
        "function": "getUnicodeLocaleAttributes",
        "parameters": [
            ""
        ],
        "comments": "Returns a list of all 2-letter language codes defined in ISO 639."
    },
    {
        "function": "getUnicodeLocaleKeys",
        "parameters": [
            ""
        ],
        "comments": "Returns the language code of this Locale."
    },
    {
        "function": "getUnicodeLocaleType",
        "parameters": [
            "String"
        ],
        "comments": "Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code."
    },
    {
        "function": "getVariant",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes."
    },
    {
        "function": "hasExtensions",
        "parameters": [
            ""
        ],
        "comments": "Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the Unicode locale type associated with the specified Unicode locale key for this locale."
    },
    {
        "function": "lookup",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<Locale>"
        ],
        "comments": "Returns the variant code for this locale."
    },
    {
        "function": "lookupTag",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Collection<String>"
        ],
        "comments": "Returns true if this Locale has any  extensions."
    },
    {
        "function": "setDefault",
        "parameters": [
            "Locale"
        ],
        "comments": "Override hashCode."
    },
    {
        "function": "setDefault",
        "parameters": [
            "Locale.Category",
            "Locale"
        ],
        "comments": "Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647."
    },
    {
        "function": "stripExtensions",
        "parameters": [
            ""
        ],
        "comments": "Returns the best-matching language tag using the lookup mechanism defined in RFC 4647."
    },
    {
        "function": "toLanguageTag",
        "parameters": [
            ""
        ],
        "comments": "Sets the default locale for this instance of the Java Virtual Machine."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the default locale for the specified Category for this instance of the Java Virtual Machine."
    },
    {
        "function": "addUnicodeLocaleAttribute",
        "parameters": [
            "String"
        ],
        "comments": "Constructs an empty Builder."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Adds a unicode locale attribute, if not already present, otherwise has no effect."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Returns an instance of Locale created from the fields set on this builder."
    },
    {
        "function": "clearExtensions",
        "parameters": [
            ""
        ],
        "comments": "Resets the builder to its initial, empty state."
    },
    {
        "function": "removeUnicodeLocaleAttribute",
        "parameters": [
            "String"
        ],
        "comments": "Resets the extensions to their initial, empty state."
    },
    {
        "function": "setExtension",
        "parameters": [
            "char",
            "String"
        ],
        "comments": "Removes a unicode locale attribute, if present, otherwise has no effect."
    },
    {
        "function": "setLanguage",
        "parameters": [
            "String"
        ],
        "comments": "Sets the extension for the given key."
    },
    {
        "function": "setLanguageTag",
        "parameters": [
            "String"
        ],
        "comments": "Sets the language."
    },
    {
        "function": "setLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Resets the Builder to match the provided IETF BCP 47 language tag."
    },
    {
        "function": "setRegion",
        "parameters": [
            "String"
        ],
        "comments": "Resets the Builder to match the provided locale."
    },
    {
        "function": "setScript",
        "parameters": [
            "String"
        ],
        "comments": "Sets the region."
    },
    {
        "function": "setUnicodeLocaleKeyword",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Sets the script."
    },
    {
        "function": "setVariant",
        "parameters": [
            "String"
        ],
        "comments": "Sets the Unicode locale keyword type for the given key."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a LanguageRange using the given range."
    },
    {
        "function": "getRange",
        "parameters": [
            ""
        ],
        "comments": "Constructs a LanguageRange using the given range and weight."
    },
    {
        "function": "getWeight",
        "parameters": [
            ""
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the language range of this LanguageRange."
    },
    {
        "function": "mapEquivalents",
        "parameters": [
            "List<Locale.LanguageRange>",
            "Map<String",
            "List<String>>"
        ],
        "comments": "Returns the weight of this LanguageRange."
    },
    {
        "function": "parse",
        "parameters": [
            "String"
        ],
        "comments": "Returns a hash code value for the object."
    },
    {
        "function": "parse",
        "parameters": [
            "String",
            "Map<String",
            "List<String>>"
        ],
        "comments": "Generates a new customized Language Priority List using the given priorityList and map."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Parses the given ranges to generate a Language Priority List."
    },
    {
        "function": "accept",
        "parameters": [
            "int"
        ],
        "comments": "Constructs an empty instance with zero count, zero sum, Long.MAX_VALUE min, Long.MIN_VALUE max and zero average."
    },
    {
        "function": "accept",
        "parameters": [
            "long"
        ],
        "comments": "Constructs a non-empty instance with the specified count, min, max, and sum."
    },
    {
        "function": "combine",
        "parameters": [
            "LongSummaryStatistics"
        ],
        "comments": "Records a new int value into the summary information."
    },
    {
        "function": "getAverage",
        "parameters": [
            ""
        ],
        "comments": "Records a new long value into the summary information."
    },
    {
        "function": "getCount",
        "parameters": [
            ""
        ],
        "comments": "Combines the state of another LongSummaryStatistics into this one."
    },
    {
        "function": "getMax",
        "parameters": [
            ""
        ],
        "comments": "Returns the arithmetic mean of values recorded, or zero if no values have been recorded."
    },
    {
        "function": "getMin",
        "parameters": [
            ""
        ],
        "comments": "Returns the count of values recorded."
    },
    {
        "function": "getSum",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded"
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded."
    },
    {
        "function": "checkFromIndexSize",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)."
    },
    {
        "function": "checkFromToIndex",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)."
    },
    {
        "function": "checkIndex",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)."
    },
    {
        "function": "compare",
        "parameters": [
            "T",
            "T",
            "Comparator<?"
        ],
        "comments": "Returns 0 if the arguments are identical and  c.compare(a, b) otherwise."
    },
    {
        "function": "deepEquals",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Returns true if the arguments are deeply equal to each other and false otherwise."
    },
    {
        "function": "equals",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Returns true if the arguments are equal to each other and false otherwise."
    },
    {
        "function": "hash",
        "parameters": [
            "Object..."
        ],
        "comments": "Generates a hash code for a sequence of input values."
    },
    {
        "function": "hashCode",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the hash code of a non-null argument and 0 for a null argument."
    },
    {
        "function": "isNull",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if the provided reference is null otherwise returns false."
    },
    {
        "function": "nonNull",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if the provided reference is non-null otherwise returns false."
    },
    {
        "function": "requireNonNull",
        "parameters": [
            "T"
        ],
        "comments": "Checks that the specified object reference is not null."
    },
    {
        "function": "requireNonNull",
        "parameters": [
            "T",
            "String"
        ],
        "comments": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is."
    },
    {
        "function": "requireNonNull",
        "parameters": [
            "T",
            "Supplier<String>"
        ],
        "comments": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is."
    },
    {
        "function": "requireNonNullElse",
        "parameters": [
            "T",
            "T"
        ],
        "comments": "Returns the first argument if it is non-null and otherwise returns the non-null second argument."
    },
    {
        "function": "requireNonNullElseGet",
        "parameters": [
            "T",
            "Supplier<?"
        ],
        "comments": "Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get()."
    },
    {
        "function": "toString",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the result of calling toString for a non- null argument and \"null\" for a null argument."
    },
    {
        "function": "toString",
        "parameters": [
            "Object",
            "String"
        ],
        "comments": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise."
    },
    {
        "function": "addObserver",
        "parameters": [
            "Observer"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "clearChanged",
        "parameters": [
            ""
        ],
        "comments": "Construct an Observable with zero Observers."
    },
    {
        "function": "countObservers",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "deleteObserver",
        "parameters": [
            "Observer"
        ],
        "comments": "Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set."
    },
    {
        "function": "deleteObservers",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "hasChanged",
        "parameters": [
            ""
        ],
        "comments": "Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false."
    },
    {
        "function": "notifyObservers",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "notifyObservers",
        "parameters": [
            "Object"
        ],
        "comments": "Returns the number of observers of this Observable object."
    },
    {
        "function": "setChanged",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty OptionalDouble instance."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Indicates whether some other object is \"equal to\" this OptionalDouble."
    },
    {
        "function": "getAsDouble",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present."
    },
    {
        "function": "ifPresent",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise does nothing."
    },
    {
        "function": "ifPresentOrElse",
        "parameters": [
            "DoubleConsumer",
            "Runnable"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise performs the given empty-based action."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "If a value is not present, returns true, otherwise false."
    },
    {
        "function": "isPresent",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns true, otherwise false."
    },
    {
        "function": "of",
        "parameters": [
            "double"
        ],
        "comments": "Returns an OptionalDouble describing the given value."
    },
    {
        "function": "orElse",
        "parameters": [
            "double"
        ],
        "comments": "If a value is present, returns the value, otherwise returns other."
    },
    {
        "function": "orElseGet",
        "parameters": [
            "DoubleSupplier"
        ],
        "comments": "If a value is present, returns the value, otherwise returns the result produced by the supplying function."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            "Supplier<?"
        ],
        "comments": "If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function."
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a non-empty string representation of this OptionalDouble suitable for debugging."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty OptionalInt instance."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Indicates whether some other object is \"equal to\" this OptionalInt."
    },
    {
        "function": "getAsInt",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present."
    },
    {
        "function": "ifPresent",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise does nothing."
    },
    {
        "function": "ifPresentOrElse",
        "parameters": [
            "IntConsumer",
            "Runnable"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise performs the given empty-based action."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "If a value is not present, returns true, otherwise false."
    },
    {
        "function": "isPresent",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns true, otherwise false."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Returns an OptionalInt describing the given value."
    },
    {
        "function": "orElse",
        "parameters": [
            "int"
        ],
        "comments": "If a value is present, returns the value, otherwise returns other."
    },
    {
        "function": "orElseGet",
        "parameters": [
            "IntSupplier"
        ],
        "comments": "If a value is present, returns the value, otherwise returns the result produced by the supplying function."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            "Supplier<?"
        ],
        "comments": "If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function."
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a non-empty string representation of this OptionalInt suitable for debugging."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty OptionalLong instance."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Indicates whether some other object is \"equal to\" this OptionalLong."
    },
    {
        "function": "getAsLong",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present."
    },
    {
        "function": "ifPresent",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise does nothing."
    },
    {
        "function": "ifPresentOrElse",
        "parameters": [
            "LongConsumer",
            "Runnable"
        ],
        "comments": "If a value is present, performs the given action with the value, otherwise performs the given empty-based action."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "If a value is not present, returns true, otherwise false."
    },
    {
        "function": "isPresent",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns true, otherwise false."
    },
    {
        "function": "of",
        "parameters": [
            "long"
        ],
        "comments": "Returns an OptionalLong describing the given value."
    },
    {
        "function": "orElse",
        "parameters": [
            "long"
        ],
        "comments": "If a value is present, returns the value, otherwise returns other."
    },
    {
        "function": "orElseGet",
        "parameters": [
            "LongSupplier"
        ],
        "comments": "If a value is present, returns the value, otherwise returns the result produced by the supplying function."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns the value, otherwise throws NoSuchElementException."
    },
    {
        "function": "orElseThrow",
        "parameters": [
            "Supplier<?"
        ],
        "comments": "If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function."
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": "If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a non-empty string representation of this OptionalLong suitable for debugging."
    },
    {
        "function": "getProperty",
        "parameters": [
            "String"
        ],
        "comments": "Creates an empty property list with no default values."
    },
    {
        "function": "getProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Creates an empty property list with no default values, and with an initial size accommodating the specified number of elements without the need to dynamically resize."
    },
    {
        "function": "list",
        "parameters": [
            "PrintStream"
        ],
        "comments": "Creates an empty property list with the specified defaults."
    },
    {
        "function": "list",
        "parameters": [
            "PrintWriter"
        ],
        "comments": "Searches for the property with the specified key in this property list."
    },
    {
        "function": "load",
        "parameters": [
            "InputStream"
        ],
        "comments": "Searches for the property with the specified key in this property list."
    },
    {
        "function": "load",
        "parameters": [
            "Reader"
        ],
        "comments": "Prints this property list out to the specified output stream."
    },
    {
        "function": "loadFromXML",
        "parameters": [
            "InputStream"
        ],
        "comments": "Prints this property list out to the specified output stream."
    },
    {
        "function": "propertyNames",
        "parameters": [
            ""
        ],
        "comments": "Reads a property list (key and element pairs) from the input byte stream."
    },
    {
        "function": "save",
        "parameters": [
            "OutputStream",
            "String"
        ],
        "comments": "Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format."
    },
    {
        "function": "setProperty",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Loads all of the properties represented by the XML document on the specified input stream into this properties table."
    },
    {
        "function": "store",
        "parameters": [
            "OutputStream",
            "String"
        ],
        "comments": "Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list."
    },
    {
        "function": "store",
        "parameters": [
            "Writer",
            "String"
        ],
        "comments": "Deprecated.This method does not throw an IOException if an I/O error occurs while saving the property list."
    },
    {
        "function": "storeToXML",
        "parameters": [
            "OutputStream",
            "String"
        ],
        "comments": "Calls the Hashtable method put."
    },
    {
        "function": "storeToXML",
        "parameters": [
            "OutputStream",
            "String",
            "String"
        ],
        "comments": "Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the load(InputStream) method."
    },
    {
        "function": "storeToXML",
        "parameters": [
            "OutputStream",
            "String",
            "Charset"
        ],
        "comments": "Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the load(Reader) method."
    },
    {
        "function": "stringPropertyNames",
        "parameters": [
            ""
        ],
        "comments": "Emits an XML document representing all of the properties contained in this table."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new PropertyPermission object with the specified name."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two PropertyPermission objects for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"canonical string representation\" of the actions."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Checks if this PropertyPermission object \"implies\" the specified permission."
    },
    {
        "function": "getKeys",
        "parameters": [
            ""
        ],
        "comments": "Creates a property resource bundle from an InputStream."
    },
    {
        "function": "handleKeySet",
        "parameters": [
            ""
        ],
        "comments": "Creates a property resource bundle from a Reader."
    },
    {
        "function": "doubles",
        "parameters": [
            ""
        ],
        "comments": "Creates a new random number generator."
    },
    {
        "function": "doubles",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Creates a new random number generator using a single long seed."
    },
    {
        "function": "doubles",
        "parameters": [
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values, each between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "doubles",
        "parameters": [
            "long",
            "double",
            "double"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom int values."
    },
    {
        "function": "ints",
        "parameters": [
            "long",
            "int",
            "int"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  int values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values."
    },
    {
        "function": "longs",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom long values."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long",
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long values."
    },
    {
        "function": "next",
        "parameters": [
            "int"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  long values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextBoolean",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Generates the next pseudorandom number."
    },
    {
        "function": "nextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence."
    },
    {
        "function": "nextFloat",
        "parameters": [
            ""
        ],
        "comments": "Generates random bytes and places them into a user-supplied byte array."
    },
    {
        "function": "nextGaussian",
        "parameters": [
            ""
        ],
        "comments": "Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence."
    },
    {
        "function": "nextInt",
        "parameters": [
            ""
        ],
        "comments": "Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int"
        ],
        "comments": "Returns the next pseudorandom, Gaussian (\"normally\") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence."
    },
    {
        "function": "nextLong",
        "parameters": [
            ""
        ],
        "comments": "Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence."
    },
    {
        "function": "setSeed",
        "parameters": [
            "long"
        ],
        "comments": "Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence."
    },
    {
        "function": "clearCache",
        "parameters": [
            ""
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "clearCache",
        "parameters": [
            "ClassLoader"
        ],
        "comments": "Removes all resource bundles from the cache that have been loaded by the caller's module."
    },
    {
        "function": "containsKey",
        "parameters": [
            "String"
        ],
        "comments": "Removes all resource bundles from the cache that have been loaded by the given class loader."
    },
    {
        "function": "getBaseBundleName",
        "parameters": [
            ""
        ],
        "comments": "Determines whether the given key is contained in this ResourceBundle or its parent bundles."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String"
        ],
        "comments": "Returns the base name of this bundle, if known, or null if unknown."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Module"
        ],
        "comments": "Gets a resource bundle using the specified base name, the default locale, and the caller module."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Gets a resource bundle using the specified base name and the default locale on behalf of the specified module."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale",
            "ClassLoader"
        ],
        "comments": "Gets a resource bundle using the specified base name and locale, and the caller module."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale",
            "ClassLoader",
            "ResourceBundle.Control"
        ],
        "comments": "Gets a resource bundle using the specified base name, locale, and class loader."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale",
            "Module"
        ],
        "comments": "Returns a resource bundle using the specified base name, target locale, class loader and control."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale",
            "ResourceBundle.Control"
        ],
        "comments": "Gets a resource bundle using the specified base name and locale on behalf of the specified module."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "ResourceBundle.Control"
        ],
        "comments": "Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader."
    },
    {
        "function": "getKeys",
        "parameters": [
            ""
        ],
        "comments": "Returns a resource bundle using the specified base name, the default locale and the specified control."
    },
    {
        "function": "getLocale",
        "parameters": [
            ""
        ],
        "comments": "Returns an enumeration of the keys."
    },
    {
        "function": "getObject",
        "parameters": [
            "String"
        ],
        "comments": "Returns the locale of this resource bundle."
    },
    {
        "function": "getString",
        "parameters": [
            "String"
        ],
        "comments": "Gets an object for the given key from this resource bundle or one of its parents."
    },
    {
        "function": "getStringArray",
        "parameters": [
            "String"
        ],
        "comments": "Gets a string for the given key from this resource bundle or one of its parents."
    },
    {
        "function": "handleGetObject",
        "parameters": [
            "String"
        ],
        "comments": "Gets a string array for the given key from this resource bundle or one of its parents."
    },
    {
        "function": "handleKeySet",
        "parameters": [
            ""
        ],
        "comments": "Gets an object for the given key from this resource bundle."
    },
    {
        "function": "keySet",
        "parameters": [
            ""
        ],
        "comments": "Returns a Set of the keys contained only in this ResourceBundle."
    },
    {
        "function": "setParent",
        "parameters": [
            "ResourceBundle"
        ],
        "comments": "Returns a Set of all keys contained in this ResourceBundle and its parent bundles."
    },
    {
        "function": "getCandidateLocales",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getControl",
        "parameters": [
            "List<String>"
        ],
        "comments": "Returns a List of Locales as candidate locales for baseName and locale."
    },
    {
        "function": "getFallbackLocale",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a ResourceBundle.Control in which the getFormats method returns the specified formats."
    },
    {
        "function": "getFormats",
        "parameters": [
            "String"
        ],
        "comments": "Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method."
    },
    {
        "function": "getNoFallbackControl",
        "parameters": [
            "List<String>"
        ],
        "comments": "Returns a List of Strings containing formats to be used to load resource bundles for the given baseName."
    },
    {
        "function": "getTimeToLive",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a ResourceBundle.Control in which the getFormats method returns the specified formats and the getFallbackLocale method returns null."
    },
    {
        "function": "needsReload",
        "parameters": [
            "String",
            "Locale",
            "String",
            "ClassLoader",
            "ResourceBundle",
            "long"
        ],
        "comments": "Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control."
    },
    {
        "function": "newBundle",
        "parameters": [
            "String",
            "Locale",
            "String",
            "ClassLoader",
            "boolean"
        ],
        "comments": "Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria."
    },
    {
        "function": "toBundleName",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary."
    },
    {
        "function": "toResourceName",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Converts the given baseName and locale to the bundle name."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "delimiter",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "findAll",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "findAll",
        "parameters": [
            "Pattern"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified input stream."
    },
    {
        "function": "findInLine",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified input stream."
    },
    {
        "function": "findInLine",
        "parameters": [
            "Pattern"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified input stream."
    },
    {
        "function": "findWithinHorizon",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified source."
    },
    {
        "function": "findWithinHorizon",
        "parameters": [
            "Pattern",
            "int"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified string."
    },
    {
        "function": "hasNext",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified channel."
    },
    {
        "function": "hasNext",
        "parameters": [
            "String"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified channel."
    },
    {
        "function": "hasNext",
        "parameters": [
            "Pattern"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified channel."
    },
    {
        "function": "hasNextBigDecimal",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "hasNextBigInteger",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "hasNextBigInteger",
        "parameters": [
            "int"
        ],
        "comments": "Constructs a new Scanner that produces values scanned from the specified file."
    },
    {
        "function": "hasNextBoolean",
        "parameters": [
            ""
        ],
        "comments": "Closes this scanner."
    },
    {
        "function": "hasNextByte",
        "parameters": [
            ""
        ],
        "comments": "Returns the Pattern this Scanner is currently using to match delimiters."
    },
    {
        "function": "hasNextByte",
        "parameters": [
            "int"
        ],
        "comments": "Returns a stream of match results that match the provided pattern string."
    },
    {
        "function": "hasNextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of match results from this scanner."
    },
    {
        "function": "hasNextFloat",
        "parameters": [
            ""
        ],
        "comments": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
    },
    {
        "function": "hasNextInt",
        "parameters": [
            ""
        ],
        "comments": "Attempts to find the next occurrence of the specified pattern ignoring delimiters."
    },
    {
        "function": "hasNextInt",
        "parameters": [
            "int"
        ],
        "comments": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters."
    },
    {
        "function": "hasNextLine",
        "parameters": [
            ""
        ],
        "comments": "Attempts to find the next occurrence of the specified pattern."
    },
    {
        "function": "hasNextLong",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this scanner has another token in its input."
    },
    {
        "function": "hasNextLong",
        "parameters": [
            "int"
        ],
        "comments": "Returns true if the next token matches the pattern constructed from the specified string."
    },
    {
        "function": "hasNextShort",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next complete token matches the specified pattern."
    },
    {
        "function": "hasNextShort",
        "parameters": [
            "int"
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the nextBigDecimal() method."
    },
    {
        "function": "ioException",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the nextBigInteger() method."
    },
    {
        "function": "locale",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the nextBigInteger() method."
    },
    {
        "function": "match",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string \"true|false\"."
    },
    {
        "function": "next",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextByte() method."
    },
    {
        "function": "next",
        "parameters": [
            "String"
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextByte() method."
    },
    {
        "function": "next",
        "parameters": [
            "Pattern"
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a double value using the nextDouble() method."
    },
    {
        "function": "nextBigDecimal",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a float value using the nextFloat() method."
    },
    {
        "function": "nextBigInteger",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextInt() method."
    },
    {
        "function": "nextBigInteger",
        "parameters": [
            "int"
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextInt() method."
    },
    {
        "function": "nextBoolean",
        "parameters": [
            ""
        ],
        "comments": "Returns true if there is another line in the input of this scanner."
    },
    {
        "function": "nextByte",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextLong() method."
    },
    {
        "function": "nextByte",
        "parameters": [
            "int"
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextLong() method."
    },
    {
        "function": "nextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextShort() method."
    },
    {
        "function": "nextFloat",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextShort() method."
    },
    {
        "function": "nextInt",
        "parameters": [
            ""
        ],
        "comments": "Returns the IOException last thrown by this Scanner's underlying Readable."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int"
        ],
        "comments": "Returns this scanner's locale."
    },
    {
        "function": "nextLine",
        "parameters": [
            ""
        ],
        "comments": "Returns the match result of the last scanning operation performed by this scanner."
    },
    {
        "function": "nextLong",
        "parameters": [
            ""
        ],
        "comments": "Finds and returns the next complete token from this scanner."
    },
    {
        "function": "nextLong",
        "parameters": [
            "int"
        ],
        "comments": "Returns the next token if it matches the pattern constructed from the specified string."
    },
    {
        "function": "nextShort",
        "parameters": [
            ""
        ],
        "comments": "Returns the next token if it matches the specified pattern."
    },
    {
        "function": "nextShort",
        "parameters": [
            "int"
        ],
        "comments": "Scans the next token of the input as a BigDecimal."
    },
    {
        "function": "radix",
        "parameters": [
            ""
        ],
        "comments": "Scans the next token of the input as a BigInteger."
    },
    {
        "function": "remove",
        "parameters": [
            ""
        ],
        "comments": "Scans the next token of the input as a BigInteger."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Scans the next token of the input into a boolean value and returns that value."
    },
    {
        "function": "skip",
        "parameters": [
            "String"
        ],
        "comments": "Scans the next token of the input as a byte."
    },
    {
        "function": "skip",
        "parameters": [
            "Pattern"
        ],
        "comments": "Scans the next token of the input as a byte."
    },
    {
        "function": "tokens",
        "parameters": [
            ""
        ],
        "comments": "Scans the next token of the input as a double."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Scans the next token of the input as a float."
    },
    {
        "function": "useDelimiter",
        "parameters": [
            "String"
        ],
        "comments": "Scans the next token of the input as an int."
    },
    {
        "function": "useDelimiter",
        "parameters": [
            "Pattern"
        ],
        "comments": "Scans the next token of the input as an int."
    },
    {
        "function": "useLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Advances this scanner past the current line and returns the input that was skipped."
    },
    {
        "function": "useRadix",
        "parameters": [
            "int"
        ],
        "comments": "Scans the next token of the input as a long."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time."
    },
    {
        "function": "getDSTSavings",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time."
    },
    {
        "function": "getOffset",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time."
    },
    {
        "function": "getOffset",
        "parameters": [
            "long"
        ],
        "comments": "Returns a clone of this SimpleTimeZone instance."
    },
    {
        "function": "getRawOffset",
        "parameters": [
            ""
        ],
        "comments": "Compares the equality of two SimpleTimeZone objects."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the amount of time in milliseconds that the clock is advanced during daylight saving time."
    },
    {
        "function": "hasSameRules",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time."
    },
    {
        "function": "inDaylightTime",
        "parameters": [
            "Date"
        ],
        "comments": "Returns the offset of this time zone from UTC at the given time."
    },
    {
        "function": "observesDaylightTime",
        "parameters": [
            ""
        ],
        "comments": "Gets the GMT offset for this time zone."
    },
    {
        "function": "setDSTSavings",
        "parameters": [
            "int"
        ],
        "comments": "Generates the hash code for the SimpleDateFormat object."
    },
    {
        "function": "setEndRule",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Returns true if this zone has the same rules and offset as another zone."
    },
    {
        "function": "setEndRule",
        "parameters": [
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Queries if the given date is in daylight saving time."
    },
    {
        "function": "setEndRule",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "boolean"
        ],
        "comments": "Returns true if this SimpleTimeZone observes Daylight Saving Time."
    },
    {
        "function": "setRawOffset",
        "parameters": [
            "int"
        ],
        "comments": "Sets the amount of time in milliseconds that the clock is advanced during daylight saving time."
    },
    {
        "function": "setStartRule",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the daylight saving time end rule to a fixed date within a month."
    },
    {
        "function": "setStartRule",
        "parameters": [
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Sets the daylight saving time end rule."
    },
    {
        "function": "setStartRule",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "boolean"
        ],
        "comments": "Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th."
    },
    {
        "function": "setStartYear",
        "parameters": [
            "int"
        ],
        "comments": "Sets the base time zone offset to GMT."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the daylight saving time start rule to a fixed date within a month."
    },
    {
        "function": "useDaylightTime",
        "parameters": [
            ""
        ],
        "comments": "Sets the daylight saving time start rule."
    },
    {
        "function": "emptyDoubleSpliterator",
        "parameters": [
            ""
        ],
        "comments": "Creates an empty Spliterator.OfDouble"
    },
    {
        "function": "emptyIntSpliterator",
        "parameters": [
            ""
        ],
        "comments": "Creates an empty Spliterator.OfInt"
    },
    {
        "function": "emptyLongSpliterator",
        "parameters": [
            ""
        ],
        "comments": "Creates an empty Spliterator.OfLong"
    },
    {
        "function": "emptySpliterator",
        "parameters": [
            ""
        ],
        "comments": "Creates an empty Spliterator"
    },
    {
        "function": "iterator",
        "parameters": [
            "Spliterator.OfDouble"
        ],
        "comments": "Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble."
    },
    {
        "function": "iterator",
        "parameters": [
            "Spliterator.OfInt"
        ],
        "comments": "Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt."
    },
    {
        "function": "iterator",
        "parameters": [
            "Spliterator.OfLong"
        ],
        "comments": "Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong."
    },
    {
        "function": "iterator",
        "parameters": [
            "Spliterator<?"
        ],
        "comments": "Creates an Iterator from a Spliterator."
    },
    {
        "function": "spliterator",
        "parameters": [
            "double[]",
            "int"
        ],
        "comments": "Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "double[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "int[]",
            "int"
        ],
        "comments": "Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "int[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "long[]",
            "int"
        ],
        "comments": "Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "long[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "Object[]",
            "int"
        ],
        "comments": "Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "Object[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics."
    },
    {
        "function": "spliterator",
        "parameters": [
            "Collection<?",
            "int"
        ],
        "comments": "Creates a Spliterator using the given collection's Collection.iterator() as the source of elements, and reporting its Collection.size() as its initial size."
    },
    {
        "function": "spliterator",
        "parameters": [
            "Iterator<?",
            "long",
            "int"
        ],
        "comments": "Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size."
    },
    {
        "function": "spliterator",
        "parameters": [
            "PrimitiveIterator.OfDouble",
            "long",
            "int"
        ],
        "comments": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size."
    },
    {
        "function": "spliterator",
        "parameters": [
            "PrimitiveIterator.OfInt",
            "long",
            "int"
        ],
        "comments": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size."
    },
    {
        "function": "spliterator",
        "parameters": [
            "PrimitiveIterator.OfLong",
            "long",
            "int"
        ],
        "comments": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size."
    },
    {
        "function": "spliteratorUnknownSize",
        "parameters": [
            "Iterator<?",
            "int"
        ],
        "comments": "Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate."
    },
    {
        "function": "spliteratorUnknownSize",
        "parameters": [
            "PrimitiveIterator.OfDouble",
            "int"
        ],
        "comments": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate."
    },
    {
        "function": "spliteratorUnknownSize",
        "parameters": [
            "PrimitiveIterator.OfInt",
            "int"
        ],
        "comments": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate."
    },
    {
        "function": "spliteratorUnknownSize",
        "parameters": [
            "PrimitiveIterator.OfLong",
            "int"
        ],
        "comments": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate."
    },
    {
        "function": "characteristics",
        "parameters": [
            ""
        ],
        "comments": "Creates a spliterator reporting the given estimated size and characteristics."
    },
    {
        "function": "estimateSize",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of characteristics of this Spliterator and its elements."
    },
    {
        "function": "trySplit",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
    },
    {
        "function": "characteristics",
        "parameters": [
            ""
        ],
        "comments": "Creates a spliterator reporting the given estimated size and characteristics."
    },
    {
        "function": "estimateSize",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of characteristics of this Spliterator and its elements."
    },
    {
        "function": "trySplit",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
    },
    {
        "function": "characteristics",
        "parameters": [
            ""
        ],
        "comments": "Creates a spliterator reporting the given estimated size and characteristics."
    },
    {
        "function": "estimateSize",
        "parameters": [
            ""
        ],
        "comments": "Returns a set of characteristics of this Spliterator and its elements."
    },
    {
        "function": "trySplit",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute."
    },
    {
        "function": "doubles",
        "parameters": [
            ""
        ],
        "comments": "Creates a new SplittableRandom instance that is likely to generate sequences of values that are statistically independent of those of any other instances in the current program; and may, and typically does, vary across program invocations."
    },
    {
        "function": "doubles",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Creates a new SplittableRandom instance using the specified initial seed."
    },
    {
        "function": "doubles",
        "parameters": [
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "doubles",
        "parameters": [
            "long",
            "double",
            "double"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it."
    },
    {
        "function": "ints",
        "parameters": [
            "long",
            "int",
            "int"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it."
    },
    {
        "function": "longs",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  long values from this generator and/or one split from it."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long",
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it."
    },
    {
        "function": "nextBoolean",
        "parameters": [
            ""
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom boolean value."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double"
        ],
        "comments": "Fills a user-supplied byte array with generated pseudorandom bytes."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "nextInt",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int"
        ],
        "comments": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a pseudorandom int value."
    },
    {
        "function": "nextLong",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextLong",
        "parameters": [
            "long"
        ],
        "comments": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextLong",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns a pseudorandom long value."
    },
    {
        "function": "split",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "add",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Constructs a StringJoiner with no characters in it, with no prefix or suffix, and a copy of the supplied delimiter."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Constructs a StringJoiner with no characters in it using copies of the supplied prefix, delimiter and suffix."
    },
    {
        "function": "merge",
        "parameters": [
            "StringJoiner"
        ],
        "comments": "Adds a copy of the given CharSequence value as the next element of the StringJoiner value."
    },
    {
        "function": "setEmptyValue",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Returns the length of the String representation of this StringJoiner."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty."
    },
    {
        "function": "countTokens",
        "parameters": [
            ""
        ],
        "comments": "Constructs a string tokenizer for the specified string."
    },
    {
        "function": "hasMoreElements",
        "parameters": [
            ""
        ],
        "comments": "Constructs a string tokenizer for the specified string."
    },
    {
        "function": "hasMoreTokens",
        "parameters": [
            ""
        ],
        "comments": "Constructs a string tokenizer for the specified string."
    },
    {
        "function": "nextElement",
        "parameters": [
            ""
        ],
        "comments": "Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception."
    },
    {
        "function": "nextToken",
        "parameters": [
            ""
        ],
        "comments": "Returns the same value as the hasMoreTokens method."
    },
    {
        "function": "nextToken",
        "parameters": [
            "String"
        ],
        "comments": "Tests if there are more tokens available from this tokenizer's string."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Creates a new timer."
    },
    {
        "function": "purge",
        "parameters": [
            ""
        ],
        "comments": "Creates a new timer whose associated thread may be specified to run as a daemon."
    },
    {
        "function": "schedule",
        "parameters": [
            "TimerTask",
            "long"
        ],
        "comments": "Creates a new timer whose associated thread has the specified name."
    },
    {
        "function": "schedule",
        "parameters": [
            "TimerTask",
            "long",
            "long"
        ],
        "comments": "Creates a new timer whose associated thread has the specified name, and may be specified to run as a daemon."
    },
    {
        "function": "schedule",
        "parameters": [
            "TimerTask",
            "Date"
        ],
        "comments": "Terminates this timer, discarding any currently scheduled tasks."
    },
    {
        "function": "schedule",
        "parameters": [
            "TimerTask",
            "Date",
            "long"
        ],
        "comments": "Removes all cancelled tasks from this timer's task queue."
    },
    {
        "function": "scheduleAtFixedRate",
        "parameters": [
            "TimerTask",
            "long",
            "long"
        ],
        "comments": "Schedules the specified task for execution after the specified delay."
    },
    {
        "function": "scheduleAtFixedRate",
        "parameters": [
            "TimerTask",
            "Date",
            "long"
        ],
        "comments": "Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Creates a new timer task."
    },
    {
        "function": "run",
        "parameters": [
            ""
        ],
        "comments": "Cancels this timer task."
    },
    {
        "function": "scheduledExecutionTime",
        "parameters": [
            ""
        ],
        "comments": "The action to be performed by this timer task."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getAvailableIDs",
        "parameters": [
            ""
        ],
        "comments": "Creates a copy of this TimeZone."
    },
    {
        "function": "getAvailableIDs",
        "parameters": [
            "int"
        ],
        "comments": "Gets all the available IDs supported."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Gets the available IDs according to the given time zone offset in milliseconds."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            ""
        ],
        "comments": "Gets the default TimeZone of the Java virtual machine."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "boolean",
            "int"
        ],
        "comments": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "boolean",
            "int",
            "Locale"
        ],
        "comments": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified  locale."
    },
    {
        "function": "getDSTSavings",
        "parameters": [
            ""
        ],
        "comments": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale."
    },
    {
        "function": "getID",
        "parameters": [
            ""
        ],
        "comments": "Returns the amount of time to be added to local standard time to get local wall clock time."
    },
    {
        "function": "getOffset",
        "parameters": [
            "int",
            "int",
            "int",
            "int",
            "int",
            "int"
        ],
        "comments": "Gets the ID of this time zone."
    },
    {
        "function": "getOffset",
        "parameters": [
            "long"
        ],
        "comments": "Gets the time zone offset, for current date, modified in case of daylight savings."
    },
    {
        "function": "getRawOffset",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset of this time zone from UTC at the specified date."
    },
    {
        "function": "getTimeZone",
        "parameters": [
            "String"
        ],
        "comments": "Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone."
    },
    {
        "function": "getTimeZone",
        "parameters": [
            "ZoneId"
        ],
        "comments": "Gets the TimeZone for the given ID."
    },
    {
        "function": "hasSameRules",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Gets the TimeZone for the given zoneId."
    },
    {
        "function": "inDaylightTime",
        "parameters": [
            "Date"
        ],
        "comments": "Returns true if this zone has the same rule and offset as another zone."
    },
    {
        "function": "observesDaylightTime",
        "parameters": [
            ""
        ],
        "comments": "Queries if the given date is in Daylight Saving Time in this time zone."
    },
    {
        "function": "setDefault",
        "parameters": [
            "TimeZone"
        ],
        "comments": "Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time."
    },
    {
        "function": "setID",
        "parameters": [
            "String"
        ],
        "comments": "Sets the TimeZone that is returned by the getDefault method."
    },
    {
        "function": "setRawOffset",
        "parameters": [
            "int"
        ],
        "comments": "Sets the time zone ID."
    },
    {
        "function": "toZoneId",
        "parameters": [
            ""
        ],
        "comments": "Sets the base time zone offset to GMT."
    },
    {
        "function": "useDaylightTime",
        "parameters": [
            ""
        ],
        "comments": "Converts this TimeZone object to a ZoneId."
    },
    {
        "function": "clockSequence",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new UUID using the specified data."
    },
    {
        "function": "compareTo",
        "parameters": [
            "UUID"
        ],
        "comments": "The clock sequence value associated with this UUID."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Compares this UUID with the specified UUID."
    },
    {
        "function": "fromString",
        "parameters": [
            "String"
        ],
        "comments": "Compares this object to the specified object."
    },
    {
        "function": "getLeastSignificantBits",
        "parameters": [
            ""
        ],
        "comments": "Creates a UUID from the string standard representation as described in the toString() method."
    },
    {
        "function": "getMostSignificantBits",
        "parameters": [
            ""
        ],
        "comments": "Returns the least significant 64 bits of this UUID's 128 bit value."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the most significant 64 bits of this UUID's 128 bit value."
    },
    {
        "function": "nameUUIDFromBytes",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns a hash code for this UUID."
    },
    {
        "function": "node",
        "parameters": [
            ""
        ],
        "comments": "Static factory to retrieve a type 3 (name based) UUID based on the specified byte array."
    },
    {
        "function": "randomUUID",
        "parameters": [
            ""
        ],
        "comments": "The node value associated with this UUID."
    },
    {
        "function": "timestamp",
        "parameters": [
            ""
        ],
        "comments": "Static factory to retrieve a type 4 (pseudo randomly generated) UUID."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "The timestamp value associated with this UUID."
    },
    {
        "function": "variant",
        "parameters": [
            ""
        ],
        "comments": "Returns a String object representing this UUID."
    },
    {
        "function": "version",
        "parameters": [
            ""
        ],
        "comments": "The variant number associated with this UUID."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Format the BigDecimal as a decimal number."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Format the BigDecimal in computerized scientific notation."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Category used to represent the default locale for displaying user interfaces."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Category used to represent the default locale for formatting dates, numbers, and/or currencies."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Specifies automatic filtering mode based on the given Language Priority List consisting of language ranges."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Specifies extended filtering."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "PART1_ALPHA2 is used to represent the ISO3166-1 alpha-2 two letter country codes."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "PART1_ALPHA3 is used to represent the ISO3166-1 alpha-3 three letter country codes."
    },
    {
        "function": "getDelay",
        "parameters": [
            "TimeUnit"
        ],
        "comments": "Returns the remaining delay associated with this object, in the given time unit."
    },
    {
        "function": "execute",
        "parameters": [
            "Runnable"
        ],
        "comments": "Executes the given command at some time in the future."
    },
    {
        "function": "awaitTermination",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
    },
    {
        "function": "invokeAll",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Executes the given tasks, returning a list of Futures holding their status and results when all complete."
    },
    {
        "function": "invokeAll",
        "parameters": [
            "Collection<?",
            "long",
            "TimeUnit"
        ],
        "comments": "Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first."
    },
    {
        "function": "invokeAny",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do."
    },
    {
        "function": "invokeAny",
        "parameters": [
            "Collection<?",
            "long",
            "TimeUnit"
        ],
        "comments": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses."
    },
    {
        "function": "isShutdown",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this executor has been shut down."
    },
    {
        "function": "isTerminated",
        "parameters": [
            ""
        ],
        "comments": "Returns true if all tasks have completed following shut down."
    },
    {
        "function": "shutdown",
        "parameters": [
            ""
        ],
        "comments": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
    },
    {
        "function": "shutdownNow",
        "parameters": [
            ""
        ],
        "comments": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable"
        ],
        "comments": "Submits a Runnable task for execution and returns a Future representing that task."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Submits a Runnable task for execution and returns a Future representing that task."
    },
    {
        "function": "submit",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Submits a value-returning task for execution and returns a Future representing the pending results of the task."
    },
    {
        "function": "cancel",
        "parameters": [
            ""
        ],
        "comments": "Causes the Subscriber to (eventually) stop receiving messages."
    },
    {
        "function": "request",
        "parameters": [
            "long"
        ],
        "comments": "Adds the given number n of items to the current unfulfilled demand for this subscription."
    },
    {
        "function": "newThread",
        "parameters": [
            "ForkJoinPool"
        ],
        "comments": "Returns a new worker thread operating in the given pool."
    },
    {
        "function": "block",
        "parameters": [
            ""
        ],
        "comments": "Possibly blocks the current thread, for example waiting for a lock or condition."
    },
    {
        "function": "isReleasable",
        "parameters": [
            ""
        ],
        "comments": "Returns true if blocking is unnecessary."
    },
    {
        "function": "rejectedExecution",
        "parameters": [
            "Runnable",
            "ThreadPoolExecutor"
        ],
        "comments": "Method that may be invoked by a ThreadPoolExecutor when execute cannot accept a task."
    },
    {
        "function": "schedule",
        "parameters": [
            "Runnable",
            "long",
            "TimeUnit"
        ],
        "comments": "Submits a one-shot task that becomes enabled after the given delay."
    },
    {
        "function": "schedule",
        "parameters": [
            "Callable<V>",
            "long",
            "TimeUnit"
        ],
        "comments": "Submits a value-returning one-shot task that becomes enabled after the given delay."
    },
    {
        "function": "scheduleAtFixedRate",
        "parameters": [
            "Runnable",
            "long",
            "long",
            "TimeUnit"
        ],
        "comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on."
    },
    {
        "function": "scheduleWithFixedDelay",
        "parameters": [
            "Runnable",
            "long",
            "long",
            "TimeUnit"
        ],
        "comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next."
    },
    {
        "function": "newThread",
        "parameters": [
            "Runnable"
        ],
        "comments": "Constructs a new Thread."
    },
    {
        "function": "newTaskFor",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Returns a RunnableFuture for the given runnable and default value."
    },
    {
        "function": "newTaskFor",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Returns a RunnableFuture for the given callable task."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable"
        ],
        "comments": "Submits a Runnable task for execution and returns a Future representing that task."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Submits a Runnable task for execution and returns a Future representing that task."
    },
    {
        "function": "submit",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Submits a value-returning task for execution and returns a Future representing the pending results of the task."
    },
    {
        "function": "await",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CountDownLatch initialized with the given count."
    },
    {
        "function": "await",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted."
    },
    {
        "function": "countDown",
        "parameters": [
            ""
        ],
        "comments": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses."
    },
    {
        "function": "getCount",
        "parameters": [
            ""
        ],
        "comments": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the current count."
    },
    {
        "function": "await",
        "parameters": [
            ""
        ],
        "comments": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and does not perform a predefined action when the barrier is tripped."
    },
    {
        "function": "await",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier."
    },
    {
        "function": "getNumberWaiting",
        "parameters": [
            ""
        ],
        "comments": "Waits until all parties have invoked await on this barrier."
    },
    {
        "function": "getParties",
        "parameters": [
            ""
        ],
        "comments": "Waits until all parties have invoked await on this barrier, or the specified waiting time elapses."
    },
    {
        "function": "isBroken",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of parties currently waiting at the barrier."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of parties required to trip this barrier."
    },
    {
        "function": "callable",
        "parameters": [
            "Runnable"
        ],
        "comments": "Returns a Callable object that, when called, runs the given task and returns null."
    },
    {
        "function": "callable",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Returns a Callable object that, when called, runs the given task and returns the given result."
    },
    {
        "function": "callable",
        "parameters": [
            "PrivilegedAction<?>"
        ],
        "comments": "Returns a Callable object that, when called, runs the given privileged action and returns its result."
    },
    {
        "function": "callable",
        "parameters": [
            "PrivilegedExceptionAction<?>"
        ],
        "comments": "Returns a Callable object that, when called, runs the given privileged exception action and returns its result."
    },
    {
        "function": "defaultThreadFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns a default thread factory used to create new threads."
    },
    {
        "function": "newCachedThreadPool",
        "parameters": [
            ""
        ],
        "comments": "Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available."
    },
    {
        "function": "newCachedThreadPool",
        "parameters": [
            "ThreadFactory"
        ],
        "comments": "Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed."
    },
    {
        "function": "newFixedThreadPool",
        "parameters": [
            "int"
        ],
        "comments": "Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue."
    },
    {
        "function": "newFixedThreadPool",
        "parameters": [
            "int",
            "ThreadFactory"
        ],
        "comments": "Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed."
    },
    {
        "function": "newScheduledThreadPool",
        "parameters": [
            "int"
        ],
        "comments": "Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
    },
    {
        "function": "newScheduledThreadPool",
        "parameters": [
            "int",
            "ThreadFactory"
        ],
        "comments": "Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically."
    },
    {
        "function": "newSingleThreadExecutor",
        "parameters": [
            ""
        ],
        "comments": "Creates an Executor that uses a single worker thread operating off an unbounded queue."
    },
    {
        "function": "newSingleThreadExecutor",
        "parameters": [
            "ThreadFactory"
        ],
        "comments": "Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed."
    },
    {
        "function": "newSingleThreadScheduledExecutor",
        "parameters": [
            ""
        ],
        "comments": "Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
    },
    {
        "function": "newSingleThreadScheduledExecutor",
        "parameters": [
            "ThreadFactory"
        ],
        "comments": "Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically."
    },
    {
        "function": "newWorkStealingPool",
        "parameters": [
            ""
        ],
        "comments": "Creates a work-stealing thread pool using the number of available processors as its target parallelism level."
    },
    {
        "function": "newWorkStealingPool",
        "parameters": [
            "int"
        ],
        "comments": "Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention."
    },
    {
        "function": "privilegedCallable",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Returns a Callable object that will, when called, execute the given callable under the current access control context."
    },
    {
        "function": "privilegedCallableUsingCurrentClassLoader",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Returns a Callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader."
    },
    {
        "function": "privilegedThreadFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns a thread factory used to create new threads that have the same permissions as the current thread."
    },
    {
        "function": "unconfigurableExecutorService",
        "parameters": [
            "ExecutorService"
        ],
        "comments": "Returns an object that delegates all defined ExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts."
    },
    {
        "function": "unconfigurableScheduledExecutorService",
        "parameters": [
            "ScheduledExecutorService"
        ],
        "comments": "Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts."
    },
    {
        "function": "defaultBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Returns a default value for Publisher or Subscriber buffering, that may be used in the absence of other constraints."
    },
    {
        "function": "awaitQuiescence",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Creates a ForkJoinPool with parallelism equal to Runtime.availableProcessors(), using defaults for all other parameters (see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit))."
    },
    {
        "function": "awaitTermination",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Creates a ForkJoinPool with the indicated parallelism level, using defaults for all other parameters (see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit))."
    },
    {
        "function": "commonPool",
        "parameters": [
            ""
        ],
        "comments": "Creates a ForkJoinPool with the given parameters (using defaults for others -- see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit))."
    },
    {
        "function": "drainTasksTo",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Creates a ForkJoinPool with the given parameters."
    },
    {
        "function": "execute",
        "parameters": [
            "Runnable"
        ],
        "comments": "If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask.helpQuiesce()."
    },
    {
        "function": "execute",
        "parameters": [
            "ForkJoinTask<?>"
        ],
        "comments": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first."
    },
    {
        "function": "getActiveThreadCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the common pool instance."
    },
    {
        "function": "getAsyncMode",
        "parameters": [
            ""
        ],
        "comments": "Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status."
    },
    {
        "function": "getCommonPoolParallelism",
        "parameters": [
            ""
        ],
        "comments": "Executes the given command at some time in the future."
    },
    {
        "function": "getFactory",
        "parameters": [
            ""
        ],
        "comments": "Arranges for (asynchronous) execution of the given task."
    },
    {
        "function": "getParallelism",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads that are currently stealing or executing tasks."
    },
    {
        "function": "getPoolSize",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined."
    },
    {
        "function": "getQueuedSubmissionCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the targeted parallelism level of the common pool."
    },
    {
        "function": "getQueuedTaskCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the factory used for constructing new workers."
    },
    {
        "function": "getRunningThreadCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the targeted parallelism level of this pool."
    },
    {
        "function": "getStealCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of worker threads that have started but not yet terminated."
    },
    {
        "function": "getUncaughtExceptionHandler",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing."
    },
    {
        "function": "hasQueuedSubmissions",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing)."
    },
    {
        "function": "invoke",
        "parameters": [
            "ForkJoinTask<T>"
        ],
        "comments": "Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization."
    },
    {
        "function": "invokeAll",
        "parameters": [
            "Collection<?"
        ],
        "comments": "Returns an estimate of the total number of tasks stolen from one thread's work queue by another."
    },
    {
        "function": "isQuiescent",
        "parameters": [
            ""
        ],
        "comments": "Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks."
    },
    {
        "function": "isShutdown",
        "parameters": [
            ""
        ],
        "comments": "Returns true if there are any tasks submitted to this pool that have not yet begun executing."
    },
    {
        "function": "isTerminated",
        "parameters": [
            ""
        ],
        "comments": "Performs the given task, returning its result upon completion."
    },
    {
        "function": "isTerminating",
        "parameters": [
            ""
        ],
        "comments": "Executes the given tasks, returning a list of Futures holding their status and results when all complete."
    },
    {
        "function": "managedBlock",
        "parameters": [
            "ForkJoinPool.ManagedBlocker"
        ],
        "comments": "Returns true if all worker threads are currently idle."
    },
    {
        "function": "pollSubmission",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this pool has been shut down."
    },
    {
        "function": "shutdown",
        "parameters": [
            ""
        ],
        "comments": "Returns true if all tasks have completed following shut down."
    },
    {
        "function": "shutdownNow",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the process of termination has commenced but not yet completed."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable"
        ],
        "comments": "Runs the given possibly blocking task."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Removes and returns the next unexecuted submission if one is available."
    },
    {
        "function": "submit",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
    },
    {
        "function": "submit",
        "parameters": [
            "ForkJoinTask<T>"
        ],
        "comments": "Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Submits a Runnable task for execution and returns a Future representing that task."
    },
    {
        "function": "getPool",
        "parameters": [
            ""
        ],
        "comments": "Creates a ForkJoinWorkerThread operating in the given pool."
    },
    {
        "function": "getPoolIndex",
        "parameters": [
            ""
        ],
        "comments": "Returns the pool hosting this thread."
    },
    {
        "function": "onStart",
        "parameters": [
            ""
        ],
        "comments": "Returns the unique index number of this thread in its pool."
    },
    {
        "function": "onTermination",
        "parameters": [
            "Throwable"
        ],
        "comments": "Initializes internal state after construction but before processing any tasks."
    },
    {
        "function": "run",
        "parameters": [
            ""
        ],
        "comments": "Performs cleanup associated with termination of this worker thread."
    },
    {
        "function": "arrive",
        "parameters": [
            ""
        ],
        "comments": "Creates a new phaser with no initially registered parties, no parent, and initial phase number 0."
    },
    {
        "function": "arriveAndAwaitAdvance",
        "parameters": [
            ""
        ],
        "comments": "Creates a new phaser with the given number of registered unarrived parties, no parent, and initial phase number 0."
    },
    {
        "function": "arriveAndDeregister",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to Phaser(parent, 0)."
    },
    {
        "function": "awaitAdvance",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new phaser with the given parent and number of registered unarrived parties."
    },
    {
        "function": "awaitAdvanceInterruptibly",
        "parameters": [
            "int"
        ],
        "comments": "Arrives at this phaser, without waiting for others to arrive."
    },
    {
        "function": "awaitAdvanceInterruptibly",
        "parameters": [
            "int",
            "long",
            "TimeUnit"
        ],
        "comments": "Arrives at this phaser and awaits others."
    },
    {
        "function": "bulkRegister",
        "parameters": [
            "int"
        ],
        "comments": "Arrives at this phaser and deregisters from it without waiting for others to arrive."
    },
    {
        "function": "forceTermination",
        "parameters": [
            ""
        ],
        "comments": "Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
    },
    {
        "function": "getArrivedParties",
        "parameters": [
            ""
        ],
        "comments": "Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
    },
    {
        "function": "getParent",
        "parameters": [
            ""
        ],
        "comments": "Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing  InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated."
    },
    {
        "function": "getPhase",
        "parameters": [
            ""
        ],
        "comments": "Adds the given number of new unarrived parties to this phaser."
    },
    {
        "function": "getRegisteredParties",
        "parameters": [
            ""
        ],
        "comments": "Forces this phaser to enter termination state."
    },
    {
        "function": "getRoot",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of registered parties that have arrived at the current phase of this phaser."
    },
    {
        "function": "getUnarrivedParties",
        "parameters": [
            ""
        ],
        "comments": "Returns the parent of this phaser, or null if none."
    },
    {
        "function": "isTerminated",
        "parameters": [
            ""
        ],
        "comments": "Returns the current phase number."
    },
    {
        "function": "onAdvance",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the number of parties registered at this phaser."
    },
    {
        "function": "register",
        "parameters": [
            ""
        ],
        "comments": "Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of registered parties that have not yet arrived at the current phase of this phaser."
    },
    {
        "function": "compute",
        "parameters": [
            ""
        ],
        "comments": "The main computation performed by this task."
    },
    {
        "function": "exec",
        "parameters": [
            ""
        ],
        "comments": "Implements execution conventions for RecursiveActions."
    },
    {
        "function": "getRawResult",
        "parameters": [
            ""
        ],
        "comments": "Always returns null."
    },
    {
        "function": "setRawResult",
        "parameters": [
            "Void"
        ],
        "comments": "Requires null completion value."
    },
    {
        "function": "decorateTask",
        "parameters": [
            "Runnable",
            "RunnableScheduledFuture<V>"
        ],
        "comments": "Creates a new ScheduledThreadPoolExecutor with the given core pool size."
    },
    {
        "function": "decorateTask",
        "parameters": [
            "Callable<V>",
            "RunnableScheduledFuture<V>"
        ],
        "comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters."
    },
    {
        "function": "execute",
        "parameters": [
            "Runnable"
        ],
        "comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters."
    },
    {
        "function": "getContinueExistingPeriodicTasksAfterShutdownPolicy",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters."
    },
    {
        "function": "getExecuteExistingDelayedTasksAfterShutdownPolicy",
        "parameters": [
            ""
        ],
        "comments": "Modifies or replaces the task used to execute a runnable."
    },
    {
        "function": "getQueue",
        "parameters": [
            ""
        ],
        "comments": "Modifies or replaces the task used to execute a callable."
    },
    {
        "function": "getRemoveOnCancelPolicy",
        "parameters": [
            ""
        ],
        "comments": "Executes command with zero required delay."
    },
    {
        "function": "schedule",
        "parameters": [
            "Runnable",
            "long",
            "TimeUnit"
        ],
        "comments": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown."
    },
    {
        "function": "schedule",
        "parameters": [
            "Callable<V>",
            "long",
            "TimeUnit"
        ],
        "comments": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown."
    },
    {
        "function": "scheduleAtFixedRate",
        "parameters": [
            "Runnable",
            "long",
            "long",
            "TimeUnit"
        ],
        "comments": "Returns the task queue used by this executor."
    },
    {
        "function": "scheduleWithFixedDelay",
        "parameters": [
            "Runnable",
            "long",
            "long",
            "TimeUnit"
        ],
        "comments": "Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation."
    },
    {
        "function": "setContinueExistingPeriodicTasksAfterShutdownPolicy",
        "parameters": [
            "boolean"
        ],
        "comments": "Submits a one-shot task that becomes enabled after the given delay."
    },
    {
        "function": "setExecuteExistingDelayedTasksAfterShutdownPolicy",
        "parameters": [
            "boolean"
        ],
        "comments": "Submits a value-returning one-shot task that becomes enabled after the given delay."
    },
    {
        "function": "setRemoveOnCancelPolicy",
        "parameters": [
            "boolean"
        ],
        "comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on."
    },
    {
        "function": "shutdown",
        "parameters": [
            ""
        ],
        "comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next."
    },
    {
        "function": "shutdownNow",
        "parameters": [
            ""
        ],
        "comments": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable"
        ],
        "comments": "Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown."
    },
    {
        "function": "submit",
        "parameters": [
            "Runnable",
            "T"
        ],
        "comments": "Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation."
    },
    {
        "function": "submit",
        "parameters": [
            "Callable<T>"
        ],
        "comments": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted."
    },
    {
        "function": "acquire",
        "parameters": [
            ""
        ],
        "comments": "Creates a Semaphore with the given number of permits and nonfair fairness setting."
    },
    {
        "function": "acquire",
        "parameters": [
            "int"
        ],
        "comments": "Creates a Semaphore with the given number of permits and the given fairness setting."
    },
    {
        "function": "acquireUninterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted."
    },
    {
        "function": "acquireUninterruptibly",
        "parameters": [
            "int"
        ],
        "comments": "Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted."
    },
    {
        "function": "availablePermits",
        "parameters": [
            ""
        ],
        "comments": "Acquires a permit from this semaphore, blocking until one is available."
    },
    {
        "function": "drainPermits",
        "parameters": [
            ""
        ],
        "comments": "Acquires the given number of permits from this semaphore, blocking until all are available."
    },
    {
        "function": "getQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns the current number of permits available in this semaphore."
    },
    {
        "function": "getQueueLength",
        "parameters": [
            ""
        ],
        "comments": "Acquires and returns all permits that are immediately available, or if negative permits are available, releases them."
    },
    {
        "function": "hasQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire."
    },
    {
        "function": "isFair",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting to acquire."
    },
    {
        "function": "reducePermits",
        "parameters": [
            "int"
        ],
        "comments": "Queries whether any threads are waiting to acquire."
    },
    {
        "function": "release",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this semaphore has fairness set true."
    },
    {
        "function": "release",
        "parameters": [
            "int"
        ],
        "comments": "Shrinks the number of available permits by the indicated reduction."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Releases a permit, returning it to the semaphore."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            ""
        ],
        "comments": "Releases the given number of permits, returning them to the semaphore."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string identifying this semaphore, as well as its state."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            "int",
            "long",
            "TimeUnit"
        ],
        "comments": "Acquires a permit from this semaphore, only if one is available at the time of invocation."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Acquires the given number of permits from this semaphore, only if all are available at the time of invocation."
    },
    {
        "function": "current",
        "parameters": [
            ""
        ],
        "comments": "Returns the current thread's ThreadLocalRandom."
    },
    {
        "function": "doubles",
        "parameters": [
            ""
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values, each between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "doubles",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  double values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "doubles",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "doubles",
        "parameters": [
            "long",
            "double",
            "double"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            ""
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom int values."
    },
    {
        "function": "ints",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  int values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "ints",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values."
    },
    {
        "function": "ints",
        "parameters": [
            "long",
            "int",
            "int"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            ""
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom long values."
    },
    {
        "function": "longs",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long values."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns an effectively unlimited stream of pseudorandom  long values, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "longs",
        "parameters": [
            "long",
            "long",
            "long"
        ],
        "comments": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "next",
        "parameters": [
            "int"
        ],
        "comments": "Generates a pseudorandom number with the indicated number of low-order bits."
    },
    {
        "function": "nextBoolean",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom boolean value."
    },
    {
        "function": "nextDouble",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double"
        ],
        "comments": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextDouble",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive)."
    },
    {
        "function": "nextFloat",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom float value between zero (inclusive) and one (exclusive)."
    },
    {
        "function": "nextInt",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom int value."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int"
        ],
        "comments": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextInt",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextLong",
        "parameters": [
            ""
        ],
        "comments": "Returns a pseudorandom long value."
    },
    {
        "function": "nextLong",
        "parameters": [
            "long"
        ],
        "comments": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "nextLong",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive)."
    },
    {
        "function": "setSeed",
        "parameters": [
            "long"
        ],
        "comments": "Throws UnsupportedOperationException."
    },
    {
        "function": "afterExecute",
        "parameters": [
            "Runnable",
            "Throwable"
        ],
        "comments": "Creates a new ThreadPoolExecutor with the given initial parameters, the default thread factory and the default rejected execution handler."
    },
    {
        "function": "allowCoreThreadTimeOut",
        "parameters": [
            "boolean"
        ],
        "comments": "Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory."
    },
    {
        "function": "allowsCoreThreadTimeOut",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ThreadPoolExecutor with the given initial parameters and default rejected execution handler."
    },
    {
        "function": "beforeExecute",
        "parameters": [
            "Thread",
            "Runnable"
        ],
        "comments": "Creates a new ThreadPoolExecutor with the given initial parameters."
    },
    {
        "function": "execute",
        "parameters": [
            "Runnable"
        ],
        "comments": "Method invoked upon completion of execution of the given Runnable."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive."
    },
    {
        "function": "getActiveCount",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive."
    },
    {
        "function": "getCompletedTaskCount",
        "parameters": [
            ""
        ],
        "comments": "Method invoked prior to executing the given Runnable in the given thread."
    },
    {
        "function": "getCorePoolSize",
        "parameters": [
            ""
        ],
        "comments": "Executes the given task sometime in the future."
    },
    {
        "function": "getKeepAliveTime",
        "parameters": [
            "TimeUnit"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getLargestPoolSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the approximate number of threads that are actively executing tasks."
    },
    {
        "function": "getMaximumPoolSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the approximate total number of tasks that have completed execution."
    },
    {
        "function": "getPoolSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the core number of threads."
    },
    {
        "function": "getQueue",
        "parameters": [
            ""
        ],
        "comments": "Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated."
    },
    {
        "function": "getRejectedExecutionHandler",
        "parameters": [
            ""
        ],
        "comments": "Returns the largest number of threads that have ever simultaneously been in the pool."
    },
    {
        "function": "getTaskCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum allowed number of threads."
    },
    {
        "function": "getThreadFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns the current number of threads in the pool."
    },
    {
        "function": "isTerminating",
        "parameters": [
            ""
        ],
        "comments": "Returns the task queue used by this executor."
    },
    {
        "function": "prestartAllCoreThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns the current handler for unexecutable tasks."
    },
    {
        "function": "prestartCoreThread",
        "parameters": [
            ""
        ],
        "comments": "Returns the approximate total number of tasks that have ever been scheduled for execution."
    },
    {
        "function": "purge",
        "parameters": [
            ""
        ],
        "comments": "Returns the thread factory used to create new threads."
    },
    {
        "function": "remove",
        "parameters": [
            "Runnable"
        ],
        "comments": "Returns true if this executor is in the process of terminating after shutdown() or shutdownNow() but has not completely terminated."
    },
    {
        "function": "setCorePoolSize",
        "parameters": [
            "int"
        ],
        "comments": "Starts all core threads, causing them to idly wait for work."
    },
    {
        "function": "setKeepAliveTime",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Starts a core thread, causing it to idly wait for work."
    },
    {
        "function": "setMaximumPoolSize",
        "parameters": [
            "int"
        ],
        "comments": "Tries to remove from the work queue all Future tasks that have been cancelled."
    },
    {
        "function": "setRejectedExecutionHandler",
        "parameters": [
            "RejectedExecutionHandler"
        ],
        "comments": "Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started."
    },
    {
        "function": "setThreadFactory",
        "parameters": [
            "ThreadFactory"
        ],
        "comments": "Sets the core number of threads."
    },
    {
        "function": "shutdown",
        "parameters": [
            ""
        ],
        "comments": "Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated."
    },
    {
        "function": "shutdownNow",
        "parameters": [
            ""
        ],
        "comments": "Sets the maximum allowed number of threads."
    },
    {
        "function": "terminated",
        "parameters": [
            ""
        ],
        "comments": "Sets a new handler for unexecutable tasks."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the thread factory used to create new threads."
    },
    {
        "function": "rejectedExecution",
        "parameters": [
            "Runnable",
            "ThreadPoolExecutor"
        ],
        "comments": "Creates an AbortPolicy."
    },
    {
        "function": "rejectedExecution",
        "parameters": [
            "Runnable",
            "ThreadPoolExecutor"
        ],
        "comments": "Creates a CallerRunsPolicy."
    },
    {
        "function": "rejectedExecution",
        "parameters": [
            "Runnable",
            "ThreadPoolExecutor"
        ],
        "comments": "Creates a DiscardOldestPolicy for the given executor."
    },
    {
        "function": "rejectedExecution",
        "parameters": [
            "Runnable",
            "ThreadPoolExecutor"
        ],
        "comments": "Creates a DiscardPolicy."
    },
    {
        "function": "convert",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Time unit representing twenty four hours."
    },
    {
        "function": "convert",
        "parameters": [
            "Duration"
        ],
        "comments": "Time unit representing sixty minutes."
    },
    {
        "function": "of",
        "parameters": [
            "ChronoUnit"
        ],
        "comments": "Time unit representing one thousandth of a millisecond."
    },
    {
        "function": "sleep",
        "parameters": [
            "long"
        ],
        "comments": "Time unit representing one thousandth of a second."
    },
    {
        "function": "timedJoin",
        "parameters": [
            "Thread",
            "long"
        ],
        "comments": "Time unit representing sixty seconds."
    },
    {
        "function": "timedWait",
        "parameters": [
            "Object",
            "long"
        ],
        "comments": "Time unit representing one thousandth of a microsecond."
    },
    {
        "function": "toChronoUnit",
        "parameters": [
            ""
        ],
        "comments": "Time unit representing one second."
    },
    {
        "function": "toDays",
        "parameters": [
            "long"
        ],
        "comments": "Converts the given time duration in the given unit to this unit."
    },
    {
        "function": "toHours",
        "parameters": [
            "long"
        ],
        "comments": "Converts the given time duration to this unit."
    },
    {
        "function": "toMicros",
        "parameters": [
            "long"
        ],
        "comments": "Converts a ChronoUnit to the equivalent TimeUnit."
    },
    {
        "function": "toMillis",
        "parameters": [
            "long"
        ],
        "comments": "Performs a Thread.sleep using this time unit."
    },
    {
        "function": "toMinutes",
        "parameters": [
            "long"
        ],
        "comments": "Performs a timed Thread.join using this time unit."
    },
    {
        "function": "toNanos",
        "parameters": [
            "long"
        ],
        "comments": "Performs a timed Object.wait using this time unit."
    },
    {
        "function": "toSeconds",
        "parameters": [
            "long"
        ],
        "comments": "Converts this TimeUnit to the equivalent ChronoUnit."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Equivalent to DAYS.convert(duration, this)."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to HOURS.convert(duration, this)."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Creates a new AtomicBoolean with initial value false."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Creates a new AtomicBoolean with the given initial value."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...)."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...)."
    },
    {
        "function": "getAcquire",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."
    },
    {
        "function": "getPlain",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."
    },
    {
        "function": "lazySet",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."
    },
    {
        "function": "set",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "setPlain",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."
    },
    {
        "function": "setRelease",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Returns the String representation of the current value."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(boolean, boolean) and compareAndSet(boolean, boolean))."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetVolatile",
        "parameters": [
            "boolean",
            "boolean"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."
    },
    {
        "function": "accumulateAndGet",
        "parameters": [
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Creates a new AtomicInteger with initial value 0."
    },
    {
        "function": "addAndGet",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new AtomicInteger with the given initial value."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...)."
    },
    {
        "function": "decrementAndGet",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...)."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAcquire",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicInteger as a float after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAccumulate",
        "parameters": [
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAdd",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndDecrement",
        "parameters": [
            ""
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
        "function": "getAndIncrement",
        "parameters": [
            ""
        ],
        "comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "int"
        ],
        "comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndUpdate",
        "parameters": [
            "IntUnaryOperator"
        ],
        "comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."
    },
    {
        "function": "getPlain",
        "parameters": [
            ""
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the previous value."
    },
    {
        "function": "incrementAndGet",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "lazySet",
        "parameters": [
            "int"
        ],
        "comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicInteger as an int, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "set",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current value of this AtomicInteger as a long after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "setPlain",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."
    },
    {
        "function": "setRelease",
        "parameters": [
            "int"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "updateAndGet",
        "parameters": [
            "IntUnaryOperator"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the String representation of the current value."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the updated value."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(int, int) and compareAndSet(int, int))."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetVolatile",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."
    },
    {
        "function": "accumulateAndGet",
        "parameters": [
            "int",
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Creates a new AtomicIntegerArray of the given length, with all elements initially zero."
    },
    {
        "function": "addAndGet",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Creates a new AtomicIntegerArray with the same length as, and all elements copied from, the given array."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...)."
    },
    {
        "function": "decrementAndGet",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...)."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to  newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."
    },
    {
        "function": "getAcquire",
        "parameters": [
            "int"
        ],
        "comments": "Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndAccumulate",
        "parameters": [
            "int",
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAdd",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndDecrement",
        "parameters": [
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
        "function": "getAndIncrement",
        "parameters": [
            "int"
        ],
        "comments": "Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndUpdate",
        "parameters": [
            "int",
            "IntUnaryOperator"
        ],
        "comments": "Atomically increments the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to  newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."
    },
    {
        "function": "getPlain",
        "parameters": [
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function, returning the previous value."
    },
    {
        "function": "incrementAndGet",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."
    },
    {
        "function": "lazySet",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Atomically increments the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns the length of the array."
    },
    {
        "function": "setPlain",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."
    },
    {
        "function": "setRelease",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "updateAndGet",
        "parameters": [
            "int",
            "IntUnaryOperator"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Returns the String representation of the current values of array."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function, returning the updated value."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(int, int, int) and compareAndSet(int, int, int))."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetVolatile",
        "parameters": [
            "int",
            "int",
            "int"
        ],
        "comments": "Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."
    },
    {
        "function": "accumulateAndGet",
        "parameters": [
            "long",
            "LongBinaryOperator"
        ],
        "comments": "Creates a new AtomicLong with initial value 0."
    },
    {
        "function": "addAndGet",
        "parameters": [
            "long"
        ],
        "comments": "Creates a new AtomicLong with the given initial value."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...)."
    },
    {
        "function": "decrementAndGet",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...)."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAcquire",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAccumulate",
        "parameters": [
            "long",
            "LongBinaryOperator"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAdd",
        "parameters": [
            "long"
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndDecrement",
        "parameters": [
            ""
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
        "function": "getAndIncrement",
        "parameters": [
            ""
        ],
        "comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "long"
        ],
        "comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndUpdate",
        "parameters": [
            "LongUnaryOperator"
        ],
        "comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."
    },
    {
        "function": "getPlain",
        "parameters": [
            ""
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the previous value."
    },
    {
        "function": "incrementAndGet",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "lazySet",
        "parameters": [
            "long"
        ],
        "comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "set",
        "parameters": [
            "long"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "long"
        ],
        "comments": "Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "setPlain",
        "parameters": [
            "long"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."
    },
    {
        "function": "setRelease",
        "parameters": [
            "long"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "updateAndGet",
        "parameters": [
            "LongUnaryOperator"
        ],
        "comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns the String representation of the current value."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the updated value."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(long, long) and compareAndSet(long, long))."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetVolatile",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."
    },
    {
        "function": "accumulateAndGet",
        "parameters": [
            "int",
            "long",
            "LongBinaryOperator"
        ],
        "comments": "Creates a new AtomicLongArray of the given length, with all elements initially zero."
    },
    {
        "function": "addAndGet",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Creates a new AtomicLongArray with the same length as, and all elements copied from, the given array."
    },
    {
        "function": "compareAndExchange",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function to the current and given values, returning the updated value."
    },
    {
        "function": "compareAndExchangeAcquire",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "compareAndExchangeRelease",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...)."
    },
    {
        "function": "compareAndSet",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...)."
    },
    {
        "function": "decrementAndGet",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...)."
    },
    {
        "function": "get",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."
    },
    {
        "function": "getAcquire",
        "parameters": [
            "int"
        ],
        "comments": "Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndAccumulate",
        "parameters": [
            "int",
            "long",
            "LongBinaryOperator"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."
    },
    {
        "function": "getAndAdd",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."
    },
    {
        "function": "getAndDecrement",
        "parameters": [
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function to the current and given values, returning the previous value."
    },
    {
        "function": "getAndIncrement",
        "parameters": [
            "int"
        ],
        "comments": "Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndSet",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getAndUpdate",
        "parameters": [
            "int",
            "LongUnaryOperator"
        ],
        "comments": "Atomically increments the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "getOpaque",
        "parameters": [
            "int"
        ],
        "comments": "Atomically sets the element at index i to  newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."
    },
    {
        "function": "getPlain",
        "parameters": [
            "int"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function, returning the previous value."
    },
    {
        "function": "incrementAndGet",
        "parameters": [
            "int"
        ],
        "comments": "Returns the current value of the element at index i, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."
    },
    {
        "function": "lazySet",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile."
    },
    {
        "function": "length",
        "parameters": [
            ""
        ],
        "comments": "Atomically increments the value of the element at index i, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."
    },
    {
        "function": "set",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "setOpaque",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Returns the length of the array."
    },
    {
        "function": "setPlain",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."
    },
    {
        "function": "setRelease",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final."
    },
    {
        "function": "updateAndGet",
        "parameters": [
            "int",
            "LongUnaryOperator"
        ],
        "comments": "Sets the element at index i to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSet",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Returns the String representation of the current values of array."
    },
    {
        "function": "weakCompareAndSetAcquire",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with the results of applying the given function, returning the updated value."
    },
    {
        "function": "weakCompareAndSetPlain",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(int, long, long) and compareAndSet(int, long, long))."
    },
    {
        "function": "weakCompareAndSetRelease",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."
    },
    {
        "function": "weakCompareAndSetVolatile",
        "parameters": [
            "int",
            "long",
            "long"
        ],
        "comments": "Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."
    },
    {
        "function": "accumulate",
        "parameters": [
            "double"
        ],
        "comments": "Creates a new instance using the given accumulator function and identity element."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Updates with the given value."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to get()."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as a float after a narrowing primitive conversion."
    },
    {
        "function": "getThenReset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent in effect to get() followed by reset()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as an int after a narrowing primitive conversion."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as a long after a narrowing primitive conversion."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Resets variables maintaining updates to the identity value."
    },
    {
        "function": "add",
        "parameters": [
            "double"
        ],
        "comments": "Creates a new adder with initial sum of zero."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Adds the given value."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to sum()."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as a float after a narrowing primitive conversion."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as an int after a narrowing primitive conversion."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as a long after a narrowing primitive conversion."
    },
    {
        "function": "sum",
        "parameters": [
            ""
        ],
        "comments": "Resets variables maintaining the sum to zero."
    },
    {
        "function": "sumThenReset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current sum."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Equivalent in effect to sum() followed by reset()."
    },
    {
        "function": "accumulate",
        "parameters": [
            "long"
        ],
        "comments": "Creates a new instance using the given accumulator function and identity element."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Updates with the given value."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as a double after a widening primitive conversion."
    },
    {
        "function": "get",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as a float after a widening primitive conversion."
    },
    {
        "function": "getThenReset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent in effect to get() followed by reset()."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current value as an int after a narrowing primitive conversion."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to get()."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Resets variables maintaining updates to the identity value."
    },
    {
        "function": "add",
        "parameters": [
            "long"
        ],
        "comments": "Creates a new adder with initial sum of zero."
    },
    {
        "function": "decrement",
        "parameters": [
            ""
        ],
        "comments": "Adds the given value."
    },
    {
        "function": "doubleValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to add(-1)."
    },
    {
        "function": "floatValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as a double after a widening primitive conversion."
    },
    {
        "function": "increment",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as a float after a widening primitive conversion."
    },
    {
        "function": "intValue",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to add(1)."
    },
    {
        "function": "longValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum() as an int after a narrowing primitive conversion."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Equivalent to sum()."
    },
    {
        "function": "sum",
        "parameters": [
            ""
        ],
        "comments": "Resets variables maintaining the sum to zero."
    },
    {
        "function": "sumThenReset",
        "parameters": [
            ""
        ],
        "comments": "Returns the current sum."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Equivalent in effect to sum() followed by reset()."
    },
    {
        "function": "await",
        "parameters": [
            ""
        ],
        "comments": "Causes the current thread to wait until it is signalled or interrupted."
    },
    {
        "function": "await",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses."
    },
    {
        "function": "awaitNanos",
        "parameters": [
            "long"
        ],
        "comments": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses."
    },
    {
        "function": "awaitUninterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Causes the current thread to wait until it is signalled."
    },
    {
        "function": "awaitUntil",
        "parameters": [
            "Date"
        ],
        "comments": "Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses."
    },
    {
        "function": "signal",
        "parameters": [
            ""
        ],
        "comments": "Wakes up one waiting thread."
    },
    {
        "function": "signalAll",
        "parameters": [
            ""
        ],
        "comments": "Wakes up all waiting threads."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock."
    },
    {
        "function": "lockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock unless the current thread is interrupted."
    },
    {
        "function": "newCondition",
        "parameters": [
            ""
        ],
        "comments": "Returns a new Condition instance that is bound to this Lock instance."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock only if it is free at the time of invocation."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted."
    },
    {
        "function": "unlock",
        "parameters": [
            ""
        ],
        "comments": "Releases the lock."
    },
    {
        "function": "readLock",
        "parameters": [
            ""
        ],
        "comments": "Returns the lock used for reading."
    },
    {
        "function": "writeLock",
        "parameters": [
            ""
        ],
        "comments": "Returns the lock used for writing."
    },
    {
        "function": "getExclusiveOwnerThread",
        "parameters": [
            ""
        ],
        "comments": "Empty constructor for use by subclasses."
    },
    {
        "function": "setExclusiveOwnerThread",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns the thread last set by setExclusiveOwnerThread, or null if never set."
    },
    {
        "function": "acquire",
        "parameters": [
            "long"
        ],
        "comments": "Creates a new AbstractQueuedLongSynchronizer instance with initial synchronization state of zero."
    },
    {
        "function": "acquireInterruptibly",
        "parameters": [
            "long"
        ],
        "comments": "Acquires in exclusive mode, ignoring interrupts."
    },
    {
        "function": "acquireShared",
        "parameters": [
            "long"
        ],
        "comments": "Acquires in exclusive mode, aborting if interrupted."
    },
    {
        "function": "acquireSharedInterruptibly",
        "parameters": [
            "long"
        ],
        "comments": "Acquires in shared mode, ignoring interrupts."
    },
    {
        "function": "compareAndSetState",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Acquires in shared mode, aborting if interrupted."
    },
    {
        "function": "getExclusiveQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value."
    },
    {
        "function": "getFirstQueuedThread",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire in exclusive mode."
    },
    {
        "function": "getQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
    },
    {
        "function": "getQueueLength",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire."
    },
    {
        "function": "getSharedQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting to acquire."
    },
    {
        "function": "getState",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire in shared mode."
    },
    {
        "function": "getWaitingThreads",
        "parameters": [
            "AbstractQueuedLongSynchronizer.ConditionObject"
        ],
        "comments": "Returns the current value of synchronization state."
    },
    {
        "function": "getWaitQueueLength",
        "parameters": [
            "AbstractQueuedLongSynchronizer.ConditionObject"
        ],
        "comments": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "hasContended",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "hasQueuedPredecessors",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked."
    },
    {
        "function": "hasQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads have been waiting to acquire longer than the current thread."
    },
    {
        "function": "hasWaiters",
        "parameters": [
            "AbstractQueuedLongSynchronizer.ConditionObject"
        ],
        "comments": "Queries whether any threads are waiting to acquire."
    },
    {
        "function": "isHeldExclusively",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "isQueued",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns true if synchronization is held exclusively with respect to the current (calling) thread."
    },
    {
        "function": "owns",
        "parameters": [
            "AbstractQueuedLongSynchronizer.ConditionObject"
        ],
        "comments": "Returns true if the given thread is currently queued."
    },
    {
        "function": "release",
        "parameters": [
            "long"
        ],
        "comments": "Queries whether the given ConditionObject uses this synchronizer as its lock."
    },
    {
        "function": "releaseShared",
        "parameters": [
            "long"
        ],
        "comments": "Releases in exclusive mode."
    },
    {
        "function": "setState",
        "parameters": [
            "long"
        ],
        "comments": "Releases in shared mode."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of synchronization state."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string identifying this synchronizer, as well as its state."
    },
    {
        "function": "tryAcquireNanos",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Attempts to acquire in exclusive mode."
    },
    {
        "function": "tryAcquireShared",
        "parameters": [
            "long"
        ],
        "comments": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
        "function": "tryAcquireSharedNanos",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Attempts to acquire in shared mode."
    },
    {
        "function": "tryRelease",
        "parameters": [
            "long"
        ],
        "comments": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
        "function": "tryReleaseShared",
        "parameters": [
            "long"
        ],
        "comments": "Attempts to set the state to reflect a release in exclusive mode."
    },
    {
        "function": "acquire",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero."
    },
    {
        "function": "acquireInterruptibly",
        "parameters": [
            "int"
        ],
        "comments": "Acquires in exclusive mode, ignoring interrupts."
    },
    {
        "function": "acquireShared",
        "parameters": [
            "int"
        ],
        "comments": "Acquires in exclusive mode, aborting if interrupted."
    },
    {
        "function": "acquireSharedInterruptibly",
        "parameters": [
            "int"
        ],
        "comments": "Acquires in shared mode, ignoring interrupts."
    },
    {
        "function": "compareAndSetState",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Acquires in shared mode, aborting if interrupted."
    },
    {
        "function": "getExclusiveQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value."
    },
    {
        "function": "getFirstQueuedThread",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire in exclusive mode."
    },
    {
        "function": "getQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued."
    },
    {
        "function": "getQueueLength",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire."
    },
    {
        "function": "getSharedQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting to acquire."
    },
    {
        "function": "getState",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire in shared mode."
    },
    {
        "function": "getWaitingThreads",
        "parameters": [
            "AbstractQueuedSynchronizer.ConditionObject"
        ],
        "comments": "Returns the current value of synchronization state."
    },
    {
        "function": "getWaitQueueLength",
        "parameters": [
            "AbstractQueuedSynchronizer.ConditionObject"
        ],
        "comments": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "hasContended",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "hasQueuedPredecessors",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked."
    },
    {
        "function": "hasQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads have been waiting to acquire longer than the current thread."
    },
    {
        "function": "hasWaiters",
        "parameters": [
            "AbstractQueuedSynchronizer.ConditionObject"
        ],
        "comments": "Queries whether any threads are waiting to acquire."
    },
    {
        "function": "isHeldExclusively",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting on the given condition associated with this synchronizer."
    },
    {
        "function": "isQueued",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns true if synchronization is held exclusively with respect to the current (calling) thread."
    },
    {
        "function": "owns",
        "parameters": [
            "AbstractQueuedSynchronizer.ConditionObject"
        ],
        "comments": "Returns true if the given thread is currently queued."
    },
    {
        "function": "release",
        "parameters": [
            "int"
        ],
        "comments": "Queries whether the given ConditionObject uses this synchronizer as its lock."
    },
    {
        "function": "releaseShared",
        "parameters": [
            "int"
        ],
        "comments": "Releases in exclusive mode."
    },
    {
        "function": "setState",
        "parameters": [
            "int"
        ],
        "comments": "Releases in shared mode."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Sets the value of synchronization state."
    },
    {
        "function": "tryAcquire",
        "parameters": [
            "int"
        ],
        "comments": "Returns a string identifying this synchronizer, as well as its state."
    },
    {
        "function": "tryAcquireNanos",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Attempts to acquire in exclusive mode."
    },
    {
        "function": "tryAcquireShared",
        "parameters": [
            "int"
        ],
        "comments": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
        "function": "tryAcquireSharedNanos",
        "parameters": [
            "int",
            "long"
        ],
        "comments": "Attempts to acquire in shared mode."
    },
    {
        "function": "tryRelease",
        "parameters": [
            "int"
        ],
        "comments": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses."
    },
    {
        "function": "tryReleaseShared",
        "parameters": [
            "int"
        ],
        "comments": "Attempts to set the state to reflect a release in exclusive mode."
    },
    {
        "function": "getBlocker",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked."
    },
    {
        "function": "park",
        "parameters": [
            ""
        ],
        "comments": "Disables the current thread for thread scheduling purposes unless the permit is available."
    },
    {
        "function": "park",
        "parameters": [
            "Object"
        ],
        "comments": "Disables the current thread for thread scheduling purposes unless the permit is available."
    },
    {
        "function": "parkNanos",
        "parameters": [
            "long"
        ],
        "comments": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
    },
    {
        "function": "parkNanos",
        "parameters": [
            "Object",
            "long"
        ],
        "comments": "Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available."
    },
    {
        "function": "parkUntil",
        "parameters": [
            "long"
        ],
        "comments": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
    },
    {
        "function": "parkUntil",
        "parameters": [
            "Object",
            "long"
        ],
        "comments": "Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available."
    },
    {
        "function": "unpark",
        "parameters": [
            "Thread"
        ],
        "comments": "Makes available the permit for the given thread, if it was not already available."
    },
    {
        "function": "getHoldCount",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of ReentrantLock."
    },
    {
        "function": "getOwner",
        "parameters": [
            ""
        ],
        "comments": "Creates an instance of ReentrantLock with the given fairness policy."
    },
    {
        "function": "getQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Queries the number of holds on this lock by the current thread."
    },
    {
        "function": "getQueueLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the thread that currently owns this lock, or null if not owned."
    },
    {
        "function": "getWaitingThreads",
        "parameters": [
            "Condition"
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire this lock."
    },
    {
        "function": "getWaitQueueLength",
        "parameters": [
            "Condition"
        ],
        "comments": "Returns an estimate of the number of threads waiting to acquire this lock."
    },
    {
        "function": "hasQueuedThread",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns a collection containing those threads that may be waiting on the given condition associated with this lock."
    },
    {
        "function": "hasQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting on the given condition associated with this lock."
    },
    {
        "function": "hasWaiters",
        "parameters": [
            "Condition"
        ],
        "comments": "Queries whether the given thread is waiting to acquire this lock."
    },
    {
        "function": "isFair",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting to acquire this lock."
    },
    {
        "function": "isHeldByCurrentThread",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting on the given condition associated with this lock."
    },
    {
        "function": "isLocked",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this lock has fairness set true."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Queries if this lock is held by the current thread."
    },
    {
        "function": "lockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Queries if this lock is held by any thread."
    },
    {
        "function": "newCondition",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock unless the current thread is interrupted."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a Condition instance for use with this Lock instance."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Returns a string identifying this lock, as well as its lock state."
    },
    {
        "function": "unlock",
        "parameters": [
            ""
        ],
        "comments": "Acquires the lock only if it is not held by another thread at the time of invocation."
    },
    {
        "function": "getOwner",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ReentrantReadWriteLock with default (nonfair) ordering properties."
    },
    {
        "function": "getQueuedReaderThreads",
        "parameters": [
            ""
        ],
        "comments": "Creates a new ReentrantReadWriteLock with the given fairness policy."
    },
    {
        "function": "getQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns the thread that currently owns the write lock, or null if not owned."
    },
    {
        "function": "getQueuedWriterThreads",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire the read lock."
    },
    {
        "function": "getQueueLength",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire either the read or write lock."
    },
    {
        "function": "getReadHoldCount",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing threads that may be waiting to acquire the write lock."
    },
    {
        "function": "getReadLockCount",
        "parameters": [
            ""
        ],
        "comments": "Returns an estimate of the number of threads waiting to acquire either the read or write lock."
    },
    {
        "function": "getWaitingThreads",
        "parameters": [
            "Condition"
        ],
        "comments": "Queries the number of reentrant read holds on this lock by the current thread."
    },
    {
        "function": "getWaitQueueLength",
        "parameters": [
            "Condition"
        ],
        "comments": "Queries the number of read locks held for this lock."
    },
    {
        "function": "getWriteHoldCount",
        "parameters": [
            ""
        ],
        "comments": "Returns a collection containing those threads that may be waiting on the given condition associated with the write lock."
    },
    {
        "function": "hasQueuedThread",
        "parameters": [
            "Thread"
        ],
        "comments": "Returns an estimate of the number of threads waiting on the given condition associated with the write lock."
    },
    {
        "function": "hasQueuedThreads",
        "parameters": [
            ""
        ],
        "comments": "Queries the number of reentrant write holds on this lock by the current thread."
    },
    {
        "function": "hasWaiters",
        "parameters": [
            "Condition"
        ],
        "comments": "Queries whether the given thread is waiting to acquire either the read or write lock."
    },
    {
        "function": "isFair",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting to acquire the read or write lock."
    },
    {
        "function": "isWriteLocked",
        "parameters": [
            ""
        ],
        "comments": "Queries whether any threads are waiting on the given condition associated with the write lock."
    },
    {
        "function": "isWriteLockedByCurrentThread",
        "parameters": [
            ""
        ],
        "comments": "Returns true if this lock has fairness set true."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Queries if the write lock is held by any thread."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Constructor for use by subclasses."
    },
    {
        "function": "lockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Acquires the read lock."
    },
    {
        "function": "newCondition",
        "parameters": [
            ""
        ],
        "comments": "Acquires the read lock unless the current thread is interrupted."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Throws UnsupportedOperationException because ReadLocks do not support conditions."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a string identifying this lock, as well as its lock state."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Acquires the read lock only if the write lock is not held by another thread at the time of invocation."
    },
    {
        "function": "unlock",
        "parameters": [
            ""
        ],
        "comments": "Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been interrupted."
    },
    {
        "function": "getHoldCount",
        "parameters": [
            ""
        ],
        "comments": "Constructor for use by subclasses."
    },
    {
        "function": "isHeldByCurrentThread",
        "parameters": [
            ""
        ],
        "comments": "Queries the number of holds on this write lock by the current thread."
    },
    {
        "function": "lock",
        "parameters": [
            ""
        ],
        "comments": "Queries if this write lock is held by the current thread."
    },
    {
        "function": "lockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Acquires the write lock."
    },
    {
        "function": "newCondition",
        "parameters": [
            ""
        ],
        "comments": "Acquires the write lock unless the current thread is interrupted."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a Condition instance for use with this Lock instance."
    },
    {
        "function": "tryLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a string identifying this lock, as well as its lock state."
    },
    {
        "function": "tryLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Acquires the write lock only if it is not held by another thread at the time of invocation."
    },
    {
        "function": "unlock",
        "parameters": [
            ""
        ],
        "comments": "Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted."
    },
    {
        "function": "asReadLock",
        "parameters": [
            ""
        ],
        "comments": "Creates a new lock, initially in unlocked state."
    },
    {
        "function": "asReadWriteLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to readLock(), and similarly for other methods."
    },
    {
        "function": "asWriteLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a ReadWriteLock view of this StampedLock in which the ReadWriteLock.readLock() method is mapped to asReadLock(), and ReadWriteLock.writeLock() to asWriteLock()."
    },
    {
        "function": "getReadLockCount",
        "parameters": [
            ""
        ],
        "comments": "Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to writeLock(), and similarly for other methods."
    },
    {
        "function": "isLockStamp",
        "parameters": [
            "long"
        ],
        "comments": "Queries the number of read locks held for this lock."
    },
    {
        "function": "isOptimisticReadStamp",
        "parameters": [
            "long"
        ],
        "comments": "Tells whether a stamp represents holding a lock."
    },
    {
        "function": "isReadLocked",
        "parameters": [
            ""
        ],
        "comments": "Tells whether a stamp represents a successful optimistic read."
    },
    {
        "function": "isReadLockStamp",
        "parameters": [
            "long"
        ],
        "comments": "Returns true if the lock is currently held non-exclusively."
    },
    {
        "function": "isWriteLocked",
        "parameters": [
            ""
        ],
        "comments": "Tells whether a stamp represents holding a lock non-exclusively."
    },
    {
        "function": "isWriteLockStamp",
        "parameters": [
            "long"
        ],
        "comments": "Returns true if the lock is currently held exclusively."
    },
    {
        "function": "readLock",
        "parameters": [
            ""
        ],
        "comments": "Tells whether a stamp represents holding a lock exclusively."
    },
    {
        "function": "readLockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Non-exclusively acquires the lock, blocking if necessary until available."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted."
    },
    {
        "function": "tryConvertToOptimisticRead",
        "parameters": [
            "long"
        ],
        "comments": "Returns a string identifying this lock, as well as its lock state."
    },
    {
        "function": "tryConvertToReadLock",
        "parameters": [
            "long"
        ],
        "comments": "If the lock state matches the given stamp then, atomically, if the stamp represents holding a lock, releases it and returns an observation stamp."
    },
    {
        "function": "tryConvertToWriteLock",
        "parameters": [
            "long"
        ],
        "comments": "If the lock state matches the given stamp, atomically performs one of the following actions."
    },
    {
        "function": "tryOptimisticRead",
        "parameters": [
            ""
        ],
        "comments": "If the lock state matches the given stamp, atomically performs one of the following actions."
    },
    {
        "function": "tryReadLock",
        "parameters": [
            ""
        ],
        "comments": "Returns a stamp that can later be validated, or zero if exclusively locked."
    },
    {
        "function": "tryReadLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Non-exclusively acquires the lock if it is immediately available."
    },
    {
        "function": "tryUnlockRead",
        "parameters": [
            ""
        ],
        "comments": "Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted."
    },
    {
        "function": "tryUnlockWrite",
        "parameters": [
            ""
        ],
        "comments": "Releases one hold of the read lock if it is held, without requiring a stamp value."
    },
    {
        "function": "tryWriteLock",
        "parameters": [
            ""
        ],
        "comments": "Releases the write lock if it is held, without requiring a stamp value."
    },
    {
        "function": "tryWriteLock",
        "parameters": [
            "long",
            "TimeUnit"
        ],
        "comments": "Exclusively acquires the lock if it is immediately available."
    },
    {
        "function": "unlock",
        "parameters": [
            "long"
        ],
        "comments": "Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted."
    },
    {
        "function": "unlockRead",
        "parameters": [
            "long"
        ],
        "comments": "If the lock state matches the given stamp, releases the corresponding mode of the lock."
    },
    {
        "function": "unlockWrite",
        "parameters": [
            "long"
        ],
        "comments": "If the lock state matches the given stamp, releases the non-exclusive lock."
    },
    {
        "function": "validate",
        "parameters": [
            "long"
        ],
        "comments": "If the lock state matches the given stamp, releases the exclusive lock."
    },
    {
        "function": "writeLock",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the lock has not been exclusively acquired since issuance of the given stamp."
    },
    {
        "function": "writeLockInterruptibly",
        "parameters": [
            ""
        ],
        "comments": "Exclusively acquires the lock, blocking if necessary until available."
    },
    {
        "function": "getAsBoolean",
        "parameters": [
            ""
        ],
        "comments": "Gets a result."
    },
    {
        "function": "applyAsDouble",
        "parameters": [
            "double",
            "double"
        ],
        "comments": "Applies this operator to the given operands."
    },
    {
        "function": "accept",
        "parameters": [
            "double"
        ],
        "comments": "Performs this operation on the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "Returns a composed DoubleConsumer that performs, in sequence, this operation followed by the after operation."
    },
    {
        "function": "and",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another."
    },
    {
        "function": "negate",
        "parameters": [
            ""
        ],
        "comments": "Returns a predicate that represents the logical negation of this predicate."
    },
    {
        "function": "or",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another."
    },
    {
        "function": "test",
        "parameters": [
            "double"
        ],
        "comments": "Evaluates this predicate on the given argument."
    },
    {
        "function": "getAsDouble",
        "parameters": [
            ""
        ],
        "comments": "Gets a result."
    },
    {
        "function": "applyAsInt",
        "parameters": [
            "double"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "applyAsLong",
        "parameters": [
            "double"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "DoubleUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
    },
    {
        "function": "applyAsDouble",
        "parameters": [
            "double"
        ],
        "comments": "Applies this operator to the given operand."
    },
    {
        "function": "compose",
        "parameters": [
            "DoubleUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
    },
    {
        "function": "identity",
        "parameters": [
            ""
        ],
        "comments": "Returns a unary operator that always returns its input argument."
    },
    {
        "function": "applyAsInt",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Applies this operator to the given operands."
    },
    {
        "function": "accept",
        "parameters": [
            "int"
        ],
        "comments": "Performs this operation on the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation."
    },
    {
        "function": "and",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another."
    },
    {
        "function": "negate",
        "parameters": [
            ""
        ],
        "comments": "Returns a predicate that represents the logical negation of this predicate."
    },
    {
        "function": "or",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another."
    },
    {
        "function": "test",
        "parameters": [
            "int"
        ],
        "comments": "Evaluates this predicate on the given argument."
    },
    {
        "function": "getAsInt",
        "parameters": [
            ""
        ],
        "comments": "Gets a result."
    },
    {
        "function": "applyAsDouble",
        "parameters": [
            "int"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "applyAsLong",
        "parameters": [
            "int"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "IntUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
    },
    {
        "function": "applyAsInt",
        "parameters": [
            "int"
        ],
        "comments": "Applies this operator to the given operand."
    },
    {
        "function": "compose",
        "parameters": [
            "IntUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
    },
    {
        "function": "identity",
        "parameters": [
            ""
        ],
        "comments": "Returns a unary operator that always returns its input argument."
    },
    {
        "function": "applyAsLong",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Applies this operator to the given operands."
    },
    {
        "function": "accept",
        "parameters": [
            "long"
        ],
        "comments": "Performs this operation on the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "Returns a composed LongConsumer that performs, in sequence, this operation followed by the after operation."
    },
    {
        "function": "and",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another."
    },
    {
        "function": "negate",
        "parameters": [
            ""
        ],
        "comments": "Returns a predicate that represents the logical negation of this predicate."
    },
    {
        "function": "or",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another."
    },
    {
        "function": "test",
        "parameters": [
            "long"
        ],
        "comments": "Evaluates this predicate on the given argument."
    },
    {
        "function": "getAsLong",
        "parameters": [
            ""
        ],
        "comments": "Gets a result."
    },
    {
        "function": "applyAsDouble",
        "parameters": [
            "long"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "applyAsInt",
        "parameters": [
            "long"
        ],
        "comments": "Applies this function to the given argument."
    },
    {
        "function": "andThen",
        "parameters": [
            "LongUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result."
    },
    {
        "function": "applyAsLong",
        "parameters": [
            "long"
        ],
        "comments": "Applies this operator to the given operand."
    },
    {
        "function": "compose",
        "parameters": [
            "LongUnaryOperator"
        ],
        "comments": "Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result."
    },
    {
        "function": "identity",
        "parameters": [
            ""
        ],
        "comments": "Returns a unary operator that always returns its input argument."
    },
    {
        "function": "pack",
        "parameters": [
            "JarFile",
            "OutputStream"
        ],
        "comments": "The string \"latest\", a possible value for certain properties."
    },
    {
        "function": "pack",
        "parameters": [
            "JarInputStream",
            "OutputStream"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "properties",
        "parameters": [
            ""
        ],
        "comments": "When concatenated with a method attribute name, indicates the format of that attribute."
    },
    {
        "function": "properties",
        "parameters": [
            ""
        ],
        "comments": "The string \"keep\", a possible value for certain properties."
    },
    {
        "function": "unpack",
        "parameters": [
            "File",
            "JarOutputStream"
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "unpack",
        "parameters": [
            "InputStream",
            "JarOutputStream"
        ],
        "comments": "The unpacker's progress as a percentage, as periodically updated by the unpacker."
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new, empty Attributes object with default size."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new, empty Attributes object with the specified initial size."
    },
    {
        "function": "containsKey",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new Attributes object with the same attribute name-value mappings as in the specified Attributes."
    },
    {
        "function": "containsValue",
        "parameters": [
            "Object"
        ],
        "comments": "Removes all attributes from this Map."
    },
    {
        "function": "entrySet",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the Attributes, implemented as follows:"
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if this Map contains the specified attribute name (key)."
    },
    {
        "function": "get",
        "parameters": [
            "Object"
        ],
        "comments": "Returns true if this Map maps one or more attribute names (keys) to the specified value."
    },
    {
        "function": "getValue",
        "parameters": [
            "String"
        ],
        "comments": "Returns a Collection view of the attribute name-value mappings contained in this Map."
    },
    {
        "function": "getValue",
        "parameters": [
            "Attributes.Name"
        ],
        "comments": "Compares the specified Attributes object with this Map for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified attribute name, or null if the attribute name was not found."
    },
    {
        "function": "isEmpty",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found."
    },
    {
        "function": "keySet",
        "parameters": [
            ""
        ],
        "comments": "Returns the value of the specified Attributes.Name, or null if the attribute was not found."
    },
    {
        "function": "put",
        "parameters": [
            "Object",
            "Object"
        ],
        "comments": "Returns the hash code value for this Map."
    },
    {
        "function": "putAll",
        "parameters": [
            "Map<?",
            "?>"
        ],
        "comments": "Returns true if this Map contains no attributes."
    },
    {
        "function": "putValue",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a Set view of the attribute names (keys) contained in this Map."
    },
    {
        "function": "remove",
        "parameters": [
            "Object"
        ],
        "comments": "Associates the specified value with the specified attribute name (key) in this Map."
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": "Copies all of the attribute name-value mappings from the specified Attributes to this Map."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Associates the specified value with the specified attribute name, specified as a String."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new attribute name using the given string name."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this attribute name to another for equality."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Computes the hash value for this attribute name."
    },
    {
        "function": "getAttributes",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getCertificates",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getCodeSigners",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getRealName",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "baseVersion",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "entries",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getEntry",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "getInputStream",
        "parameters": [
            "ZipEntry"
        ],
        "comments": ""
    },
    {
        "function": "getJarEntry",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "getManifest",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "isMultiRelease",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "runtimeVersion",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "versionedStream",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "createZipEntry",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "getManifest",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getNextEntry",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getNextJarEntry",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": ""
    },
    {
        "function": "putNextEntry",
        "parameters": [
            "ZipEntry"
        ],
        "comments": ""
    },
    {
        "function": "clear",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new, empty Manifest."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new Manifest from the specified input stream."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a new Manifest that is a copy of the specified Manifest."
    },
    {
        "function": "getAttributes",
        "parameters": [
            "String"
        ],
        "comments": "Clears the main Attributes as well as the entries in this Manifest."
    },
    {
        "function": "getEntries",
        "parameters": [
            ""
        ],
        "comments": "Returns a shallow copy of this Manifest."
    },
    {
        "function": "getMainAttributes",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the specified Object is also a Manifest and has the same main Attributes and entries."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the Attributes for the specified entry name."
    },
    {
        "function": "read",
        "parameters": [
            "InputStream"
        ],
        "comments": "Returns a Map of the entries contained in this Manifest."
    },
    {
        "function": "write",
        "parameters": [
            "OutputStream"
        ],
        "comments": "Returns the main Attributes for the Manifest."
    },
    {
        "function": "newPacker",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version."
    },
    {
        "function": "newUnpacker",
        "parameters": [
            ""
        ],
        "comments": "Obtain new instance of a class that implements Packer."
    },
    {
        "function": "end",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset after the last character matched."
    },
    {
        "function": "end",
        "parameters": [
            "int"
        ],
        "comments": "Returns the offset after the last character of the subsequence captured by the given group during this match."
    },
    {
        "function": "group",
        "parameters": [
            ""
        ],
        "comments": "Returns the input subsequence matched by the previous match."
    },
    {
        "function": "group",
        "parameters": [
            "int"
        ],
        "comments": "Returns the input subsequence captured by the given group during the previous match operation."
    },
    {
        "function": "groupCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of capturing groups in this match result's pattern."
    },
    {
        "function": "start",
        "parameters": [
            ""
        ],
        "comments": "Returns the start index of the match."
    },
    {
        "function": "start",
        "parameters": [
            "int"
        ],
        "comments": "Returns the start index of the subsequence captured by the given group during this match."
    },
    {
        "function": "appendReplacement",
        "parameters": [
            "StringBuffer",
            "String"
        ],
        "comments": "Implements a non-terminal append-and-replace step."
    },
    {
        "function": "appendReplacement",
        "parameters": [
            "StringBuilder",
            "String"
        ],
        "comments": "Implements a non-terminal append-and-replace step."
    },
    {
        "function": "appendTail",
        "parameters": [
            "StringBuffer"
        ],
        "comments": "Implements a terminal append-and-replace step."
    },
    {
        "function": "appendTail",
        "parameters": [
            "StringBuilder"
        ],
        "comments": "Implements a terminal append-and-replace step."
    },
    {
        "function": "end",
        "parameters": [
            ""
        ],
        "comments": "Returns the offset after the last character matched."
    },
    {
        "function": "end",
        "parameters": [
            "int"
        ],
        "comments": "Returns the offset after the last character of the subsequence captured by the given group during the previous match operation."
    },
    {
        "function": "end",
        "parameters": [
            "String"
        ],
        "comments": "Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation."
    },
    {
        "function": "find",
        "parameters": [
            ""
        ],
        "comments": "Attempts to find the next subsequence of the input sequence that matches the pattern."
    },
    {
        "function": "find",
        "parameters": [
            "int"
        ],
        "comments": "Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index."
    },
    {
        "function": "group",
        "parameters": [
            ""
        ],
        "comments": "Returns the input subsequence matched by the previous match."
    },
    {
        "function": "group",
        "parameters": [
            "int"
        ],
        "comments": "Returns the input subsequence captured by the given group during the previous match operation."
    },
    {
        "function": "group",
        "parameters": [
            "String"
        ],
        "comments": "Returns the input subsequence captured by the given named-capturing group during the previous match operation."
    },
    {
        "function": "groupCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of capturing groups in this matcher's pattern."
    },
    {
        "function": "hasAnchoringBounds",
        "parameters": [
            ""
        ],
        "comments": "Queries the anchoring of region bounds for this matcher."
    },
    {
        "function": "hasTransparentBounds",
        "parameters": [
            ""
        ],
        "comments": "Queries the transparency of region bounds for this matcher."
    },
    {
        "function": "hitEnd",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher."
    },
    {
        "function": "lookingAt",
        "parameters": [
            ""
        ],
        "comments": "Attempts to match the input sequence, starting at the beginning of the region, against the pattern."
    },
    {
        "function": "matches",
        "parameters": [
            ""
        ],
        "comments": "Attempts to match the entire region against the pattern."
    },
    {
        "function": "pattern",
        "parameters": [
            ""
        ],
        "comments": "Returns the pattern that is interpreted by this matcher."
    },
    {
        "function": "quoteReplacement",
        "parameters": [
            "String"
        ],
        "comments": "Returns a literal replacement String for the specified String."
    },
    {
        "function": "region",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Sets the limits of this matcher's region."
    },
    {
        "function": "regionEnd",
        "parameters": [
            ""
        ],
        "comments": "Reports the end index (exclusive) of this matcher's region."
    },
    {
        "function": "regionStart",
        "parameters": [
            ""
        ],
        "comments": "Reports the start index of this matcher's region."
    },
    {
        "function": "replaceAll",
        "parameters": [
            "String"
        ],
        "comments": "Replaces every subsequence of the input sequence that matches the pattern with the given replacement string."
    },
    {
        "function": "replaceAll",
        "parameters": [
            "Function<MatchResult",
            "String>"
        ],
        "comments": "Replaces every subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence."
    },
    {
        "function": "replaceFirst",
        "parameters": [
            "String"
        ],
        "comments": "Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string."
    },
    {
        "function": "replaceFirst",
        "parameters": [
            "Function<MatchResult",
            "String>"
        ],
        "comments": "Replaces the first subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence."
    },
    {
        "function": "requireEnd",
        "parameters": [
            ""
        ],
        "comments": "Returns true if more input could change a positive match into a negative one."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Resets this matcher."
    },
    {
        "function": "reset",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Resets this matcher with a new input sequence."
    },
    {
        "function": "results",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream of match results for each subsequence of the input sequence that matches the pattern."
    },
    {
        "function": "start",
        "parameters": [
            ""
        ],
        "comments": "Returns the start index of the previous match."
    },
    {
        "function": "start",
        "parameters": [
            "int"
        ],
        "comments": "Returns the start index of the subsequence captured by the given group during the previous match operation."
    },
    {
        "function": "start",
        "parameters": [
            "String"
        ],
        "comments": "Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation."
    },
    {
        "function": "toMatchResult",
        "parameters": [
            ""
        ],
        "comments": "Returns the match state of this matcher as a MatchResult."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this matcher."
    },
    {
        "function": "useAnchoringBounds",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the anchoring of region bounds for this matcher."
    },
    {
        "function": "usePattern",
        "parameters": [
            "Pattern"
        ],
        "comments": "Changes the Pattern that this Matcher uses to find matches with."
    },
    {
        "function": "useTransparentBounds",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the transparency of region bounds for this matcher."
    },
    {
        "function": "asMatchPredicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a predicate that tests if this pattern matches a given input string."
    },
    {
        "function": "asPredicate",
        "parameters": [
            ""
        ],
        "comments": "Creates a predicate that tests if this pattern is found in a given input string."
    },
    {
        "function": "compile",
        "parameters": [
            "String"
        ],
        "comments": "Compiles the given regular expression into a pattern."
    },
    {
        "function": "compile",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Compiles the given regular expression into a pattern with the given flags."
    },
    {
        "function": "flags",
        "parameters": [
            ""
        ],
        "comments": "Returns this pattern's match flags."
    },
    {
        "function": "matcher",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a matcher that will match the given input against this pattern."
    },
    {
        "function": "matches",
        "parameters": [
            "String",
            "CharSequence"
        ],
        "comments": "Compiles the given regular expression and attempts to match the given input against it."
    },
    {
        "function": "pattern",
        "parameters": [
            ""
        ],
        "comments": "Returns the regular expression from which this pattern was compiled."
    },
    {
        "function": "quote",
        "parameters": [
            "String"
        ],
        "comments": "Returns a literal pattern String for the specified String."
    },
    {
        "function": "split",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Splits the given input sequence around matches of this pattern."
    },
    {
        "function": "split",
        "parameters": [
            "CharSequence",
            "int"
        ],
        "comments": "Splits the given input sequence around matches of this pattern."
    },
    {
        "function": "splitAsStream",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Creates a stream from the given input sequence around matches of this pattern."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the string representation of this pattern."
    },
    {
        "function": "getControl",
        "parameters": [
            "String"
        ],
        "comments": "Returns a ResourceBundle.Control instance that is used to handle resource bundle loading for the given  baseName."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a ResourceBundle for the given bundle name and locale."
    },
    {
        "function": "findFirst",
        "parameters": [
            "String"
        ],
        "comments": "Returns the first instance of a ToolProvider with the given name, as loaded by ServiceLoader using the system class loader."
    },
    {
        "function": "name",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of this tool provider."
    },
    {
        "function": "run",
        "parameters": [
            "PrintStream",
            "PrintStream",
            "String..."
        ],
        "comments": "Runs an instance of the tool, returning zero for a successful run."
    },
    {
        "function": "run",
        "parameters": [
            "PrintWriter",
            "PrintWriter",
            "String..."
        ],
        "comments": "Runs an instance of the tool, returning zero for a successful run."
    },
    {
        "function": "getBundle",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Constructs an AbstractResourceBundleProvider with the \"java.properties\" format."
    },
    {
        "function": "toBundleName",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Constructs an AbstractResourceBundleProvider with the specified formats."
    },
    {
        "function": "getFirstDayOfWeek",
        "parameters": [
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getMinimalDaysInFirstWeek",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns the first day of a week in the given locale."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "String",
            "int",
            "int",
            "int",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getDisplayNames",
        "parameters": [
            "String",
            "int",
            "int",
            "Locale"
        ],
        "comments": "Returns the string representation (display name) of the calendar field value in the given style and locale."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getSymbol",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a name for the currency that is appropriate for display to the user."
    },
    {
        "function": "getDisplayCountry",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getDisplayLanguage",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a localized name for the given  IETF BCP47 region code (either ISO 3166 country code or UN M.49 area codes) and the given locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayScript",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a localized name for the given  IETF BCP47 language code and the given locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayUnicodeExtensionKey",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a localized name for the given  IETF BCP47 script code and the given locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayUnicodeExtensionType",
        "parameters": [
            "String",
            "String",
            "Locale"
        ],
        "comments": "Returns a localized name for the given Unicode extension key, and the given locale that is appropriate for display to the user."
    },
    {
        "function": "getDisplayVariant",
        "parameters": [
            "String",
            "Locale"
        ],
        "comments": "Returns a localized name for the given Unicode extension type, and the given locale that is appropriate for display to the user."
    },
    {
        "function": "getAvailableLocales",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new locale service provider."
    },
    {
        "function": "isSupportedLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Returns an array of all locales for which this locale service provider can provide localized objects or names."
    },
    {
        "function": "getDisplayName",
        "parameters": [
            "String",
            "boolean",
            "int",
            "Locale"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getGenericDisplayName",
        "parameters": [
            "String",
            "int",
            "Locale"
        ],
        "comments": "Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale."
    },
    {
        "function": "allMatch",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns whether all elements of this stream match the provided predicate."
    },
    {
        "function": "anyMatch",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns whether any elements of this stream match the provided predicate."
    },
    {
        "function": "average",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "boxed",
        "parameters": [
            ""
        ],
        "comments": "Returns a Stream consisting of the elements of this stream, boxed to Double."
    },
    {
        "function": "builder",
        "parameters": [
            ""
        ],
        "comments": "Returns a builder for a DoubleStream."
    },
    {
        "function": "collect",
        "parameters": [
            "Supplier<R>",
            "ObjDoubleConsumer<R>",
            "BiConsumer<R",
            "R>"
        ],
        "comments": "Performs a mutable reduction operation on the elements of this stream."
    },
    {
        "function": "concat",
        "parameters": [
            "DoubleStream",
            "DoubleStream"
        ],
        "comments": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream."
    },
    {
        "function": "count",
        "parameters": [
            ""
        ],
        "comments": "Returns the count of elements in this stream."
    },
    {
        "function": "distinct",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the distinct elements of this stream."
    },
    {
        "function": "dropWhile",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty sequential DoubleStream."
    },
    {
        "function": "filter",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns a stream consisting of the elements of this stream that match the given predicate."
    },
    {
        "function": "findAny",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing some element of the stream, or an empty OptionalDouble if the stream is empty."
    },
    {
        "function": "findFirst",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the first element of this stream, or an empty OptionalDouble if the stream is empty."
    },
    {
        "function": "flatMap",
        "parameters": [
            "DoubleFunction<?"
        ],
        "comments": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element."
    },
    {
        "function": "forEach",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "Performs an action for each element of this stream."
    },
    {
        "function": "forEachOrdered",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
    },
    {
        "function": "generate",
        "parameters": [
            "DoubleSupplier"
        ],
        "comments": "Returns an infinite sequential unordered stream where each element is generated by the provided DoubleSupplier."
    },
    {
        "function": "iterate",
        "parameters": [
            "double",
            "DoublePredicate",
            "DoubleUnaryOperator"
        ],
        "comments": "Returns a sequential ordered DoubleStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate."
    },
    {
        "function": "iterate",
        "parameters": [
            "double",
            "DoubleUnaryOperator"
        ],
        "comments": "Returns an infinite sequential ordered DoubleStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc."
    },
    {
        "function": "limit",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length."
    },
    {
        "function": "map",
        "parameters": [
            "DoubleUnaryOperator"
        ],
        "comments": "Returns a stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToInt",
        "parameters": [
            "DoubleToIntFunction"
        ],
        "comments": "Returns an IntStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToLong",
        "parameters": [
            "DoubleToLongFunction"
        ],
        "comments": "Returns a LongStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToObj",
        "parameters": [
            "DoubleFunction<?"
        ],
        "comments": "Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "max",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty."
    },
    {
        "function": "min",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty."
    },
    {
        "function": "noneMatch",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns whether no elements of this stream match the provided predicate."
    },
    {
        "function": "of",
        "parameters": [
            "double"
        ],
        "comments": "Returns a sequential DoubleStream containing a single element."
    },
    {
        "function": "of",
        "parameters": [
            "double..."
        ],
        "comments": "Returns a sequential ordered stream whose elements are the specified values."
    },
    {
        "function": "peek",
        "parameters": [
            "DoubleConsumer"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
    },
    {
        "function": "reduce",
        "parameters": [
            "double",
            "DoubleBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
    },
    {
        "function": "reduce",
        "parameters": [
            "DoubleBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalDouble describing the reduced value, if any."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream."
    },
    {
        "function": "sorted",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the elements of this stream in sorted order."
    },
    {
        "function": "sum",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum of elements in this stream."
    },
    {
        "function": "summaryStatistics",
        "parameters": [
            ""
        ],
        "comments": "Returns a DoubleSummaryStatistics describing various summary data about the elements of this stream."
    },
    {
        "function": "takeWhile",
        "parameters": [
            "DoublePredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate."
    },
    {
        "function": "toArray",
        "parameters": [
            ""
        ],
        "comments": "Returns an array containing the elements of this stream."
    },
    {
        "function": "accept",
        "parameters": [
            "double"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "add",
        "parameters": [
            "double"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Builds the stream, transitioning this builder to the built state."
    },
    {
        "function": "allMatch",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns whether all elements of this stream match the provided predicate."
    },
    {
        "function": "anyMatch",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns whether any elements of this stream match the provided predicate."
    },
    {
        "function": "asDoubleStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a DoubleStream consisting of the elements of this stream, converted to double."
    },
    {
        "function": "asLongStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a LongStream consisting of the elements of this stream, converted to long."
    },
    {
        "function": "average",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "boxed",
        "parameters": [
            ""
        ],
        "comments": "Returns a Stream consisting of the elements of this stream, each boxed to an Integer."
    },
    {
        "function": "builder",
        "parameters": [
            ""
        ],
        "comments": "Returns a builder for an IntStream."
    },
    {
        "function": "collect",
        "parameters": [
            "Supplier<R>",
            "ObjIntConsumer<R>",
            "BiConsumer<R",
            "R>"
        ],
        "comments": "Performs a mutable reduction operation on the elements of this stream."
    },
    {
        "function": "concat",
        "parameters": [
            "IntStream",
            "IntStream"
        ],
        "comments": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream."
    },
    {
        "function": "count",
        "parameters": [
            ""
        ],
        "comments": "Returns the count of elements in this stream."
    },
    {
        "function": "distinct",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the distinct elements of this stream."
    },
    {
        "function": "dropWhile",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty sequential IntStream."
    },
    {
        "function": "filter",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns a stream consisting of the elements of this stream that match the given predicate."
    },
    {
        "function": "findAny",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty."
    },
    {
        "function": "findFirst",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty."
    },
    {
        "function": "flatMap",
        "parameters": [
            "IntFunction<?"
        ],
        "comments": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element."
    },
    {
        "function": "forEach",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "Performs an action for each element of this stream."
    },
    {
        "function": "forEachOrdered",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
    },
    {
        "function": "generate",
        "parameters": [
            "IntSupplier"
        ],
        "comments": "Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier."
    },
    {
        "function": "iterate",
        "parameters": [
            "int",
            "IntPredicate",
            "IntUnaryOperator"
        ],
        "comments": "Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate."
    },
    {
        "function": "iterate",
        "parameters": [
            "int",
            "IntUnaryOperator"
        ],
        "comments": "Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc."
    },
    {
        "function": "limit",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length."
    },
    {
        "function": "map",
        "parameters": [
            "IntUnaryOperator"
        ],
        "comments": "Returns a stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToDouble",
        "parameters": [
            "IntToDoubleFunction"
        ],
        "comments": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToLong",
        "parameters": [
            "IntToLongFunction"
        ],
        "comments": "Returns a LongStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToObj",
        "parameters": [
            "IntFunction<?"
        ],
        "comments": "Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "max",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "min",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "noneMatch",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns whether no elements of this stream match the provided predicate."
    },
    {
        "function": "of",
        "parameters": [
            "int"
        ],
        "comments": "Returns a sequential IntStream containing a single element."
    },
    {
        "function": "of",
        "parameters": [
            "int..."
        ],
        "comments": "Returns a sequential ordered stream whose elements are the specified values."
    },
    {
        "function": "peek",
        "parameters": [
            "IntConsumer"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
    },
    {
        "function": "range",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1."
    },
    {
        "function": "rangeClosed",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1."
    },
    {
        "function": "reduce",
        "parameters": [
            "int",
            "IntBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
    },
    {
        "function": "reduce",
        "parameters": [
            "IntBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream."
    },
    {
        "function": "sorted",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the elements of this stream in sorted order."
    },
    {
        "function": "sum",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum of elements in this stream."
    },
    {
        "function": "summaryStatistics",
        "parameters": [
            ""
        ],
        "comments": "Returns an IntSummaryStatistics describing various summary data about the elements of this stream."
    },
    {
        "function": "takeWhile",
        "parameters": [
            "IntPredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate."
    },
    {
        "function": "toArray",
        "parameters": [
            ""
        ],
        "comments": "Returns an array containing the elements of this stream."
    },
    {
        "function": "accept",
        "parameters": [
            "int"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "add",
        "parameters": [
            "int"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Builds the stream, transitioning this builder to the built state."
    },
    {
        "function": "allMatch",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns whether all elements of this stream match the provided predicate."
    },
    {
        "function": "anyMatch",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns whether any elements of this stream match the provided predicate."
    },
    {
        "function": "asDoubleStream",
        "parameters": [
            ""
        ],
        "comments": "Returns a DoubleStream consisting of the elements of this stream, converted to double."
    },
    {
        "function": "average",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "boxed",
        "parameters": [
            ""
        ],
        "comments": "Returns a Stream consisting of the elements of this stream, each boxed to a Long."
    },
    {
        "function": "builder",
        "parameters": [
            ""
        ],
        "comments": "Returns a builder for a LongStream."
    },
    {
        "function": "collect",
        "parameters": [
            "Supplier<R>",
            "ObjLongConsumer<R>",
            "BiConsumer<R",
            "R>"
        ],
        "comments": "Performs a mutable reduction operation on the elements of this stream."
    },
    {
        "function": "concat",
        "parameters": [
            "LongStream",
            "LongStream"
        ],
        "comments": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream."
    },
    {
        "function": "count",
        "parameters": [
            ""
        ],
        "comments": "Returns the count of elements in this stream."
    },
    {
        "function": "distinct",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the distinct elements of this stream."
    },
    {
        "function": "dropWhile",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate."
    },
    {
        "function": "empty",
        "parameters": [
            ""
        ],
        "comments": "Returns an empty sequential LongStream."
    },
    {
        "function": "filter",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns a stream consisting of the elements of this stream that match the given predicate."
    },
    {
        "function": "findAny",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalLong describing some element of the stream, or an empty OptionalLong if the stream is empty."
    },
    {
        "function": "findFirst",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalLong describing the first element of this stream, or an empty OptionalLong if the stream is empty."
    },
    {
        "function": "flatMap",
        "parameters": [
            "LongFunction<?"
        ],
        "comments": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element."
    },
    {
        "function": "forEach",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "Performs an action for each element of this stream."
    },
    {
        "function": "forEachOrdered",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order."
    },
    {
        "function": "generate",
        "parameters": [
            "LongSupplier"
        ],
        "comments": "Returns an infinite sequential unordered stream where each element is generated by the provided LongSupplier."
    },
    {
        "function": "iterate",
        "parameters": [
            "long",
            "LongPredicate",
            "LongUnaryOperator"
        ],
        "comments": "Returns a sequential ordered LongStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate."
    },
    {
        "function": "iterate",
        "parameters": [
            "long",
            "LongUnaryOperator"
        ],
        "comments": "Returns an infinite sequential ordered LongStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc."
    },
    {
        "function": "limit",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length."
    },
    {
        "function": "map",
        "parameters": [
            "LongUnaryOperator"
        ],
        "comments": "Returns a stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToDouble",
        "parameters": [
            "LongToDoubleFunction"
        ],
        "comments": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToInt",
        "parameters": [
            "LongToIntFunction"
        ],
        "comments": "Returns an IntStream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "mapToObj",
        "parameters": [
            "LongFunction<?"
        ],
        "comments": "Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream."
    },
    {
        "function": "max",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalLong describing the maximum element of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "min",
        "parameters": [
            ""
        ],
        "comments": "Returns an OptionalLong describing the minimum element of this stream, or an empty optional if this stream is empty."
    },
    {
        "function": "noneMatch",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns whether no elements of this stream match the provided predicate."
    },
    {
        "function": "of",
        "parameters": [
            "long"
        ],
        "comments": "Returns a sequential LongStream containing a single element."
    },
    {
        "function": "of",
        "parameters": [
            "long..."
        ],
        "comments": "Returns a sequential ordered stream whose elements are the specified values."
    },
    {
        "function": "peek",
        "parameters": [
            "LongConsumer"
        ],
        "comments": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream."
    },
    {
        "function": "range",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns a sequential ordered LongStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1."
    },
    {
        "function": "rangeClosed",
        "parameters": [
            "long",
            "long"
        ],
        "comments": "Returns a sequential ordered LongStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1."
    },
    {
        "function": "reduce",
        "parameters": [
            "long",
            "LongBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value."
    },
    {
        "function": "reduce",
        "parameters": [
            "LongBinaryOperator"
        ],
        "comments": "Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalLong describing the reduced value, if any."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream."
    },
    {
        "function": "sorted",
        "parameters": [
            ""
        ],
        "comments": "Returns a stream consisting of the elements of this stream in sorted order."
    },
    {
        "function": "sum",
        "parameters": [
            ""
        ],
        "comments": "Returns the sum of elements in this stream."
    },
    {
        "function": "summaryStatistics",
        "parameters": [
            ""
        ],
        "comments": "Returns a LongSummaryStatistics describing various summary data about the elements of this stream."
    },
    {
        "function": "takeWhile",
        "parameters": [
            "LongPredicate"
        ],
        "comments": "Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate."
    },
    {
        "function": "toArray",
        "parameters": [
            ""
        ],
        "comments": "Returns an array containing the elements of this stream."
    },
    {
        "function": "accept",
        "parameters": [
            "long"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "add",
        "parameters": [
            "long"
        ],
        "comments": "Adds an element to the stream being built."
    },
    {
        "function": "build",
        "parameters": [
            ""
        ],
        "comments": "Builds the stream, transitioning this builder to the built state."
    },
    {
        "function": "averagingDouble",
        "parameters": [
            "ToDoubleFunction<?"
        ],
        "comments": "Returns a Collector that produces the arithmetic mean of a double-valued function applied to the input elements."
    },
    {
        "function": "averagingInt",
        "parameters": [
            "ToIntFunction<?"
        ],
        "comments": "Returns a Collector that produces the arithmetic mean of an integer-valued function applied to the input elements."
    },
    {
        "function": "averagingLong",
        "parameters": [
            "ToLongFunction<?"
        ],
        "comments": "Returns a Collector that produces the arithmetic mean of a long-valued function applied to the input elements."
    },
    {
        "function": "collectingAndThen",
        "parameters": [
            "Collector<T",
            "A",
            "R>",
            "Function<R",
            "RR>"
        ],
        "comments": "Adapts a Collector to perform an additional finishing transformation."
    },
    {
        "function": "counting",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector accepting elements of type T that counts the number of input elements."
    },
    {
        "function": "filtering",
        "parameters": [
            "Predicate<?",
            "Collector<?",
            "A",
            "R>"
        ],
        "comments": "Adapts a Collector to one accepting elements of the same type T by applying the predicate to each input element and only accumulating if the predicate returns true."
    },
    {
        "function": "flatMapping",
        "parameters": [
            "Function<?",
            "?",
            "Collector<?",
            "A",
            "R>"
        ],
        "comments": "Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a flat mapping function to each input element before accumulation."
    },
    {
        "function": "groupingBy",
        "parameters": [
            "Function<?",
            "?"
        ],
        "comments": "Returns a Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map."
    },
    {
        "function": "groupingBy",
        "parameters": [
            "Function<?",
            "?",
            "Supplier<M>",
            "Collector<?",
            "A",
            "D>"
        ],
        "comments": "Returns a Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
    },
    {
        "function": "groupingBy",
        "parameters": [
            "Function<?",
            "?",
            "Collector<?",
            "A",
            "D>"
        ],
        "comments": "Returns a Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
    },
    {
        "function": "groupingByConcurrent",
        "parameters": [
            "Function<?",
            "?"
        ],
        "comments": "Returns a concurrent Collector implementing a \"group by\" operation on input elements of type T, grouping elements according to a classification function."
    },
    {
        "function": "groupingByConcurrent",
        "parameters": [
            "Function<?",
            "?",
            "Supplier<M>",
            "Collector<?",
            "A",
            "D>"
        ],
        "comments": "Returns a concurrent Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
    },
    {
        "function": "groupingByConcurrent",
        "parameters": [
            "Function<?",
            "?",
            "Collector<?",
            "A",
            "D>"
        ],
        "comments": "Returns a concurrent Collector implementing a cascaded \"group by\" operation on input elements of type T, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream Collector."
    },
    {
        "function": "joining",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector that concatenates the input elements into a String, in encounter order."
    },
    {
        "function": "joining",
        "parameters": [
            "CharSequence"
        ],
        "comments": "Returns a Collector that concatenates the input elements, separated by the specified delimiter, in encounter order."
    },
    {
        "function": "joining",
        "parameters": [
            "CharSequence",
            "CharSequence",
            "CharSequence"
        ],
        "comments": "Returns a Collector that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order."
    },
    {
        "function": "mapping",
        "parameters": [
            "Function<?",
            "?",
            "Collector<?",
            "A",
            "R>"
        ],
        "comments": "Adapts a Collector accepting elements of type U to one accepting elements of type T by applying a mapping function to each input element before accumulation."
    },
    {
        "function": "maxBy",
        "parameters": [
            "Comparator<?"
        ],
        "comments": "Returns a Collector that produces the maximal element according to a given Comparator, described as an Optional<T>."
    },
    {
        "function": "minBy",
        "parameters": [
            "Comparator<?"
        ],
        "comments": "Returns a Collector that produces the minimal element according to a given Comparator, described as an Optional<T>."
    },
    {
        "function": "partitioningBy",
        "parameters": [
            "Predicate<?"
        ],
        "comments": "Returns a Collector which partitions the input elements according to a Predicate, and organizes them into a Map<Boolean, List<T>>."
    },
    {
        "function": "partitioningBy",
        "parameters": [
            "Predicate<?",
            "Collector<?",
            "A",
            "D>"
        ],
        "comments": "Returns a Collector which partitions the input elements according to a Predicate, reduces the values in each partition according to another Collector, and organizes them into a Map<Boolean, D> whose values are the result of the downstream reduction."
    },
    {
        "function": "reducing",
        "parameters": [
            "BinaryOperator<T>"
        ],
        "comments": "Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator."
    },
    {
        "function": "reducing",
        "parameters": [
            "T",
            "BinaryOperator<T>"
        ],
        "comments": "Returns a Collector which performs a reduction of its input elements under a specified BinaryOperator using the provided identity."
    },
    {
        "function": "reducing",
        "parameters": [
            "U",
            "Function<?",
            "?",
            "BinaryOperator<U>"
        ],
        "comments": "Returns a Collector which performs a reduction of its input elements under a specified mapping function and BinaryOperator."
    },
    {
        "function": "summarizingDouble",
        "parameters": [
            "ToDoubleFunction<?"
        ],
        "comments": "Returns a Collector which applies an double-producing mapping function to each input element, and returns summary statistics for the resulting values."
    },
    {
        "function": "summarizingInt",
        "parameters": [
            "ToIntFunction<?"
        ],
        "comments": "Returns a Collector which applies an int-producing mapping function to each input element, and returns summary statistics for the resulting values."
    },
    {
        "function": "summarizingLong",
        "parameters": [
            "ToLongFunction<?"
        ],
        "comments": "Returns a Collector which applies an long-producing mapping function to each input element, and returns summary statistics for the resulting values."
    },
    {
        "function": "summingDouble",
        "parameters": [
            "ToDoubleFunction<?"
        ],
        "comments": "Returns a Collector that produces the sum of a double-valued function applied to the input elements."
    },
    {
        "function": "summingInt",
        "parameters": [
            "ToIntFunction<?"
        ],
        "comments": "Returns a Collector that produces the sum of a integer-valued function applied to the input elements."
    },
    {
        "function": "summingLong",
        "parameters": [
            "ToLongFunction<?"
        ],
        "comments": "Returns a Collector that produces the sum of a long-valued function applied to the input elements."
    },
    {
        "function": "toCollection",
        "parameters": [
            "Supplier<C>"
        ],
        "comments": "Returns a Collector that accumulates the input elements into a new Collection, in encounter order."
    },
    {
        "function": "toConcurrentMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?"
        ],
        "comments": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toConcurrentMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?",
            "BinaryOperator<U>"
        ],
        "comments": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toConcurrentMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?",
            "BinaryOperator<U>",
            "Supplier<M>"
        ],
        "comments": "Returns a concurrent Collector that accumulates elements into a ConcurrentMap whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toList",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector that accumulates the input elements into a new List."
    },
    {
        "function": "toMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?"
        ],
        "comments": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?",
            "BinaryOperator<U>"
        ],
        "comments": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?",
            "BinaryOperator<U>",
            "Supplier<M>"
        ],
        "comments": "Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toSet",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector that accumulates the input elements into a new Set."
    },
    {
        "function": "toUnmodifiableList",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector that accumulates the input elements into an unmodifiable List in encounter order."
    },
    {
        "function": "toUnmodifiableMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?"
        ],
        "comments": "Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toUnmodifiableMap",
        "parameters": [
            "Function<?",
            "?",
            "Function<?",
            "?",
            "BinaryOperator<U>"
        ],
        "comments": "Returns a Collector that accumulates the input elements into an unmodifiable Map, whose keys and values are the result of applying the provided mapping functions to the input elements."
    },
    {
        "function": "toUnmodifiableSet",
        "parameters": [
            ""
        ],
        "comments": "Returns a Collector that accumulates the input elements into an unmodifiable Set."
    },
    {
        "function": "doubleStream",
        "parameters": [
            "Supplier<?",
            "int",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble."
    },
    {
        "function": "doubleStream",
        "parameters": [
            "Spliterator.OfDouble",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble."
    },
    {
        "function": "intStream",
        "parameters": [
            "Supplier<?",
            "int",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt."
    },
    {
        "function": "intStream",
        "parameters": [
            "Spliterator.OfInt",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel IntStream from a Spliterator.OfInt."
    },
    {
        "function": "longStream",
        "parameters": [
            "Supplier<?",
            "int",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong."
    },
    {
        "function": "longStream",
        "parameters": [
            "Spliterator.OfLong",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel LongStream from a Spliterator.OfLong."
    },
    {
        "function": "stream",
        "parameters": [
            "Supplier<?",
            "int",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel Stream from a Supplier of Spliterator."
    },
    {
        "function": "stream",
        "parameters": [
            "Spliterator<T>",
            "boolean"
        ],
        "comments": "Creates a new sequential or parallel Stream from a Spliterator."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "Indicates that this collector is concurrent, meaning that the result container can support the accumulator function being called concurrently with the same result container from multiple threads."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "Indicates that the finisher function is the identity function and can be elided."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Returns the current checksum value."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Resets the checksum to its initial value."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]"
        ],
        "comments": "Updates the current checksum with the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Updates the current checksum with the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "int"
        ],
        "comments": "Updates the current checksum with the specified byte."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the current checksum with the bytes from the specified buffer."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Creates a new Adler32 object."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the checksum value."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Resets the checksum to initial value."
    },
    {
        "function": "update",
        "parameters": [
            "int"
        ],
        "comments": "Updates the checksum with the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the checksum with the specified byte (the low eight bits of the argument b)."
    },
    {
        "function": "getChecksum",
        "parameters": [
            ""
        ],
        "comments": "Creates an input stream using the specified Checksum."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Returns the Checksum for this input stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads a byte."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads into an array of bytes."
    },
    {
        "function": "getChecksum",
        "parameters": [
            ""
        ],
        "comments": "Creates an output stream with the specified Checksum."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the Checksum for this output stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes an array of bytes."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Creates a new CRC32 object."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns CRC-32 value."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Resets CRC-32 to initial value."
    },
    {
        "function": "update",
        "parameters": [
            "int"
        ],
        "comments": "Updates the CRC-32 checksum with the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b)."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Creates a new CRC32C object."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns CRC-32C value."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Resets CRC-32C to initial value."
    },
    {
        "function": "update",
        "parameters": [
            "int"
        ],
        "comments": "Updates the CRC-32C checksum with the specified array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Updates the CRC-32C checksum with the specified byte (the low eight bits of the argument b)."
    },
    {
        "function": "deflate",
        "parameters": [
            "byte[]"
        ],
        "comments": "Creates a new compressor with the default compression level."
    },
    {
        "function": "deflate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Creates a new compressor using the specified compression level."
    },
    {
        "function": "deflate",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "int"
        ],
        "comments": "Creates a new compressor using the specified compression level."
    },
    {
        "function": "deflate",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Compresses the input data and fills specified buffer with compressed data."
    },
    {
        "function": "deflate",
        "parameters": [
            "ByteBuffer",
            "int"
        ],
        "comments": "Compresses the input data and fills specified buffer with compressed data."
    },
    {
        "function": "end",
        "parameters": [
            ""
        ],
        "comments": "Compresses the input data and fills the specified buffer with compressed data."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Compresses the input data and fills specified buffer with compressed data."
    },
    {
        "function": "finish",
        "parameters": [
            ""
        ],
        "comments": "Compresses the input data and fills the specified buffer with compressed data."
    },
    {
        "function": "finished",
        "parameters": [
            ""
        ],
        "comments": "Closes the compressor and discards any unprocessed input."
    },
    {
        "function": "getAdler",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.The finalize method has been deprecated and will be     removed."
    },
    {
        "function": "getBytesRead",
        "parameters": [
            ""
        ],
        "comments": "When called, indicates that compression should end with the current contents of the input buffer."
    },
    {
        "function": "getBytesWritten",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the end of the compressed data output stream has been reached."
    },
    {
        "function": "getTotalIn",
        "parameters": [
            ""
        ],
        "comments": "Returns the ADLER-32 value of the uncompressed data."
    },
    {
        "function": "getTotalOut",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of uncompressed bytes input so far."
    },
    {
        "function": "needsInput",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of compressed bytes output so far."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of uncompressed bytes input so far."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the total number of compressed bytes output so far."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns true if no data remains in the input buffer."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Resets deflater so that a new set of input data can be processed."
    },
    {
        "function": "setInput",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets preset dictionary for compression."
    },
    {
        "function": "setInput",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Sets preset dictionary for compression."
    },
    {
        "function": "setInput",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Sets preset dictionary for compression."
    },
    {
        "function": "setLevel",
        "parameters": [
            "int"
        ],
        "comments": "Sets input data for compression."
    },
    {
        "function": "setStrategy",
        "parameters": [
            "int"
        ],
        "comments": "Sets input data for compression."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with a default compressor and buffer size."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with the specified compressor and a default buffer size."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new input stream with the specified compressor and buffer size."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Returns 0 after EOF has been reached, otherwise always return 1."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and its underlying input stream, discarding any pending uncompressed data."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "This operation is not supported."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Always returns false because this input stream does not support the mark() and reset() methods."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads a single byte of compressed data from the input stream."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with a default compressor and buffer size."
    },
    {
        "function": "deflate",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with a default compressor, a default buffer size and the specified flush mode."
    },
    {
        "function": "finish",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with the specified compressor and a default buffer size."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with the specified compressor, flush mode and a default buffer size."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Creates a new output stream with the specified compressor and buffer size."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Creates a new output stream with the specified compressor, buffer size and flush mode."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with a default buffer size."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Creates a new input stream with the specified buffer size."
    },
    {
        "function": "finish",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with a default buffer size."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Creates a new output stream with a default buffer size and the specified flush mode."
    },
    {
        "function": "end",
        "parameters": [
            ""
        ],
        "comments": "Creates a new decompressor."
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": "Creates a new decompressor."
    },
    {
        "function": "finished",
        "parameters": [
            ""
        ],
        "comments": "Closes the decompressor and discards any unprocessed input."
    },
    {
        "function": "getAdler",
        "parameters": [
            ""
        ],
        "comments": "Deprecated, for removal: This API element is subject to removal in a future version.The finalize method has been deprecated and will be     removed."
    },
    {
        "function": "getBytesRead",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the end of the compressed data stream has been reached."
    },
    {
        "function": "getBytesWritten",
        "parameters": [
            ""
        ],
        "comments": "Returns the ADLER-32 value of the uncompressed data."
    },
    {
        "function": "getRemaining",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of compressed bytes input so far."
    },
    {
        "function": "getTotalIn",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of uncompressed bytes output so far."
    },
    {
        "function": "getTotalOut",
        "parameters": [
            ""
        ],
        "comments": "Returns the total number of bytes remaining in the input buffer."
    },
    {
        "function": "inflate",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the total number of compressed bytes input so far."
    },
    {
        "function": "inflate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Returns the total number of uncompressed bytes output so far."
    },
    {
        "function": "inflate",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Uncompresses bytes into specified buffer."
    },
    {
        "function": "needsDictionary",
        "parameters": [
            ""
        ],
        "comments": "Uncompresses bytes into specified buffer."
    },
    {
        "function": "needsInput",
        "parameters": [
            ""
        ],
        "comments": "Uncompresses bytes into specified buffer."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Returns true if a preset dictionary is needed for decompression."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns true if no data remains in the input buffer."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Resets inflater so that a new set of input data can be processed."
    },
    {
        "function": "setDictionary",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Sets the preset dictionary to the given array of bytes."
    },
    {
        "function": "setInput",
        "parameters": [
            "byte[]"
        ],
        "comments": "Sets the preset dictionary to the given array of bytes."
    },
    {
        "function": "setInput",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Sets the preset dictionary to the bytes in the given buffer."
    },
    {
        "function": "setInput",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Sets input data for decompression."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with a default decompressor and buffer size."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with the specified decompressor and a default buffer size."
    },
    {
        "function": "fill",
        "parameters": [
            ""
        ],
        "comments": "Creates a new input stream with the specified decompressor and buffer size."
    },
    {
        "function": "mark",
        "parameters": [
            "int"
        ],
        "comments": "Returns 0 after EOF has been reached, otherwise always return 1."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Fills input buffer with more data to decompress."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Marks the current position in this input stream."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Tests if this input stream supports the mark and reset methods."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads a byte of uncompressed data."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with a default decompressor and buffer size."
    },
    {
        "function": "finish",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with the specified decompressor and a default buffer size."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Creates a new output stream with the specified decompressor and buffer size."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Writes any remaining uncompressed data to the output stream and closes the underlying output stream."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Finishes writing uncompressed data to the output stream without closing the underlying stream."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getComment",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getCompressedSize",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getCrc",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getCreationTime",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getExtra",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getLastAccessTime",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getLastModifiedTime",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getMethod",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getSize",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getTime",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getTimeLocal",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "isDirectory",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "setComment",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "setCompressedSize",
        "parameters": [
            "long"
        ],
        "comments": ""
    },
    {
        "function": "setCrc",
        "parameters": [
            "long"
        ],
        "comments": ""
    },
    {
        "function": "setCreationTime",
        "parameters": [
            "FileTime"
        ],
        "comments": ""
    },
    {
        "function": "setExtra",
        "parameters": [
            "byte[]"
        ],
        "comments": ""
    },
    {
        "function": "setLastAccessTime",
        "parameters": [
            "FileTime"
        ],
        "comments": ""
    },
    {
        "function": "setLastModifiedTime",
        "parameters": [
            "FileTime"
        ],
        "comments": ""
    },
    {
        "function": "setMethod",
        "parameters": [
            "int"
        ],
        "comments": ""
    },
    {
        "function": "setSize",
        "parameters": [
            "long"
        ],
        "comments": ""
    },
    {
        "function": "setTime",
        "parameters": [
            "long"
        ],
        "comments": ""
    },
    {
        "function": "setTimeLocal",
        "parameters": [
            "LocalDateTime"
        ],
        "comments": ""
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "entries",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "finalize",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getComment",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "getEntry",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "getInputStream",
        "parameters": [
            "ZipEntry"
        ],
        "comments": ""
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "size",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "stream",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "closeEntry",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "createZipEntry",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "getNextEntry",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": ""
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": ""
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "closeEntry",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "finish",
        "parameters": [
            ""
        ],
        "comments": ""
    },
    {
        "function": "putNextEntry",
        "parameters": [
            "ZipEntry"
        ],
        "comments": ""
    },
    {
        "function": "setComment",
        "parameters": [
            "String"
        ],
        "comments": ""
    },
    {
        "function": "setLevel",
        "parameters": [
            "int"
        ],
        "comments": ""
    },
    {
        "function": "setMethod",
        "parameters": [
            "int"
        ],
        "comments": ""
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": ""
    },
    {
        "function": "doFinal",
        "parameters": [
            ""
        ],
        "comments": "Creates a Cipher object."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]"
        ],
        "comments": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Finishes a multiple-part encryption or decryption operation, depending on how this cipher was initialized."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "doFinal",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "getBlockSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the algorithm name of this Cipher object."
    },
    {
        "function": "getExemptionMechanism",
        "parameters": [
            ""
        ],
        "comments": "Returns the block size (in bytes)."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the exemption mechanism object used with this cipher."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a Cipher object that implements the specified transformation."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a Cipher object that implements the specified transformation."
    },
    {
        "function": "getIV",
        "parameters": [
            ""
        ],
        "comments": "Returns a Cipher object that implements the specified transformation."
    },
    {
        "function": "getMaxAllowedKeyLength",
        "parameters": [
            "String"
        ],
        "comments": "Returns the initialization vector (IV) in a new buffer."
    },
    {
        "function": "getMaxAllowedParameterSpec",
        "parameters": [
            "String"
        ],
        "comments": "Returns the maximum key length for the specified transformation according to the installed JCE jurisdiction policy files."
    },
    {
        "function": "getOutputSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns an AlgorithmParameterSpec object which contains the maximum cipher parameter value according to the jurisdiction policy file."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes)."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters used with this cipher."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Certificate"
        ],
        "comments": "Returns the provider of this Cipher object."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Certificate",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with the public key from the given certificate."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key"
        ],
        "comments": "Initializes this cipher with the public key from the given certificate and a source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameters"
        ],
        "comments": "Initializes this cipher with a key."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameters",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key and a set of algorithm parameters."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this cipher with a key and a source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key and a set of algorithm parameters."
    },
    {
        "function": "unwrap",
        "parameters": [
            "byte[]",
            "String",
            "int"
        ],
        "comments": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]"
        ],
        "comments": "Unwrap a previously wrapped key."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "updateAAD",
        "parameters": [
            "byte[]"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "updateAAD",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Continues a multi-part update of the Additional Authentication Data (AAD)."
    },
    {
        "function": "updateAAD",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "Key"
        ],
        "comments": "Continues a multi-part update of the Additional Authentication Data (AAD)."
    },
    {
        "function": "available",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CipherInputStream from an InputStream without specifying a Cipher."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CipherInputStream from an InputStream and a Cipher."
    },
    {
        "function": "markSupported",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes that can be read from this input stream without blocking."
    },
    {
        "function": "read",
        "parameters": [
            ""
        ],
        "comments": "Closes this input stream and releases any system resources associated with the stream."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]"
        ],
        "comments": "Tests if this input stream supports the mark and reset methods, which it does not."
    },
    {
        "function": "read",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Reads the next byte of data from this input stream."
    },
    {
        "function": "skip",
        "parameters": [
            "long"
        ],
        "comments": "Reads up to b.length bytes of data from this input stream into an array of bytes."
    },
    {
        "function": "close",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CipherOutputStream from an OutputStream without specifying a Cipher."
    },
    {
        "function": "flush",
        "parameters": [
            ""
        ],
        "comments": "Constructs a CipherOutputStream from an OutputStream and a Cipher."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]"
        ],
        "comments": "Closes this output stream and releases any system resources associated with this stream."
    },
    {
        "function": "write",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Flushes this output stream by forcing any buffered output bytes that have already been processed by the encapsulated cipher object to be written out."
    },
    {
        "function": "write",
        "parameters": [
            "int"
        ],
        "comments": "Writes b.length bytes from the specified byte array to this output stream."
    },
    {
        "function": "engineDoFinal",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "engineDoFinal",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "engineDoFinal",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Encrypts or decrypts data in a single-part operation, or finishes a multiple-part operation."
    },
    {
        "function": "engineGetBlockSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the block size (in bytes)."
    },
    {
        "function": "engineGetIV",
        "parameters": [
            ""
        ],
        "comments": "Returns the initialization vector (IV) in a new buffer."
    },
    {
        "function": "engineGetKeySize",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the key size of the given key object in bits."
    },
    {
        "function": "engineGetOutputSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next update or doFinal operation, given the input length inputLen (in bytes)."
    },
    {
        "function": "engineGetParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters used with this cipher."
    },
    {
        "function": "engineInit",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameters",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
        "function": "engineInit",
        "parameters": [
            "int",
            "Key",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key and a source of randomness."
    },
    {
        "function": "engineInit",
        "parameters": [
            "int",
            "Key",
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this cipher with a key, a set of algorithm parameters, and a source of randomness."
    },
    {
        "function": "engineSetMode",
        "parameters": [
            "String"
        ],
        "comments": "Sets the mode of this cipher."
    },
    {
        "function": "engineSetPadding",
        "parameters": [
            "String"
        ],
        "comments": "Sets the padding mechanism of this cipher."
    },
    {
        "function": "engineUnwrap",
        "parameters": [
            "byte[]",
            "String",
            "int"
        ],
        "comments": "Unwrap a previously wrapped key."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte[]",
            "int",
            "int",
            "byte[]",
            "int"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Continues a multiple-part encryption or decryption operation (depending on how this cipher was initialized), processing another data part."
    },
    {
        "function": "engineUpdateAAD",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Continues a multi-part update of the Additional Authentication Data (AAD), using a subset of the provided buffer."
    },
    {
        "function": "engineUpdateAAD",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Continues a multi-part update of the Additional Authentication Data (AAD)."
    },
    {
        "function": "engineWrap",
        "parameters": [
            "Key"
        ],
        "comments": "Wrap a key."
    },
    {
        "function": "getAlgName",
        "parameters": [
            ""
        ],
        "comments": "Constructs (i.e., parses) an EncryptedPrivateKeyInfo from its ASN.1 encoding."
    },
    {
        "function": "getAlgParameters",
        "parameters": [
            ""
        ],
        "comments": "Constructs an EncryptedPrivateKeyInfo from the encryption algorithm name and the encrypted data."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Constructs an EncryptedPrivateKeyInfo from the encryption algorithm parameters and the encrypted data."
    },
    {
        "function": "getEncryptedData",
        "parameters": [
            ""
        ],
        "comments": "Returns the encryption algorithm."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the algorithm parameters used by the encryption algorithm."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "Key",
            "String"
        ],
        "comments": "Returns the ASN.1 encoding of this object."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "Key",
            "Provider"
        ],
        "comments": "Returns the encrypted data."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "Cipher"
        ],
        "comments": "Extract the enclosed PKCS8EncodedKeySpec object from the encrypted data and return it."
    },
    {
        "function": "genExemptionBlob",
        "parameters": [
            ""
        ],
        "comments": "Creates a ExemptionMechanism object."
    },
    {
        "function": "genExemptionBlob",
        "parameters": [
            "byte[]"
        ],
        "comments": "Generates the exemption mechanism key blob."
    },
    {
        "function": "genExemptionBlob",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Generates the exemption mechanism key blob, and stores the result in the output buffer."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm."
    },
    {
        "function": "getOutputSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the exemption mechanism name of this ExemptionMechanism object."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next genExemptionBlob operation, given the input length inputLen (in bytes)."
    },
    {
        "function": "init",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the provider of this ExemptionMechanism object."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "AlgorithmParameters"
        ],
        "comments": "Initializes this exemption mechanism with a key."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this exemption mechanism with a key and a set of algorithm parameters."
    },
    {
        "function": "isCryptoAllowed",
        "parameters": [
            "Key"
        ],
        "comments": "Initializes this exemption mechanism with a key and a set of algorithm parameters."
    },
    {
        "function": "engineGenExemptionBlob",
        "parameters": [
            ""
        ],
        "comments": "Generates the exemption mechanism key blob."
    },
    {
        "function": "engineGenExemptionBlob",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive."
    },
    {
        "function": "engineGetOutputSize",
        "parameters": [
            "int"
        ],
        "comments": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next engineGenExemptionBlob operation, given the input length inputLen (in bytes)."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key"
        ],
        "comments": "Initializes this exemption mechanism with a key."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key",
            "AlgorithmParameters"
        ],
        "comments": "Initializes this exemption mechanism with a key and a set of algorithm parameters."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this exemption mechanism with a key and a set of algorithm parameters."
    },
    {
        "function": "doPhase",
        "parameters": [
            "Key",
            "boolean"
        ],
        "comments": "Creates a KeyAgreement object."
    },
    {
        "function": "generateSecret",
        "parameters": [
            ""
        ],
        "comments": "Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement."
    },
    {
        "function": "generateSecret",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Generates the shared secret and returns it in a new buffer."
    },
    {
        "function": "generateSecret",
        "parameters": [
            "String"
        ],
        "comments": "Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates the shared secret and returns it as a SecretKey object of the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the algorithm name of this KeyAgreement object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a KeyAgreement object that implements the specified key agreement algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a KeyAgreement object that implements the specified key agreement algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a KeyAgreement object that implements the specified key agreement algorithm."
    },
    {
        "function": "init",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the provider of this KeyAgreement object."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "SecureRandom"
        ],
        "comments": "Initializes this key agreement with the given key, which is required to contain all the algorithm parameters required for this key agreement."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this key agreement with the given key and source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this key agreement with the given key and set of algorithm parameters."
    },
    {
        "function": "engineDoPhase",
        "parameters": [
            "Key",
            "boolean"
        ],
        "comments": "Executes the next phase of this key agreement with the given key that was received from one of the other parties involved in this key agreement."
    },
    {
        "function": "engineGenerateSecret",
        "parameters": [
            ""
        ],
        "comments": "Generates the shared secret and returns it in a new buffer."
    },
    {
        "function": "engineGenerateSecret",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Generates the shared secret, and places it into the buffer sharedSecret, beginning at offset inclusive."
    },
    {
        "function": "engineGenerateSecret",
        "parameters": [
            "String"
        ],
        "comments": "Creates the shared secret and returns it as a secret key object of the requested algorithm type."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key",
            "SecureRandom"
        ],
        "comments": "Initializes this key agreement with the given key and source of randomness."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this key agreement with the given key, set of algorithm parameters, and source of randomness."
    },
    {
        "function": "generateKey",
        "parameters": [
            ""
        ],
        "comments": "Creates a KeyGenerator object."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Generates a secret key."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the algorithm name of this KeyGenerator object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a KeyGenerator object that generates secret keys for the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a KeyGenerator object that generates secret keys for the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a KeyGenerator object that generates secret keys for the specified algorithm."
    },
    {
        "function": "init",
        "parameters": [
            "int"
        ],
        "comments": "Returns the provider of this KeyGenerator object."
    },
    {
        "function": "init",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes this key generator for a certain keysize."
    },
    {
        "function": "init",
        "parameters": [
            "SecureRandom"
        ],
        "comments": "Initializes this key generator for a certain keysize, using a user-provided source of randomness."
    },
    {
        "function": "init",
        "parameters": [
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this key generator."
    },
    {
        "function": "init",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes this key generator with the specified parameter set."
    },
    {
        "function": "engineGenerateKey",
        "parameters": [
            ""
        ],
        "comments": "Generates a secret key."
    },
    {
        "function": "engineInit",
        "parameters": [
            "int",
            "SecureRandom"
        ],
        "comments": "Initializes this key generator for a certain keysize, using the given source of randomness."
    },
    {
        "function": "engineInit",
        "parameters": [
            "SecureRandom"
        ],
        "comments": "Initializes the key generator."
    },
    {
        "function": "engineInit",
        "parameters": [
            "AlgorithmParameterSpec",
            "SecureRandom"
        ],
        "comments": "Initializes the key generator with the specified parameter set and a user-provided source of randomness."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Creates a MAC object."
    },
    {
        "function": "doFinal",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the provider implementation is cloneable."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]"
        ],
        "comments": "Finishes the MAC operation."
    },
    {
        "function": "doFinal",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Processes the given array of bytes and finishes the MAC operation."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Finishes the MAC operation."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the algorithm name of this Mac object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a Mac object that implements the specified MAC algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a Mac object that implements the specified MAC algorithm."
    },
    {
        "function": "getMacLength",
        "parameters": [
            ""
        ],
        "comments": "Returns a Mac object that implements the specified MAC algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the MAC in bytes."
    },
    {
        "function": "init",
        "parameters": [
            "Key"
        ],
        "comments": "Returns the provider of this Mac object."
    },
    {
        "function": "init",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes this Mac object with the given key."
    },
    {
        "function": "reset",
        "parameters": [
            ""
        ],
        "comments": "Initializes this Mac object with the given key and algorithm parameters."
    },
    {
        "function": "update",
        "parameters": [
            "byte"
        ],
        "comments": "Resets this Mac object."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]"
        ],
        "comments": "Processes the given byte."
    },
    {
        "function": "update",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Processes the given array of bytes."
    },
    {
        "function": "update",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Processes the first len bytes in input, starting at offset inclusive."
    },
    {
        "function": "clone",
        "parameters": [
            ""
        ],
        "comments": "Returns a clone if the implementation is cloneable."
    },
    {
        "function": "engineDoFinal",
        "parameters": [
            ""
        ],
        "comments": "Completes the MAC computation and resets the MAC for further use, maintaining the secret key that the MAC was initialized with."
    },
    {
        "function": "engineGetMacLength",
        "parameters": [
            ""
        ],
        "comments": "Returns the length of the MAC in bytes."
    },
    {
        "function": "engineInit",
        "parameters": [
            "Key",
            "AlgorithmParameterSpec"
        ],
        "comments": "Initializes the MAC with the given (secret) key and algorithm parameters."
    },
    {
        "function": "engineReset",
        "parameters": [
            ""
        ],
        "comments": "Resets the MAC for further use, maintaining the secret key that the MAC was initialized with."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte"
        ],
        "comments": "Processes the given byte."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "byte[]",
            "int",
            "int"
        ],
        "comments": "Processes the first len bytes in input, starting at offset inclusive."
    },
    {
        "function": "engineUpdate",
        "parameters": [
            "ByteBuffer"
        ],
        "comments": "Processes input.remaining() bytes in the ByteBuffer input, starting at input.position()."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a SealedObject from any Serializable object."
    },
    {
        "function": "getObject",
        "parameters": [
            "Key"
        ],
        "comments": "Constructs a SealedObject object from the passed-in SealedObject."
    },
    {
        "function": "getObject",
        "parameters": [
            "Key",
            "String"
        ],
        "comments": "Returns the algorithm that was used to seal this object."
    },
    {
        "function": "getObject",
        "parameters": [
            "Cipher"
        ],
        "comments": "Retrieves the original (encapsulated) object."
    },
    {
        "function": "generateSecret",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Creates a SecretKeyFactory object."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Generates a SecretKey object from the provided key specification (key material)."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns the algorithm name of this SecretKeyFactory object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm."
    },
    {
        "function": "getKeySpec",
        "parameters": [
            "SecretKey",
            "Class<?>"
        ],
        "comments": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a specification (key material) of the given key object in the requested format."
    },
    {
        "function": "translateKey",
        "parameters": [
            "SecretKey"
        ],
        "comments": "Returns the provider of this SecretKeyFactory object."
    },
    {
        "function": "engineGenerateSecret",
        "parameters": [
            "KeySpec"
        ],
        "comments": "Generates a SecretKey object from the provided key specification (key material)."
    },
    {
        "function": "engineGetKeySpec",
        "parameters": [
            "SecretKey",
            "Class<?>"
        ],
        "comments": "Returns a specification (key material) of the given key object in the requested format."
    },
    {
        "function": "engineTranslateKey",
        "parameters": [
            "SecretKey"
        ],
        "comments": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory."
    },
    {
        "function": "getParams",
        "parameters": [
            ""
        ],
        "comments": "Returns the key parameters."
    },
    {
        "function": "getX",
        "parameters": [
            ""
        ],
        "comments": "Returns the private value, x."
    },
    {
        "function": "getY",
        "parameters": [
            ""
        ],
        "comments": "Returns the public value, y."
    },
    {
        "function": "getIterationCount",
        "parameters": [
            ""
        ],
        "comments": "Returns the iteration count or 0 if not specified."
    },
    {
        "function": "getPassword",
        "parameters": [
            ""
        ],
        "comments": "Returns the password."
    },
    {
        "function": "getSalt",
        "parameters": [
            ""
        ],
        "comments": "Returns the salt or null if not specified."
    },
    {
        "function": "getCounter",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for ChaCha20 from the given nonce and counter."
    },
    {
        "function": "getNonce",
        "parameters": [
            ""
        ],
        "comments": "Returns the configured counter value."
    },
    {
        "function": "getKey",
        "parameters": [
            ""
        ],
        "comments": "Creates a DESedeKeySpec object using the first 24 bytes in key as the key material for the DES-EDE key."
    },
    {
        "function": "isParityAdjusted",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Creates a DESedeKeySpec object using the first 24 bytes in key, beginning at offset inclusive, as the key material for the DES-EDE key."
    },
    {
        "function": "getKey",
        "parameters": [
            ""
        ],
        "comments": "Creates a DESKeySpec object using the first 8 bytes in key as the key material for the DES key."
    },
    {
        "function": "isParityAdjusted",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Creates a DESKeySpec object using the first 8 bytes in key, beginning at offset inclusive, as the key material for the DES key."
    },
    {
        "function": "isWeak",
        "parameters": [
            "byte[]",
            "int"
        ],
        "comments": "Returns the DES key material."
    },
    {
        "function": "getExponentSize",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for the generation of Diffie-Hellman (system) parameters."
    },
    {
        "function": "getPrimeSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the size in bits of the random exponent (private value)."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for Diffie-Hellman, using a prime modulus p and a base generator g."
    },
    {
        "function": "getL",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for Diffie-Hellman, using a prime modulus p, a base generator g, and the size in bits, l, of the random exponent (private value)."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base generator g."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Constructor that takes a private value x, a prime modulus p, and a base generator g."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base generator g."
    },
    {
        "function": "getX",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime modulus p."
    },
    {
        "function": "getG",
        "parameters": [
            ""
        ],
        "comments": "Constructor that takes a public value y, a prime modulus p, and a base generator g."
    },
    {
        "function": "getP",
        "parameters": [
            ""
        ],
        "comments": "Returns the base generator g."
    },
    {
        "function": "getY",
        "parameters": [
            ""
        ],
        "comments": "Returns the prime modulus p."
    },
    {
        "function": "getIV",
        "parameters": [
            ""
        ],
        "comments": "Constructs a GCMParameterSpec using the specified authentication tag bit-length and IV buffer."
    },
    {
        "function": "getTLen",
        "parameters": [
            ""
        ],
        "comments": "Constructs a GCMParameterSpec object using the specified authentication tag bit-length and a subset of the specified buffer as the IV."
    },
    {
        "function": "getIV",
        "parameters": [
            ""
        ],
        "comments": "Creates an IvParameterSpec object using the bytes in iv as the IV."
    },
    {
        "function": "getDigestAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for OAEP padding as defined in the PKCS #1 standard using the specified message digest algorithm mdName, mask generation function algorithm mgfName, parameters for the mask generation function mgfSpec, and source of the encoding input P pSrc."
    },
    {
        "function": "getMGFAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns the message digest algorithm name."
    },
    {
        "function": "getMGFParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the mask generation function algorithm name."
    },
    {
        "function": "getPSource",
        "parameters": [
            ""
        ],
        "comments": "Returns the parameters for the mask generation function."
    },
    {
        "function": "clearPassword",
        "parameters": [
            ""
        ],
        "comments": "Constructor that takes a password."
    },
    {
        "function": "getIterationCount",
        "parameters": [
            ""
        ],
        "comments": "Constructor that takes a password, salt, iteration count for generating PBEKey of fixed-key-size PBE ciphers."
    },
    {
        "function": "getKeyLength",
        "parameters": [
            ""
        ],
        "comments": "Constructor that takes a password, salt, iteration count, and to-be-derived key length for generating PBEKey of variable-key-size PBE ciphers."
    },
    {
        "function": "getPassword",
        "parameters": [
            ""
        ],
        "comments": "Clears the internal copy of the password."
    },
    {
        "function": "getSalt",
        "parameters": [
            ""
        ],
        "comments": "Returns the iteration count or 0 if not specified."
    },
    {
        "function": "getIterationCount",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for password-based encryption as defined in the PKCS #5 standard."
    },
    {
        "function": "getParameterSpec",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for password-based encryption as defined in the PKCS #5 standard."
    },
    {
        "function": "getSalt",
        "parameters": [
            ""
        ],
        "comments": "Returns the iteration count."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a source of the encoding input P for OAEP padding as defined in the PKCS #1 standard using the specified PSource algorithm."
    },
    {
        "function": "getValue",
        "parameters": [
            ""
        ],
        "comments": "Constructs the source explicitly with the specified value p as the encoding input P."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a parameter set for RC2 from the given effective key size (in bits)."
    },
    {
        "function": "getEffectiveKeyBits",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for RC2 from the given effective key size (in bits) and an 8-byte IV."
    },
    {
        "function": "getIV",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for RC2 from the given effective key size (in bits) and IV."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a parameter set for RC5 from the given version, number of rounds and word size (in bits)."
    },
    {
        "function": "getIV",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for RC5 from the given version, number of rounds, word size (in bits), and IV."
    },
    {
        "function": "getRounds",
        "parameters": [
            ""
        ],
        "comments": "Constructs a parameter set for RC5 from the given version, number of rounds, word size (in bits), and IV."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this object."
    },
    {
        "function": "getWordSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the IV or null if this parameter set does not contain an IV."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of rounds."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Constructs a secret key from the given byte array, using the first len bytes of key, starting at offset inclusive."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Constructs a secret key from the given byte array."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Tests for equality between the specified object and this object."
    },
    {
        "function": "getFormat",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the algorithm associated with this secret key."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the key material of this secret key."
    },
    {
        "function": "createServerSocket",
        "parameters": [
            ""
        ],
        "comments": "Creates a server socket factory."
    },
    {
        "function": "createServerSocket",
        "parameters": [
            "int"
        ],
        "comments": "Returns an unbound server socket."
    },
    {
        "function": "createServerSocket",
        "parameters": [
            "int",
            "int"
        ],
        "comments": "Returns a server socket bound to the specified port."
    },
    {
        "function": "createServerSocket",
        "parameters": [
            "int",
            "int",
            "InetAddress"
        ],
        "comments": "Returns a server socket bound to the specified port, and uses the specified connection backlog."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns a server socket bound to the specified port, with a specified listen backlog and local IP."
    },
    {
        "function": "createSocket",
        "parameters": [
            ""
        ],
        "comments": "Creates a SocketFactory."
    },
    {
        "function": "createSocket",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Creates an unconnected socket."
    },
    {
        "function": "createSocket",
        "parameters": [
            "String",
            "int",
            "InetAddress",
            "int"
        ],
        "comments": "Creates a socket and connects it to the specified remote host at the specified remote port."
    },
    {
        "function": "createSocket",
        "parameters": [
            "InetAddress",
            "int"
        ],
        "comments": "Creates a socket and connects it to the specified remote host on the specified remote port."
    },
    {
        "function": "createSocket",
        "parameters": [
            "InetAddress",
            "int",
            "InetAddress",
            "int"
        ],
        "comments": "Creates a socket and connects it to the specified port number at the specified address."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Creates a socket and connect it to the specified remote address on the specified remote port."
    },
    {
        "function": "handshakeCompleted",
        "parameters": [
            "HandshakeCompletedEvent"
        ],
        "comments": "This method is invoked on registered objects when a SSL handshake is completed."
    },
    {
        "function": "verify",
        "parameters": [
            "String",
            "SSLSession"
        ],
        "comments": "Verify that the host name is an acceptable match with the server's authentication scheme."
    },
    {
        "function": "getApplicationBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Gets the current size of the largest application data that is expected when using this session."
    },
    {
        "function": "getCipherSuite",
        "parameters": [
            ""
        ],
        "comments": "Returns the name of the SSL cipher suite which is used for all connections in the session."
    },
    {
        "function": "getCreationTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the time at which this Session representation was created, in milliseconds since midnight, January 1, 1970 UTC."
    },
    {
        "function": "getId",
        "parameters": [
            ""
        ],
        "comments": "Returns the identifier assigned to this Session."
    },
    {
        "function": "getLastAccessedTime",
        "parameters": [
            ""
        ],
        "comments": "Returns the last time this Session representation was accessed by the session level infrastructure, in milliseconds since midnight, January 1, 1970 UTC."
    },
    {
        "function": "getLocalCertificates",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate(s) that were sent to the peer during handshaking."
    },
    {
        "function": "getLocalPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal that was sent to the peer during handshaking."
    },
    {
        "function": "getPacketBufferSize",
        "parameters": [
            ""
        ],
        "comments": "Gets the current size of the largest SSL/TLS/DTLS packet that is expected when using this session."
    },
    {
        "function": "getPeerCertificateChain",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The getPeerCertificates() method that returns an               array of java.security.cert.Certificate should               be used instead."
    },
    {
        "function": "getPeerCertificates",
        "parameters": [
            ""
        ],
        "comments": "Returns the identity of the peer which was established as part of defining the session."
    },
    {
        "function": "getPeerHost",
        "parameters": [
            ""
        ],
        "comments": "Returns the host name of the peer in this session."
    },
    {
        "function": "getPeerPort",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number of the peer in this session."
    },
    {
        "function": "getPeerPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the identity of the peer which was established as part of defining the session."
    },
    {
        "function": "getProtocol",
        "parameters": [
            ""
        ],
        "comments": "Returns the standard name of the protocol used for all connections in the session."
    },
    {
        "function": "getSessionContext",
        "parameters": [
            ""
        ],
        "comments": "Returns the context in which this session is bound."
    },
    {
        "function": "getValue",
        "parameters": [
            "String"
        ],
        "comments": "Returns the object bound to the given name in the session's application layer data."
    },
    {
        "function": "getValueNames",
        "parameters": [
            ""
        ],
        "comments": "Returns an array of the names of all the application layer data objects bound into the Session."
    },
    {
        "function": "invalidate",
        "parameters": [
            ""
        ],
        "comments": "Invalidates the session."
    },
    {
        "function": "isValid",
        "parameters": [
            ""
        ],
        "comments": "Returns whether this session is valid and available for resuming or joining."
    },
    {
        "function": "putValue",
        "parameters": [
            "String",
            "Object"
        ],
        "comments": "Binds the specified value object into the session's application layer data with the given name."
    },
    {
        "function": "removeValue",
        "parameters": [
            "String"
        ],
        "comments": "Removes the object bound to the given name in the session's application layer data."
    },
    {
        "function": "valueBound",
        "parameters": [
            "SSLSessionBindingEvent"
        ],
        "comments": "This is called to notify the listener that it is being bound into an SSLSession."
    },
    {
        "function": "valueUnbound",
        "parameters": [
            "SSLSessionBindingEvent"
        ],
        "comments": "This is called to notify the listener that it is being unbound from a SSLSession."
    },
    {
        "function": "getIds",
        "parameters": [
            ""
        ],
        "comments": "Returns an Enumeration of all session id's grouped under this SSLSessionContext."
    },
    {
        "function": "getSession",
        "parameters": [
            "byte[]"
        ],
        "comments": "Returns the SSLSession bound to the specified session id."
    },
    {
        "function": "getSessionCacheSize",
        "parameters": [
            ""
        ],
        "comments": "Returns the size of the cache used for storing SSLSession objects grouped under this SSLSessionContext."
    },
    {
        "function": "getSessionTimeout",
        "parameters": [
            ""
        ],
        "comments": "Returns the timeout limit of SSLSession objects grouped under this SSLSessionContext."
    },
    {
        "function": "setSessionCacheSize",
        "parameters": [
            "int"
        ],
        "comments": "Sets the size of the cache used for storing SSLSession objects grouped under this SSLSessionContext."
    },
    {
        "function": "setSessionTimeout",
        "parameters": [
            "int"
        ],
        "comments": "Sets the timeout limit for SSLSession objects grouped under this SSLSessionContext."
    },
    {
        "function": "chooseClientAlias",
        "parameters": [
            "String[]",
            "Principal[]",
            "Socket"
        ],
        "comments": "Choose an alias to authenticate the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any)."
    },
    {
        "function": "chooseServerAlias",
        "parameters": [
            "String",
            "Principal[]",
            "Socket"
        ],
        "comments": "Choose an alias to authenticate the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any)."
    },
    {
        "function": "getCertificateChain",
        "parameters": [
            "String"
        ],
        "comments": "Returns the certificate chain associated with the given alias."
    },
    {
        "function": "getClientAliases",
        "parameters": [
            "String",
            "Principal[]"
        ],
        "comments": "Get the matching aliases for authenticating the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any)."
    },
    {
        "function": "getPrivateKey",
        "parameters": [
            "String"
        ],
        "comments": "Returns the key associated with the given alias."
    },
    {
        "function": "getServerAliases",
        "parameters": [
            "String",
            "Principal[]"
        ],
        "comments": "Get the matching aliases for authenticating the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any)."
    },
    {
        "function": "checkClientTrusted",
        "parameters": [
            "X509Certificate[]",
            "String"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for client SSL authentication based on the authentication type."
    },
    {
        "function": "checkServerTrusted",
        "parameters": [
            "X509Certificate[]",
            "String"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build a certificate path to a trusted root and return if it can be validated and is trusted for server SSL authentication based on the authentication type."
    },
    {
        "function": "getAcceptedIssuers",
        "parameters": [
            ""
        ],
        "comments": "Return an array of certificate authority certificates which are trusted for authenticating peers."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Construct new CertPathTrustManagerParameters from the specified parameters."
    },
    {
        "function": "getLocalSupportedSignatureAlgorithms",
        "parameters": [
            ""
        ],
        "comments": "Obtains an array of supported signature algorithms that the local side is willing to use."
    },
    {
        "function": "getPeerSupportedSignatureAlgorithms",
        "parameters": [
            ""
        ],
        "comments": "Obtains an array of supported signature algorithms that the peer is able to use."
    },
    {
        "function": "getRequestedServerNames",
        "parameters": [
            ""
        ],
        "comments": "Obtains a List containing all SNIServerNames of the requested Server Name Indication (SNI) extension."
    },
    {
        "function": "getStatusResponses",
        "parameters": [
            ""
        ],
        "comments": "Returns a List containing DER-encoded OCSP responses (using the ASN.1 type OCSPResponse defined in RFC 6960) for the client to verify status of the server's certificate during handshaking."
    },
    {
        "function": "getCipherSuite",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new HandshakeCompletedEvent."
    },
    {
        "function": "getLocalCertificates",
        "parameters": [
            ""
        ],
        "comments": "Returns the cipher suite in use by the session which was produced by the handshake."
    },
    {
        "function": "getLocalPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate(s) that were sent to the peer during handshaking."
    },
    {
        "function": "getPeerCertificateChain",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal that was sent to the peer during handshaking."
    },
    {
        "function": "getPeerCertificates",
        "parameters": [
            ""
        ],
        "comments": "Deprecated.The getPeerCertificates() method that returns an               array of java.security.cert.Certificate should               be used instead."
    },
    {
        "function": "getPeerPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the identity of the peer which was established as part of defining the session."
    },
    {
        "function": "getSession",
        "parameters": [
            ""
        ],
        "comments": "Returns the identity of the peer which was established as part of defining the session."
    },
    {
        "function": "getSocket",
        "parameters": [
            ""
        ],
        "comments": "Returns the session that triggered this event."
    },
    {
        "function": "getCipherSuite",
        "parameters": [
            ""
        ],
        "comments": "Creates an HttpsURLConnection using the URL specified."
    },
    {
        "function": "getDefaultHostnameVerifier",
        "parameters": [
            ""
        ],
        "comments": "Returns the cipher suite in use on this connection."
    },
    {
        "function": "getDefaultSSLSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Gets the default HostnameVerifier that is inherited by new instances of this class."
    },
    {
        "function": "getHostnameVerifier",
        "parameters": [
            ""
        ],
        "comments": "Gets the default static SSLSocketFactory that is inherited by new instances of this class."
    },
    {
        "function": "getLocalCertificates",
        "parameters": [
            ""
        ],
        "comments": "Gets the HostnameVerifier in place on this instance."
    },
    {
        "function": "getLocalPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the certificate(s) that were sent to the server during handshaking."
    },
    {
        "function": "getPeerPrincipal",
        "parameters": [
            ""
        ],
        "comments": "Returns the principal that was sent to the server during handshaking."
    },
    {
        "function": "getServerCertificates",
        "parameters": [
            ""
        ],
        "comments": "Returns the server's principal which was established as part of defining the session."
    },
    {
        "function": "getSSLSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns the server's certificate chain which was established as part of defining the session."
    },
    {
        "function": "setDefaultHostnameVerifier",
        "parameters": [
            "HostnameVerifier"
        ],
        "comments": "Gets the SSL socket factory to be used when creating sockets for secure https URL connections."
    },
    {
        "function": "setDefaultSSLSocketFactory",
        "parameters": [
            "SSLSocketFactory"
        ],
        "comments": "Sets the default HostnameVerifier inherited by a new instance of this class."
    },
    {
        "function": "setHostnameVerifier",
        "parameters": [
            "HostnameVerifier"
        ],
        "comments": "Sets the default SSLSocketFactory inherited by new instances of this class."
    },
    {
        "function": "setSSLSocketFactory",
        "parameters": [
            "SSLSocketFactory"
        ],
        "comments": "Sets the HostnameVerifier for this instance."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a KeyManagerFactory object."
    },
    {
        "function": "getDefaultAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns the algorithm name of this KeyManagerFactory object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Obtains the default KeyManagerFactory algorithm name."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a KeyManagerFactory object that acts as a factory for key managers."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a KeyManagerFactory object that acts as a factory for key managers."
    },
    {
        "function": "getKeyManagers",
        "parameters": [
            ""
        ],
        "comments": "Returns a KeyManagerFactory object that acts as a factory for key managers."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns one key manager for each type of key material."
    },
    {
        "function": "init",
        "parameters": [
            "KeyStore",
            "char[]"
        ],
        "comments": "Returns the provider of this KeyManagerFactory object."
    },
    {
        "function": "init",
        "parameters": [
            "ManagerFactoryParameters"
        ],
        "comments": "Initializes this factory with a source of key material."
    },
    {
        "function": "engineGetKeyManagers",
        "parameters": [
            ""
        ],
        "comments": "Returns one key manager for each type of key material."
    },
    {
        "function": "engineInit",
        "parameters": [
            "KeyStore",
            "char[]"
        ],
        "comments": "Initializes this factory with a source of key material."
    },
    {
        "function": "engineInit",
        "parameters": [
            "ManagerFactoryParameters"
        ],
        "comments": "Initializes this factory with a source of key material."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Construct new KeyStoreBuilderParameters from the specified KeyStore.Builder."
    },
    {
        "function": "createSNIMatcher",
        "parameters": [
            "String"
        ],
        "comments": "Creates an SNIHostName using the specified encoded value."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an SNIHostName using the specified hostname."
    },
    {
        "function": "getAsciiName",
        "parameters": [
            ""
        ],
        "comments": "Creates an SNIMatcher object for SNIHostNames."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Compares this server name to the specified object."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the StandardCharsets.US_ASCII-compliant hostname of this SNIHostName object."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Creates an SNIMatcher using the specified server name type."
    },
    {
        "function": "matches",
        "parameters": [
            "SNIServerName"
        ],
        "comments": "Returns the server name type of this SNIMatcher object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an SNIServerName using the specified name type and encoded value."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Indicates whether some other object is \"equal to\" this server name."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the encoded server name value of this server name."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the name type of this server name."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a hash code value for this server name."
    },
    {
        "function": "createSSLEngine",
        "parameters": [
            ""
        ],
        "comments": "Creates an SSLContext object."
    },
    {
        "function": "createSSLEngine",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Creates a new SSLEngine using this context."
    },
    {
        "function": "getClientSessionContext",
        "parameters": [
            ""
        ],
        "comments": "Creates a new SSLEngine using this context using advisory peer information."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets."
    },
    {
        "function": "getDefaultSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the default SSL context."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Returns a copy of the SSLParameters indicating the default settings for this SSL context."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a SSLContext object that implements the specified secure socket protocol."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a SSLContext object that implements the specified secure socket protocol."
    },
    {
        "function": "getProtocol",
        "parameters": [
            ""
        ],
        "comments": "Returns a SSLContext object that implements the specified secure socket protocol."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns the protocol name of this SSLContext object."
    },
    {
        "function": "getServerSessionContext",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this SSLContext object."
    },
    {
        "function": "getServerSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns the server session context, which represents the set of SSL sessions available for use during the handshake phase of server-side SSL sockets."
    },
    {
        "function": "getSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns a ServerSocketFactory object for this context."
    },
    {
        "function": "getSupportedSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a SocketFactory object for this context."
    },
    {
        "function": "init",
        "parameters": [
            "KeyManager[]",
            "TrustManager[]",
            "SecureRandom"
        ],
        "comments": "Returns a copy of the SSLParameters indicating the supported settings for this SSL context."
    },
    {
        "function": "setDefault",
        "parameters": [
            "SSLContext"
        ],
        "comments": "Initializes this context."
    },
    {
        "function": "engineCreateSSLEngine",
        "parameters": [
            ""
        ],
        "comments": "Creates a new SSLEngine using this context."
    },
    {
        "function": "engineCreateSSLEngine",
        "parameters": [
            "String",
            "int"
        ],
        "comments": "Creates a SSLEngine using this context."
    },
    {
        "function": "engineGetClientSessionContext",
        "parameters": [
            ""
        ],
        "comments": "Returns a client SSLSessionContext object for this context."
    },
    {
        "function": "engineGetDefaultSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the SSLParameters indicating the default settings for this SSL context."
    },
    {
        "function": "engineGetServerSessionContext",
        "parameters": [
            ""
        ],
        "comments": "Returns a server SSLSessionContext object for this context."
    },
    {
        "function": "engineGetServerSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns a ServerSocketFactory object for this context."
    },
    {
        "function": "engineGetSocketFactory",
        "parameters": [
            ""
        ],
        "comments": "Returns a SocketFactory object for this context."
    },
    {
        "function": "engineGetSupportedSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the SSLParameters indicating the maximum supported settings for this SSL context."
    },
    {
        "function": "engineInit",
        "parameters": [
            "KeyManager[]",
            "TrustManager[]",
            "SecureRandom"
        ],
        "comments": "Initializes this context."
    },
    {
        "function": "beginHandshake",
        "parameters": [
            ""
        ],
        "comments": "Constructor for an SSLEngine providing no hints for an internal session reuse strategy."
    },
    {
        "function": "closeInbound",
        "parameters": [
            ""
        ],
        "comments": "Constructor for an SSLEngine."
    },
    {
        "function": "closeOutbound",
        "parameters": [
            ""
        ],
        "comments": "Initiates handshaking (initial or renegotiation) on this SSLEngine."
    },
    {
        "function": "getApplicationProtocol",
        "parameters": [
            ""
        ],
        "comments": "Signals that no more inbound network data will be sent to this SSLEngine."
    },
    {
        "function": "getDelegatedTask",
        "parameters": [
            ""
        ],
        "comments": "Signals that no more outbound application data will be sent on this SSLEngine."
    },
    {
        "function": "getEnabledCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the most recent application protocol value negotiated for this connection."
    },
    {
        "function": "getEnabledProtocols",
        "parameters": [
            ""
        ],
        "comments": "Returns a delegated Runnable task for this SSLEngine."
    },
    {
        "function": "getEnableSessionCreation",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the SSL cipher suites which are currently enabled for use on this engine."
    },
    {
        "function": "getHandshakeApplicationProtocol",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the protocol versions which are currently enabled for use with this SSLEngine."
    },
    {
        "function": "getHandshakeApplicationProtocolSelector",
        "parameters": [
            ""
        ],
        "comments": "Returns true if new SSL sessions may be established by this engine."
    },
    {
        "function": "getHandshakeSession",
        "parameters": [
            ""
        ],
        "comments": "Returns the application protocol value negotiated on a SSL/TLS handshake currently in progress."
    },
    {
        "function": "getHandshakeStatus",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the callback function that selects an application protocol value during a SSL/TLS/DTLS handshake."
    },
    {
        "function": "getNeedClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSLSession being constructed during a SSL/TLS/DTLS handshake."
    },
    {
        "function": "getPeerHost",
        "parameters": [
            ""
        ],
        "comments": "Returns the current handshake status for this SSLEngine."
    },
    {
        "function": "getPeerPort",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the engine will require client authentication."
    },
    {
        "function": "getSession",
        "parameters": [
            ""
        ],
        "comments": "Returns the host name of the peer."
    },
    {
        "function": "getSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the port number of the peer."
    },
    {
        "function": "getSupportedCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSLSession in use in this SSLEngine."
    },
    {
        "function": "getSupportedProtocols",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSLParameters in effect for this SSLEngine."
    },
    {
        "function": "getUseClientMode",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the cipher suites which could be enabled for use on this engine."
    },
    {
        "function": "getWantClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the protocols which could be enabled for use with this SSLEngine."
    },
    {
        "function": "isInboundDone",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the engine is set to use client mode when handshaking."
    },
    {
        "function": "isOutboundDone",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the engine will request client authentication."
    },
    {
        "function": "setEnabledCipherSuites",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns whether unwrap(ByteBuffer, ByteBuffer) will accept any more inbound data messages."
    },
    {
        "function": "setEnabledProtocols",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns whether wrap(ByteBuffer, ByteBuffer) will produce any more outbound data messages."
    },
    {
        "function": "setEnableSessionCreation",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the cipher suites enabled for use on this engine."
    },
    {
        "function": "setHandshakeApplicationProtocolSelector",
        "parameters": [
            "BiFunction<SSLEngine",
            "List<String>",
            "String>"
        ],
        "comments": "Set the protocol versions enabled for use on this engine."
    },
    {
        "function": "setNeedClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Controls whether new SSL sessions may be established by this engine."
    },
    {
        "function": "setSSLParameters",
        "parameters": [
            "SSLParameters"
        ],
        "comments": "Registers a callback function that selects an application protocol value for a SSL/TLS/DTLS handshake."
    },
    {
        "function": "setUseClientMode",
        "parameters": [
            "boolean"
        ],
        "comments": "Configures the engine to require client authentication."
    },
    {
        "function": "setWantClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Applies SSLParameters to this engine."
    },
    {
        "function": "unwrap",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Configures the engine to use client (or server) mode when handshaking."
    },
    {
        "function": "unwrap",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer[]"
        ],
        "comments": "Configures the engine to request client authentication."
    },
    {
        "function": "unwrap",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer[]",
            "int",
            "int"
        ],
        "comments": "Attempts to decode SSL/TLS/DTLS network data into a plaintext application data buffer."
    },
    {
        "function": "wrap",
        "parameters": [
            "ByteBuffer[]",
            "int",
            "int",
            "ByteBuffer"
        ],
        "comments": "Attempts to decode SSL/TLS/DTLS network data into a sequence of plaintext application data buffers."
    },
    {
        "function": "wrap",
        "parameters": [
            "ByteBuffer[]",
            "ByteBuffer"
        ],
        "comments": "Attempts to decode SSL/TLS/DTLS network data into a subsequence of plaintext application data buffers."
    },
    {
        "function": "wrap",
        "parameters": [
            "ByteBuffer",
            "ByteBuffer"
        ],
        "comments": "Attempts to encode plaintext bytes from a subsequence of data buffers into SSL/TLS/DTLS network data."
    },
    {
        "function": "bytesConsumed",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "bytesProduced",
        "parameters": [
            ""
        ],
        "comments": "Initializes a new instance of this class."
    },
    {
        "function": "getHandshakeStatus",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes consumed from the input buffer."
    },
    {
        "function": "getStatus",
        "parameters": [
            ""
        ],
        "comments": "Returns the number of bytes written to the output buffer."
    },
    {
        "function": "sequenceNumber",
        "parameters": [
            ""
        ],
        "comments": "Gets the handshake status of this SSLEngine operation."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Gets the return value of this SSLEngine operation."
    },
    {
        "function": "getAlgorithmConstraints",
        "parameters": [
            ""
        ],
        "comments": "Constructs SSLParameters."
    },
    {
        "function": "getApplicationProtocols",
        "parameters": [
            ""
        ],
        "comments": "Constructs SSLParameters from the specified array of ciphersuites."
    },
    {
        "function": "getCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Constructs SSLParameters from the specified array of ciphersuites and protocols."
    },
    {
        "function": "getEnableRetransmissions",
        "parameters": [
            ""
        ],
        "comments": "Returns the cryptographic algorithm constraints."
    },
    {
        "function": "getEndpointIdentificationAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns a prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols."
    },
    {
        "function": "getMaximumPacketSize",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the array of ciphersuites or null if none have been set."
    },
    {
        "function": "getNeedClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns whether DTLS handshake retransmissions should be enabled."
    },
    {
        "function": "getProtocols",
        "parameters": [
            ""
        ],
        "comments": "Gets the endpoint identification algorithm."
    },
    {
        "function": "getServerNames",
        "parameters": [
            ""
        ],
        "comments": "Returns the maximum expected network packet size in bytes for SSL/TLS/DTLS records."
    },
    {
        "function": "getSNIMatchers",
        "parameters": [
            ""
        ],
        "comments": "Returns whether client authentication should be required."
    },
    {
        "function": "getUseCipherSuitesOrder",
        "parameters": [
            ""
        ],
        "comments": "Returns a copy of the array of protocols or null if none have been set."
    },
    {
        "function": "getWantClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns a List containing all SNIServerNames of the Server Name Indication (SNI) parameter, or null if none has been set."
    },
    {
        "function": "setAlgorithmConstraints",
        "parameters": [
            "AlgorithmConstraints"
        ],
        "comments": "Returns a Collection containing all SNIMatchers of the Server Name Indication (SNI) parameter, or null if none has been set."
    },
    {
        "function": "setApplicationProtocols",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns whether the local cipher suites preference should be honored."
    },
    {
        "function": "setCipherSuites",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns whether client authentication should be requested."
    },
    {
        "function": "setEnableRetransmissions",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the cryptographic algorithm constraints, which will be used in addition to any configured by the runtime environment."
    },
    {
        "function": "setEndpointIdentificationAlgorithm",
        "parameters": [
            "String"
        ],
        "comments": "Sets the prioritized array of application-layer protocol names that can be negotiated over the SSL/TLS/DTLS protocols."
    },
    {
        "function": "setMaximumPacketSize",
        "parameters": [
            "int"
        ],
        "comments": "Sets the array of ciphersuites."
    },
    {
        "function": "setNeedClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets whether DTLS handshake retransmissions should be enabled."
    },
    {
        "function": "setProtocols",
        "parameters": [
            "String[]"
        ],
        "comments": "Sets the endpoint identification algorithm."
    },
    {
        "function": "setServerNames",
        "parameters": [
            "List<SNIServerName>"
        ],
        "comments": "Sets the maximum expected network packet size in bytes for SSL/TLS/DTLS records."
    },
    {
        "function": "setSNIMatchers",
        "parameters": [
            "Collection<SNIMatcher>"
        ],
        "comments": "Sets whether client authentication should be required."
    },
    {
        "function": "setUseCipherSuitesOrder",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the array of protocols."
    },
    {
        "function": "setWantClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the desired SNIServerNames of the Server Name Indication (SNI) parameter."
    },
    {
        "function": "getEnabledCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getEnabledProtocols",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getEnableSessionCreation",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getNeedClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of cipher suites which are currently enabled for use by newly accepted connections."
    },
    {
        "function": "getSupportedCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the protocols which are currently enabled for use by the newly accepted connections."
    },
    {
        "function": "getSupportedProtocols",
        "parameters": [
            ""
        ],
        "comments": "Returns true if new SSL sessions may be established by the sockets which are created from this server socket."
    },
    {
        "function": "getUseClientMode",
        "parameters": [
            ""
        ],
        "comments": "Returns true if client authentication will be required on newly accepted server-mode SSLSockets."
    },
    {
        "function": "getWantClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSLParameters in effect for newly accepted connections."
    },
    {
        "function": "setEnabledCipherSuites",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns the names of the cipher suites which could be enabled for use on an SSL connection."
    },
    {
        "function": "setEnabledProtocols",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns the names of the protocols which could be enabled for use."
    },
    {
        "function": "setEnableSessionCreation",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns true if accepted connections will be in SSL client mode."
    },
    {
        "function": "setNeedClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns true if client authentication will be requested on newly accepted server-mode connections."
    },
    {
        "function": "setSSLParameters",
        "parameters": [
            "SSLParameters"
        ],
        "comments": "Sets the cipher suites enabled for use by accepted connections."
    },
    {
        "function": "setUseClientMode",
        "parameters": [
            "boolean"
        ],
        "comments": "Controls which particular protocols are enabled for use by accepted connections."
    },
    {
        "function": "setWantClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Controls whether new SSL sessions may be established by the sockets which are created from this server socket."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Constructor is used only by subclasses."
    },
    {
        "function": "getDefaultCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the default SSL server socket factory."
    },
    {
        "function": "getSupportedCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of cipher suites which are enabled by default."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Constructs a new SSLSessionBindingEvent."
    },
    {
        "function": "getSession",
        "parameters": [
            ""
        ],
        "comments": "Returns the name to which the object is being bound, or the name from which the object is being unbound."
    },
    {
        "function": "addHandshakeCompletedListener",
        "parameters": [
            "HandshakeCompletedListener"
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getApplicationProtocol",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getEnabledCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getEnabledProtocols",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getEnableSessionCreation",
        "parameters": [
            ""
        ],
        "comments": "Used only by subclasses."
    },
    {
        "function": "getHandshakeApplicationProtocol",
        "parameters": [
            ""
        ],
        "comments": "Registers an event listener to receive notifications that an SSL handshake has completed on this connection."
    },
    {
        "function": "getHandshakeApplicationProtocolSelector",
        "parameters": [
            ""
        ],
        "comments": "Returns the most recent application protocol value negotiated for this connection."
    },
    {
        "function": "getHandshakeSession",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the SSL cipher suites which are currently enabled for use on this connection."
    },
    {
        "function": "getNeedClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns the names of the protocol versions which are currently enabled for use on this connection."
    },
    {
        "function": "getSession",
        "parameters": [
            ""
        ],
        "comments": "Returns true if new SSL sessions may be established by this socket."
    },
    {
        "function": "getSSLParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns the application protocol value negotiated on a SSL/TLS handshake currently in progress."
    },
    {
        "function": "getSupportedCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Retrieves the callback function that selects an application protocol value during a SSL/TLS/DTLS handshake."
    },
    {
        "function": "getSupportedProtocols",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSLSession being constructed during a SSL/TLS handshake."
    },
    {
        "function": "getUseClientMode",
        "parameters": [
            ""
        ],
        "comments": "Returns true if the socket will require client authentication."
    },
    {
        "function": "getWantClientAuth",
        "parameters": [
            ""
        ],
        "comments": "Returns the SSL Session in use by this connection."
    },
    {
        "function": "removeHandshakeCompletedListener",
        "parameters": [
            "HandshakeCompletedListener"
        ],
        "comments": "Returns the SSLParameters in effect for this SSLSocket."
    },
    {
        "function": "setEnabledCipherSuites",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns the names of the cipher suites which could be enabled for use on this connection."
    },
    {
        "function": "setEnabledProtocols",
        "parameters": [
            "String[]"
        ],
        "comments": "Returns the names of the protocols which could be enabled for use on an SSL connection."
    },
    {
        "function": "setEnableSessionCreation",
        "parameters": [
            "boolean"
        ],
        "comments": "Returns true if the socket is set to use client mode when handshaking."
    },
    {
        "function": "setHandshakeApplicationProtocolSelector",
        "parameters": [
            "BiFunction<SSLSocket",
            "List<String>",
            "String>"
        ],
        "comments": "Returns true if the socket will request client authentication."
    },
    {
        "function": "setNeedClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Removes a previously registered handshake completion listener."
    },
    {
        "function": "setSSLParameters",
        "parameters": [
            "SSLParameters"
        ],
        "comments": "Sets the cipher suites enabled for use on this connection."
    },
    {
        "function": "setUseClientMode",
        "parameters": [
            "boolean"
        ],
        "comments": "Sets the protocol versions enabled for use on this connection."
    },
    {
        "function": "setWantClientAuth",
        "parameters": [
            "boolean"
        ],
        "comments": "Controls whether new SSL sessions may be established by this socket."
    },
    {
        "function": "startHandshake",
        "parameters": [
            ""
        ],
        "comments": "Registers a callback function that selects an application protocol value for a SSL/TLS/DTLS handshake."
    },
    {
        "function": "createSocket",
        "parameters": [
            "Socket",
            "InputStream",
            "boolean"
        ],
        "comments": "Constructor is used only by subclasses."
    },
    {
        "function": "createSocket",
        "parameters": [
            "Socket",
            "String",
            "int",
            "boolean"
        ],
        "comments": "Creates a server mode Socket layered over an existing connected socket, and is able to read data which has already been consumed/removed from the Socket's underlying InputStream."
    },
    {
        "function": "getDefault",
        "parameters": [
            ""
        ],
        "comments": "Returns a socket layered over an existing socket connected to the named host, at the given port."
    },
    {
        "function": "getDefaultCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the default SSL socket factory."
    },
    {
        "function": "getSupportedCipherSuites",
        "parameters": [
            ""
        ],
        "comments": "Returns the list of cipher suites which are enabled by default."
    },
    {
        "function": "getAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Creates a TrustManagerFactory object."
    },
    {
        "function": "getDefaultAlgorithm",
        "parameters": [
            ""
        ],
        "comments": "Returns the algorithm name of this TrustManagerFactory object."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String"
        ],
        "comments": "Obtains the default TrustManagerFactory algorithm name."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "String"
        ],
        "comments": "Returns a TrustManagerFactory object that acts as a factory for trust managers."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Provider"
        ],
        "comments": "Returns a TrustManagerFactory object that acts as a factory for trust managers."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Returns a TrustManagerFactory object that acts as a factory for trust managers."
    },
    {
        "function": "getTrustManagers",
        "parameters": [
            ""
        ],
        "comments": "Returns the provider of this TrustManagerFactory object."
    },
    {
        "function": "init",
        "parameters": [
            "KeyStore"
        ],
        "comments": "Returns one trust manager for each type of trust material."
    },
    {
        "function": "init",
        "parameters": [
            "ManagerFactoryParameters"
        ],
        "comments": "Initializes this factory with a source of certificate authorities and related trust material."
    },
    {
        "function": "engineGetTrustManagers",
        "parameters": [
            ""
        ],
        "comments": "Returns one trust manager for each type of trust material."
    },
    {
        "function": "engineInit",
        "parameters": [
            "KeyStore"
        ],
        "comments": "Initializes this factory with a source of certificate authorities and related trust material."
    },
    {
        "function": "engineInit",
        "parameters": [
            "ManagerFactoryParameters"
        ],
        "comments": "Initializes this factory with a source of provider-specific key material."
    },
    {
        "function": "chooseEngineClientAlias",
        "parameters": [
            "String[]",
            "Principal[]",
            "SSLEngine"
        ],
        "comments": "Constructor used by subclasses only."
    },
    {
        "function": "chooseEngineServerAlias",
        "parameters": [
            "String",
            "Principal[]",
            "SSLEngine"
        ],
        "comments": "Choose an alias to authenticate the client side of an SSLEngine connection given the public key type and the list of certificate issuer authorities recognized by the peer (if any)."
    },
    {
        "function": "checkClientTrusted",
        "parameters": [
            "X509Certificate[]",
            "String",
            "Socket"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
    },
    {
        "function": "checkClientTrusted",
        "parameters": [
            "X509Certificate[]",
            "String",
            "SSLEngine"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
    },
    {
        "function": "checkServerTrusted",
        "parameters": [
            "X509Certificate[]",
            "String",
            "Socket"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
    },
    {
        "function": "checkServerTrusted",
        "parameters": [
            "X509Certificate[]",
            "String",
            "SSLEngine"
        ],
        "comments": "Given the partial or complete certificate chain provided by the peer, build and validate the certificate path based on the authentication type and ssl parameters."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The SSLEngine has just finished handshaking."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The SSLEngine needs the results of one (or more) delegated tasks before handshaking can continue."
    },
    {
        "function": "valueOf",
        "parameters": [
            "String"
        ],
        "comments": "The SSLEngine was not able to process the operation because there are not enough bytes available in the destination buffer to hold the result."
    },
    {
        "function": "values",
        "parameters": [
            ""
        ],
        "comments": "The SSLEngine was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Destroy this Object."
    },
    {
        "function": "isDestroyed",
        "parameters": [
            ""
        ],
        "comments": "Determine if this Object has been destroyed."
    },
    {
        "function": "isCurrent",
        "parameters": [
            ""
        ],
        "comments": "Determine if this Object is current."
    },
    {
        "function": "refresh",
        "parameters": [
            ""
        ],
        "comments": "Update or extend the validity period for this Object."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates a new PrivateCredentialPermission with the specified name."
    },
    {
        "function": "getActions",
        "parameters": [
            ""
        ],
        "comments": "Checks two PrivateCredentialPermission objects for equality."
    },
    {
        "function": "getCredentialClass",
        "parameters": [
            ""
        ],
        "comments": "Returns the \"canonical string representation\" of the actions."
    },
    {
        "function": "getPrincipals",
        "parameters": [
            ""
        ],
        "comments": "Returns the Class name of the Credential associated with this PrivateCredentialPermission."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the Principal classes and names associated with this PrivateCredentialPermission."
    },
    {
        "function": "implies",
        "parameters": [
            "Permission"
        ],
        "comments": "Returns the hash code value for this object."
    },
    {
        "function": "newPermissionCollection",
        "parameters": [
            ""
        ],
        "comments": "Checks if this PrivateCredentialPermission implies the specified Permission."
    },
    {
        "function": "doAs",
        "parameters": [
            "Subject",
            "PrivilegedAction<T>"
        ],
        "comments": "Create an instance of a Subject with an empty Set of Principals and empty Sets of public and private credentials."
    },
    {
        "function": "doAs",
        "parameters": [
            "Subject",
            "PrivilegedExceptionAction<T>"
        ],
        "comments": "Create an instance of a Subject with Principals and credentials."
    },
    {
        "function": "doAsPrivileged",
        "parameters": [
            "Subject",
            "PrivilegedAction<T>",
            "AccessControlContext"
        ],
        "comments": "Perform work as a particular Subject."
    },
    {
        "function": "doAsPrivileged",
        "parameters": [
            "Subject",
            "PrivilegedExceptionAction<T>",
            "AccessControlContext"
        ],
        "comments": "Perform work as a particular Subject."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Perform privileged work as a particular Subject."
    },
    {
        "function": "getPrincipals",
        "parameters": [
            ""
        ],
        "comments": "Perform privileged work as a particular Subject."
    },
    {
        "function": "getPrincipals",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Compares the specified Object with this Subject for equality."
    },
    {
        "function": "getPrivateCredentials",
        "parameters": [
            ""
        ],
        "comments": "Return the Set of Principals associated with this Subject."
    },
    {
        "function": "getPrivateCredentials",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class."
    },
    {
        "function": "getPublicCredentials",
        "parameters": [
            ""
        ],
        "comments": "Return the Set of private credentials held by this Subject."
    },
    {
        "function": "getPublicCredentials",
        "parameters": [
            "Class<T>"
        ],
        "comments": "Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class."
    },
    {
        "function": "getSubject",
        "parameters": [
            "AccessControlContext"
        ],
        "comments": "Return the Set of public credentials held by this Subject."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class."
    },
    {
        "function": "isReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Get the Subject associated with the provided AccessControlContext."
    },
    {
        "function": "setReadOnly",
        "parameters": [
            ""
        ],
        "comments": "Returns a hashcode for this Subject."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Query whether this Subject is read-only."
    },
    {
        "function": "combine",
        "parameters": [
            "ProtectionDomain[]",
            "ProtectionDomain[]"
        ],
        "comments": "Associate the provided Subject with this SubjectDomainCombiner."
    },
    {
        "function": "getSubject",
        "parameters": [
            ""
        ],
        "comments": "Update the relevant ProtectionDomains with the Principals from the Subject associated with this SubjectDomainCombiner."
    },
    {
        "function": "handle",
        "parameters": [
            "Callback[]"
        ],
        "comments": " Retrieve or display the information requested in the provided Callbacks."
    },
    {
        "function": "allowMultipleSelections",
        "parameters": [
            ""
        ],
        "comments": "Construct a ChoiceCallback with a prompt, a list of choices, a default choice, and a boolean specifying whether or not multiple selections from the list of choices are allowed."
    },
    {
        "function": "getChoices",
        "parameters": [
            ""
        ],
        "comments": "Get the boolean determining whether multiple selections from the choices list are allowed."
    },
    {
        "function": "getDefaultChoice",
        "parameters": [
            ""
        ],
        "comments": "Get the list of choices."
    },
    {
        "function": "getPrompt",
        "parameters": [
            ""
        ],
        "comments": "Get the defaultChoice."
    },
    {
        "function": "getSelectedIndexes",
        "parameters": [
            ""
        ],
        "comments": "Get the prompt."
    },
    {
        "function": "setSelectedIndex",
        "parameters": [
            "int"
        ],
        "comments": "Get the selected choices."
    },
    {
        "function": "setSelectedIndexes",
        "parameters": [
            "int[]"
        ],
        "comments": "Set the selected choice."
    },
    {
        "function": "getDefaultOption",
        "parameters": [
            ""
        ],
        "comments": "Construct a ConfirmationCallback with a message type, an option type and a default option."
    },
    {
        "function": "getMessageType",
        "parameters": [
            ""
        ],
        "comments": "Construct a ConfirmationCallback with a message type, a list of options and a default option."
    },
    {
        "function": "getOptions",
        "parameters": [
            ""
        ],
        "comments": "Construct a ConfirmationCallback with a prompt, message type, an option type and a default option."
    },
    {
        "function": "getOptionType",
        "parameters": [
            ""
        ],
        "comments": "Construct a ConfirmationCallback with a prompt, message type, a list of options and a default option."
    },
    {
        "function": "getPrompt",
        "parameters": [
            ""
        ],
        "comments": "Get the default option."
    },
    {
        "function": "getSelectedIndex",
        "parameters": [
            ""
        ],
        "comments": "Get the message type."
    },
    {
        "function": "setSelectedIndex",
        "parameters": [
            "int"
        ],
        "comments": "Get the confirmation options."
    },
    {
        "function": "getLocale",
        "parameters": [
            ""
        ],
        "comments": "Construct a LanguageCallback."
    },
    {
        "function": "setLocale",
        "parameters": [
            "Locale"
        ],
        "comments": "Get the retrieved Locale."
    },
    {
        "function": "getDefaultName",
        "parameters": [
            ""
        ],
        "comments": "Construct a NameCallback with a prompt."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Construct a NameCallback with a prompt and default name."
    },
    {
        "function": "getPrompt",
        "parameters": [
            ""
        ],
        "comments": "Get the default name."
    },
    {
        "function": "setName",
        "parameters": [
            "String"
        ],
        "comments": "Get the retrieved name."
    },
    {
        "function": "clearPassword",
        "parameters": [
            ""
        ],
        "comments": "Construct a PasswordCallback with a prompt and a boolean specifying whether the password should be displayed as it is being typed."
    },
    {
        "function": "getPassword",
        "parameters": [
            ""
        ],
        "comments": "Clear the retrieved password."
    },
    {
        "function": "getPrompt",
        "parameters": [
            ""
        ],
        "comments": "Get the retrieved password."
    },
    {
        "function": "isEchoOn",
        "parameters": [
            ""
        ],
        "comments": "Get the prompt."
    },
    {
        "function": "setPassword",
        "parameters": [
            "char[]"
        ],
        "comments": "Return whether the password should be displayed as it is being typed."
    },
    {
        "function": "getDefaultText",
        "parameters": [
            ""
        ],
        "comments": "Construct a TextInputCallback with a prompt."
    },
    {
        "function": "getPrompt",
        "parameters": [
            ""
        ],
        "comments": "Construct a TextInputCallback with a prompt and default input value."
    },
    {
        "function": "getText",
        "parameters": [
            ""
        ],
        "comments": "Get the default text."
    },
    {
        "function": "setText",
        "parameters": [
            "String"
        ],
        "comments": "Get the prompt."
    },
    {
        "function": "getMessage",
        "parameters": [
            ""
        ],
        "comments": "Construct a TextOutputCallback with a message type and message to be displayed."
    },
    {
        "function": "getMessageType",
        "parameters": [
            ""
        ],
        "comments": "Get the message to be displayed."
    },
    {
        "function": "getControlFlag",
        "parameters": [
            ""
        ],
        "comments": "Default constructor for this class."
    },
    {
        "function": "getLoginModuleName",
        "parameters": [
            ""
        ],
        "comments": "Return the controlFlag (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL) for this LoginModule."
    },
    {
        "function": "getOptions",
        "parameters": [
            ""
        ],
        "comments": "Get the class name of the configured LoginModule."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Return a String representation of this controlFlag."
    },
    {
        "function": "getAppConfigurationEntry",
        "parameters": [
            "String"
        ],
        "comments": "Sole constructor."
    },
    {
        "function": "getConfiguration",
        "parameters": [
            ""
        ],
        "comments": "Retrieve the AppConfigurationEntries for the specified name from this Configuration."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Configuration.Parameters"
        ],
        "comments": "Get the installed login Configuration."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Configuration.Parameters",
            "String"
        ],
        "comments": "Returns a Configuration object of the specified type."
    },
    {
        "function": "getInstance",
        "parameters": [
            "String",
            "Configuration.Parameters",
            "Provider"
        ],
        "comments": "Returns a Configuration object of the specified type."
    },
    {
        "function": "getParameters",
        "parameters": [
            ""
        ],
        "comments": "Returns a Configuration object of the specified type."
    },
    {
        "function": "getProvider",
        "parameters": [
            ""
        ],
        "comments": "Return Configuration parameters."
    },
    {
        "function": "getType",
        "parameters": [
            ""
        ],
        "comments": "Return the Provider of this Configuration."
    },
    {
        "function": "refresh",
        "parameters": [
            ""
        ],
        "comments": "Return the type of this Configuration."
    },
    {
        "function": "setConfiguration",
        "parameters": [
            "Configuration"
        ],
        "comments": "Refresh and reload the Configuration."
    },
    {
        "function": "engineGetAppConfigurationEntry",
        "parameters": [
            "String"
        ],
        "comments": "Retrieve the AppConfigurationEntries for the specified name."
    },
    {
        "function": "engineRefresh",
        "parameters": [
            ""
        ],
        "comments": "Refresh and reload the Configuration."
    },
    {
        "function": "getSubject",
        "parameters": [
            ""
        ],
        "comments": "Instantiate a new LoginContext object with a name."
    },
    {
        "function": "login",
        "parameters": [
            ""
        ],
        "comments": "Instantiate a new LoginContext object with a name and a CallbackHandler object."
    },
    {
        "function": "logout",
        "parameters": [
            ""
        ],
        "comments": "Instantiate a new LoginContext object with a name and a Subject object."
    },
    {
        "function": "abort",
        "parameters": [
            ""
        ],
        "comments": "Method to abort the authentication process (phase 2)."
    },
    {
        "function": "commit",
        "parameters": [
            ""
        ],
        "comments": "Method to commit the authentication process (phase 2)."
    },
    {
        "function": "initialize",
        "parameters": [
            "Subject",
            "CallbackHandler",
            "Map<String",
            "?>",
            "Map<String",
            "?>"
        ],
        "comments": "Initialize this LoginModule."
    },
    {
        "function": "login",
        "parameters": [
            ""
        ],
        "comments": "Method to authenticate a Subject (phase 1)."
    },
    {
        "function": "logout",
        "parameters": [
            ""
        ],
        "comments": "Method which logs out a Subject."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Creates an X500Principal from a distinguished name in ASN.1 DER encoded form."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Creates an X500Principal from an InputStream containing the distinguished name in ASN.1 DER encoded form."
    },
    {
        "function": "getName",
        "parameters": [
            ""
        ],
        "comments": "Creates an X500Principal from a string representation of an X.500 distinguished name (ex: \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\")."
    },
    {
        "function": "getName",
        "parameters": [
            "String"
        ],
        "comments": "Creates an X500Principal from a string representation of an X.500 distinguished name (ex: \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\")."
    },
    {
        "function": "getName",
        "parameters": [
            "String",
            "Map<String",
            "String>"
        ],
        "comments": "Compares the specified Object with this X500Principal for equality."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Returns the distinguished name in ASN.1 DER encoded form."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns a string representation of the X.500 distinguished name using the format defined in RFC 2253."
    },
    {
        "function": "destroy",
        "parameters": [
            ""
        ],
        "comments": "Creates an X500PrivateCredential that associates an X.509 certificate, a private key and the KeyStore alias."
    },
    {
        "function": "getAlias",
        "parameters": [
            ""
        ],
        "comments": "Creates an X500PrivateCredential that associates an X.509 certificate, a private key and the KeyStore alias."
    },
    {
        "function": "getCertificate",
        "parameters": [
            ""
        ],
        "comments": "Clears the references to the X.509 certificate, private key and the KeyStore alias in this object."
    },
    {
        "function": "getPrivateKey",
        "parameters": [
            ""
        ],
        "comments": "Returns the KeyStore alias."
    },
    {
        "function": "isDestroyed",
        "parameters": [
            ""
        ],
        "comments": "Returns the X.509 certificate."
    },
    {
        "function": "equals",
        "parameters": [
            "Object"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getEncoded",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getPublicKey",
        "parameters": [
            ""
        ],
        "comments": "Compares this certificate for equality with the specified object."
    },
    {
        "function": "hashCode",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "toString",
        "parameters": [
            ""
        ],
        "comments": "Returns the encoded form of this certificate."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "verify",
        "parameters": [
            "PublicKey",
            "String"
        ],
        "comments": "Gets the public key from this certificate."
    },
    {
        "function": "checkValidity",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "checkValidity",
        "parameters": [
            "Date"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getInstance",
        "parameters": [
            "byte[]"
        ],
        "comments": "Checks that the certificate is currently valid."
    },
    {
        "function": "getInstance",
        "parameters": [
            "InputStream"
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getIssuerDN",
        "parameters": [
            ""
        ],
        "comments": "Checks that the specified date is within the certificate's validity period."
    },
    {
        "function": "getNotAfter",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getNotBefore",
        "parameters": [
            ""
        ],
        "comments": "Instantiates an X509Certificate object, and initializes it with the specified byte array."
    },
    {
        "function": "getSerialNumber",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getSigAlgName",
        "parameters": [
            ""
        ],
        "comments": "Instantiates an X509Certificate object, and initializes it with the data read from the input stream inStream."
    },
    {
        "function": "getSigAlgOID",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getSigAlgParams",
        "parameters": [
            ""
        ],
        "comments": "Gets the issuer (issuer distinguished name) value from the certificate."
    },
    {
        "function": "getSubjectDN",
        "parameters": [
            ""
        ],
        "comments": "Deprecated."
    },
    {
        "function": "getVersion",
        "parameters": [
            ""
        ],
        "comments": "Gets the notAfter date from the validity period of the certificate."
    }
]