{
    "API": [
        {
            "Comments": "Returns this element's annotation for the specified type if such an annotation is present, else null.",
            "Function": "getAnnotation(Class<A> annotationClass)",
            "Modifier and Type": "<A extends Annotation>A"
        },
        {
            "Comments": "Returns annotations that are present on this element.",
            "Function": "getAnnotations()",
            "Modifier and Type": "Annotation[]"
        },
        {
            "Comments": "Returns annotations that are associated with this element.",
            "Function": "getAnnotationsByType(Class<A> annotationClass)",
            "Modifier and Type": "<A extends Annotation>A[]"
        },
        {
            "Comments": "Returns this element's annotation for the specified type if such an annotation is directly present, else null.",
            "Function": "getDeclaredAnnotation(Class<A> annotationClass)",
            "Modifier and Type": "<A extends Annotation>A"
        },
        {
            "Comments": "Returns annotations that are directly present on this element.",
            "Function": "getDeclaredAnnotations()",
            "Modifier and Type": "Annotation[]"
        },
        {
            "Comments": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present.",
            "Function": "getDeclaredAnnotationsByType(Class<A> annotationClass)",
            "Modifier and Type": "<A extends Annotation>A[]"
        },
        {
            "Comments": "Return the title of this package.",
            "Function": "getImplementationTitle()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns the name of the organization, vendor or company that provided this implementation.",
            "Function": "getImplementationVendor()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Return the version of this implementation.",
            "Function": "getImplementationVersion()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Return the name of this package.",
            "Function": "getName()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Find a package by name in the callers ClassLoader instance.",
            "Function": "getPackage(String name)",
            "Modifier and Type": "static Package"
        },
        {
            "Comments": "Get all the packages currently known for the caller's ClassLoader instance.",
            "Function": "getPackages()",
            "Modifier and Type": "static Package[]"
        },
        {
            "Comments": "Return the title of the specification that this package implements.",
            "Function": "getSpecificationTitle()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.",
            "Function": "getSpecificationVendor()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns the version number of the specification that this package implements.",
            "Function": "getSpecificationVersion()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Return the hash code computed from the package name.",
            "Function": "hashCode()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns true if an annotation for the specified type is present on this element, else false.",
            "Function": "isAnnotationPresent(Class<? extends Annotation> annotationClass)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Compare this package's specification version with a desired version.",
            "Function": "isCompatibleWith(String desired)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if this package is sealed.",
            "Function": "isSealed()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if this package is sealed with respect to the specified code source url.",
            "Function": "isSealed(URL url)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the string representation of this Package.",
            "Function": "toString()",
            "Modifier and Type": "String"
        }
    ]
}