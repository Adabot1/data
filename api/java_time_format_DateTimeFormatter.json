{
    "API": [
        {
            "Comments": "The ISO date formatter that formats or parses a date without an offset, such as '20111203'.",
            "Function": "BASIC_ISO_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date formatter that formats or parses a date with the offset if available, such as '2011-12-03' or '2011-12-03+01:00'.",
            "Function": "ISO_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO-like date-time formatter that formats or parses a date-time with the offset and zone if available, such as '2011-12-03T10:15:30', '2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.",
            "Function": "ISO_DATE_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO instant formatter that formats or parses an instant in UTC, such as '2011-12-03T10:15:30Z'.",
            "Function": "ISO_INSTANT",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date formatter that formats or parses a date without an offset, such as '2011-12-03'.",
            "Function": "ISO_LOCAL_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date-time formatter that formats or parses a date-time without an offset, such as '2011-12-03T10:15:30'.",
            "Function": "ISO_LOCAL_DATE_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO time formatter that formats or parses a time without an offset, such as '10:15' or '10:15:30'.",
            "Function": "ISO_LOCAL_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date formatter that formats or parses a date with an offset, such as '2011-12-03+01:00'.",
            "Function": "ISO_OFFSET_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date-time formatter that formats or parses a date-time with an offset, such as '2011-12-03T10:15:30+01:00'.",
            "Function": "ISO_OFFSET_DATE_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO time formatter that formats or parses a time with an offset, such as '10:15+01:00' or '10:15:30+01:00'.",
            "Function": "ISO_OFFSET_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date formatter that formats or parses the ordinal date without an offset, such as '2012-337'.",
            "Function": "ISO_ORDINAL_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO time formatter that formats or parses a time, with the offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.",
            "Function": "ISO_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO date formatter that formats or parses the week-based date without an offset, such as '2012-W48-6'.",
            "Function": "ISO_WEEK_DATE",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The ISO-like date-time formatter that formats or parses a date-time with offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.",
            "Function": "ISO_ZONED_DATE_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "The RFC-1123 date-time formatter, such as 'Tue, 3 Jun 2008 11:05:30 GMT'.",
            "Function": "RFC_1123_DATE_TIME",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Formats a date-time object using this formatter.",
            "Function": "format(TemporalAccessor temporal)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Formats a date-time object to an Appendable using this formatter.",
            "Function": "formatTo(TemporalAccessor temporal,Appendable appendable)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Gets the overriding chronology to be used during formatting.",
            "Function": "getChronology()",
            "Modifier and Type": "Chronology"
        },
        {
            "Comments": "Gets the DecimalStyle to be used during formatting.",
            "Function": "getDecimalStyle()",
            "Modifier and Type": "DecimalStyle"
        },
        {
            "Comments": "Gets the locale to be used during formatting.",
            "Function": "getLocale()",
            "Modifier and Type": "Locale"
        },
        {
            "Comments": "Gets the resolver fields to use during parsing.",
            "Function": "getResolverFields()",
            "Modifier and Type": "Set<TemporalField>"
        },
        {
            "Comments": "Gets the resolver style to use during parsing.",
            "Function": "getResolverStyle()",
            "Modifier and Type": "ResolverStyle"
        },
        {
            "Comments": "Gets the overriding zone to be used during formatting.",
            "Function": "getZone()",
            "Modifier and Type": "ZoneId"
        },
        {
            "Comments": "Returns a copy of this formatter with localized values of the locale, calendar, region, decimal style and/or timezone, that supercede values in this formatter.",
            "Function": "localizedBy(Locale locale)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a locale specific date format for the ISO chronology.",
            "Function": "ofLocalizedDate(FormatStyle dateStyle)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Returns a locale specific date-time formatter for the ISO chronology.",
            "Function": "ofLocalizedDateTime(FormatStyle dateTimeStyle)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Returns a locale specific date and time format for the ISO chronology.",
            "Function": "ofLocalizedDateTime(FormatStyle dateStyle, FormatStyle timeStyle)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Returns a locale specific time format for the ISO chronology.",
            "Function": "ofLocalizedTime(FormatStyle timeStyle)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Creates a formatter using the specified pattern.",
            "Function": "ofPattern(String pattern)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Creates a formatter using the specified pattern and locale.",
            "Function": "ofPattern(String pattern, Locale locale)",
            "Modifier and Type": "static DateTimeFormatter"
        },
        {
            "Comments": "Fully parses the text producing a temporal object.",
            "Function": "parse(CharSequence text)",
            "Modifier and Type": "TemporalAccessor"
        },
        {
            "Comments": "Parses the text using this formatter, providing control over the text position.",
            "Function": "parse(CharSequence text, ParsePosition position)",
            "Modifier and Type": "TemporalAccessor"
        },
        {
            "Comments": "Fully parses the text producing an object of the specified type.",
            "Function": "parse(CharSequence text, TemporalQuery<T> query)",
            "Modifier and Type": "<T> T"
        },
        {
            "Comments": "Fully parses the text producing an object of one of the specified types.",
            "Function": "parseBest(CharSequence text, TemporalQuery<?>... queries)",
            "Modifier and Type": "TemporalAccessor"
        },
        {
            "Comments": "A query that provides access to the excess days that were parsed.",
            "Function": "parsedExcessDays()",
            "Modifier and Type": "static TemporalQuery<Period>"
        },
        {
            "Comments": "A query that provides access to whether a leap-second was parsed.",
            "Function": "parsedLeapSecond()",
            "Modifier and Type": "static TemporalQuery<Boolean>"
        },
        {
            "Comments": "Parses the text using this formatter, without resolving the result, intended for advanced use cases.",
            "Function": "parseUnresolved(CharSequence text, ParsePosition position)",
            "Modifier and Type": "TemporalAccessor"
        },
        {
            "Comments": "Returns this formatter as a java.text.Format instance.",
            "Function": "toFormat()",
            "Modifier and Type": "Format"
        },
        {
            "Comments": "Returns this formatter as a java.text.Format instance that will parse using the specified query.",
            "Function": "toFormat(TemporalQuery<?> parseQuery)",
            "Modifier and Type": "Format"
        },
        {
            "Comments": "Returns a description of the underlying formatters.",
            "Function": "toString()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns a copy of this formatter with a new override chronology.",
            "Function": "withChronology(Chronology chrono)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new DecimalStyle.",
            "Function": "withDecimalStyle(DecimalStyle decimalStyle)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new locale.",
            "Function": "withLocale(Locale locale)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new set of resolver fields.",
            "Function": "withResolverFields(TemporalField... resolverFields)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new set of resolver fields.",
            "Function": "withResolverFields(Set<TemporalField> resolverFields)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new resolver style.",
            "Function": "withResolverStyle(ResolverStyle resolverStyle)",
            "Modifier and Type": "DateTimeFormatter"
        },
        {
            "Comments": "Returns a copy of this formatter with a new override zone.",
            "Function": "withZone(ZoneId zone)",
            "Modifier and Type": "DateTimeFormatter"
        }
    ]
}