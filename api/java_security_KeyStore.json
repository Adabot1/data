{
    "API": [
        {
            "Comments": "A description of a to-be-instantiated KeyStore object.",
            "Function": "KeyStore.Builder",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "A ProtectionParameter encapsulating a CallbackHandler.",
            "Function": "KeyStore.CallbackHandlerProtection",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "A marker interface for KeyStore entry types.",
            "Function": "KeyStore.Entry",
            "Modifier and Type": "static interface "
        },
        {
            "Comments": "A marker interface for KeyStoreload and store parameters.",
            "Function": "KeyStore.LoadStoreParameter",
            "Modifier and Type": "static interface "
        },
        {
            "Comments": "A password-based implementation of ProtectionParameter.",
            "Function": "KeyStore.PasswordProtection",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "A KeyStore entry that holds a PrivateKey and corresponding certificate chain.",
            "Function": "KeyStore.PrivateKeyEntry",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "A marker interface for keystore protection parameters.",
            "Function": "KeyStore.ProtectionParameter",
            "Modifier and Type": "static interface "
        },
        {
            "Comments": "A KeyStore entry that holds a SecretKey.",
            "Function": "KeyStore.SecretKeyEntry",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "A KeyStore entry that holds a trusted Certificate.",
            "Function": "KeyStore.TrustedCertificateEntry",
            "Modifier and Type": "static class "
        },
        {
            "Comments": "Creates a KeyStore object of the given type, and encapsulates the given provider implementation (SPI object) in it.",
            "Function": "aliases()",
            "Modifier and Type": "protected "
        },
        {
            "Comments": "Lists all the alias names of this keystore.",
            "Function": "containsAlias(String alias)",
            "Modifier and Type": "Enumeration<String>"
        },
        {
            "Comments": "Checks if the given alias exists in this keystore.",
            "Function": "deleteEntry(String alias)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Deletes the entry identified by the given alias from this keystore.",
            "Function": "entryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
            "Function": "getCertificate(String alias)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the certificate associated with the given alias.",
            "Function": "getCertificateAlias(Certificate cert)",
            "Modifier and Type": "Certificate"
        },
        {
            "Comments": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate.",
            "Function": "getCertificateChain(String alias)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns the certificate chain associated with the given alias.",
            "Function": "getCreationDate(String alias)",
            "Modifier and Type": "Certificate[]"
        },
        {
            "Comments": "Returns the creation date of the entry identified by the given alias.",
            "Function": "getDefaultType()",
            "Modifier and Type": "Date"
        },
        {
            "Comments": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists.",
            "Function": "getEntry(String alias,KeyStore.ProtectionParameter protParam)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Gets a keystore Entry for the specified alias with the specified protection parameter.",
            "Function": "getInstance(File file, char[] password)",
            "Modifier and Type": "KeyStore.Entry"
        },
        {
            "Comments": "Returns a loaded keystore object of the appropriate keystore type.",
            "Function": "getInstance(File file, KeyStore.LoadStoreParameter param)",
            "Modifier and Type": "static KeyStore"
        },
        {
            "Comments": "Returns a loaded keystore object of the appropriate keystore type.",
            "Function": "getInstance(String type)",
            "Modifier and Type": "static KeyStore"
        },
        {
            "Comments": "Returns a keystore object of the specified type.",
            "Function": "getInstance(String type, String provider)",
            "Modifier and Type": "static KeyStore"
        },
        {
            "Comments": "Returns a keystore object of the specified type.",
            "Function": "getInstance(String type, Provider provider)",
            "Modifier and Type": "static KeyStore"
        },
        {
            "Comments": "Returns a keystore object of the specified type.",
            "Function": "getKey(String alias,char[] password)",
            "Modifier and Type": "static KeyStore"
        },
        {
            "Comments": "Returns the key associated with the given alias, using the given password to recover it.",
            "Function": "getProvider()",
            "Modifier and Type": "Key"
        },
        {
            "Comments": "Returns the provider of this keystore.",
            "Function": "getType()",
            "Modifier and Type": "Provider"
        },
        {
            "Comments": "Returns the type of this keystore.",
            "Function": "isCertificateEntry(String alias)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.",
            "Function": "isKeyEntry(String alias)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
            "Function": "load(InputStream stream,char[] password)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Loads this KeyStore from the given input stream.",
            "Function": "load(KeyStore.LoadStoreParameter param)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Loads this keystore using the given LoadStoreParameter.",
            "Function": "setCertificateEntry(String alias, Certificate cert)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Assigns the given trusted certificate to the given alias.",
            "Function": "setEntry(String alias,KeyStore.Entry entry,KeyStore.ProtectionParameter protParam)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Saves a keystore Entry under the specified alias.",
            "Function": "setKeyEntry(String alias, byte[] key, Certificate[] chain)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Assigns the given key (that has already been protected) to the given alias.",
            "Function": "setKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Assigns the given key to the given alias, protecting it with the given password.",
            "Function": "size()",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Retrieves the number of entries in this keystore.",
            "Function": "store(OutputStream stream, char[] password)",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Stores this keystore to the given output stream, and protects its integrity with the given password.",
            "Function": "store(KeyStore.LoadStoreParameter param)",
            "Modifier and Type": "void"
        }
    ]
}