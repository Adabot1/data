{
    "API": [
        {
            "Comments": "A mutable builder for an IntStream.",
            "Function": "IntStream.Builder",
            "Modifier and Type": "static interface "
        },
        {
            "Comments": "Returns whether all elements of this stream match the provided predicate.",
            "Function": "allMatch(IntPredicate predicate)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns whether any elements of this stream match the provided predicate.",
            "Function": "anyMatch(IntPredicate predicate)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns a DoubleStream consisting of the elements of this stream, converted to double.",
            "Function": "asDoubleStream()",
            "Modifier and Type": "DoubleStream"
        },
        {
            "Comments": "Returns a LongStream consisting of the elements of this stream, converted to long.",
            "Function": "asLongStream()",
            "Modifier and Type": "LongStream"
        },
        {
            "Comments": "Returns an OptionalDouble describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty.",
            "Function": "average()",
            "Modifier and Type": "OptionalDouble"
        },
        {
            "Comments": "Returns a Stream consisting of the elements of this stream, each boxed to an Integer.",
            "Function": "boxed()",
            "Modifier and Type": "Stream<Integer>"
        },
        {
            "Comments": "Returns a builder for an IntStream.",
            "Function": "builder()",
            "Modifier and Type": "static IntStream.Builder"
        },
        {
            "Comments": "Performs a mutable reduction operation on the elements of this stream.",
            "Function": "collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R,R> combiner)",
            "Modifier and Type": "<R> R"
        },
        {
            "Comments": "Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream.",
            "Function": "concat(IntStream a,IntStream b)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns the count of elements in this stream.",
            "Function": "count()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns a stream consisting of the distinct elements of this stream.",
            "Function": "distinct()",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate.",
            "Function": "dropWhile(IntPredicate predicate)",
            "Modifier and Type": "default IntStream"
        },
        {
            "Comments": "Returns an empty sequential IntStream.",
            "Function": "empty()",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a stream consisting of the elements of this stream that match the given predicate.",
            "Function": "filter(IntPredicate predicate)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns an OptionalInt describing some element of the stream, or an empty OptionalInt if the stream is empty.",
            "Function": "findAny()",
            "Modifier and Type": "OptionalInt"
        },
        {
            "Comments": "Returns an OptionalInt describing the first element of this stream, or an empty OptionalInt if the stream is empty.",
            "Function": "findFirst()",
            "Modifier and Type": "OptionalInt"
        },
        {
            "Comments": "Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.",
            "Function": "flatMap(IntFunction<? extends IntStream> mapper)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Performs an action for each element of this stream.",
            "Function": "forEach(IntConsumer action)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order.",
            "Function": "forEachOrdered(IntConsumer action)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier.",
            "Function": "generate(IntSupplier s)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a sequential ordered IntStream produced by iterative application of the given next function to an initial element, conditioned on satisfying the given hasNext predicate.",
            "Function": "iterate(int seed, IntPredicate hasNext, IntUnaryOperator next)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.",
            "Function": "iterate(int seed, IntUnaryOperator f)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length.",
            "Function": "limit(long maxSize)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns a stream consisting of the results of applying the given function to the elements of this stream.",
            "Function": "map(IntUnaryOperator mapper)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream.",
            "Function": "mapToDouble(IntToDoubleFunction mapper)",
            "Modifier and Type": "DoubleStream"
        },
        {
            "Comments": "Returns a LongStream consisting of the results of applying the given function to the elements of this stream.",
            "Function": "mapToLong(IntToLongFunction mapper)",
            "Modifier and Type": "LongStream"
        },
        {
            "Comments": "Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream.",
            "Function": "mapToObj(IntFunction<? extends U> mapper)",
            "Modifier and Type": "<U> Stream<U>"
        },
        {
            "Comments": "Returns an OptionalInt describing the maximum element of this stream, or an empty optional if this stream is empty.",
            "Function": "max()",
            "Modifier and Type": "OptionalInt"
        },
        {
            "Comments": "Returns an OptionalInt describing the minimum element of this stream, or an empty optional if this stream is empty.",
            "Function": "min()",
            "Modifier and Type": "OptionalInt"
        },
        {
            "Comments": "Returns whether no elements of this stream match the provided predicate.",
            "Function": "noneMatch(IntPredicate predicate)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns a sequential IntStream containing a single element.",
            "Function": "of(int t)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a sequential ordered stream whose elements are the specified values.",
            "Function": "of(int... values)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.",
            "Function": "peek(IntConsumer action)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endExclusive (exclusive) by an incremental step of 1.",
            "Function": "range(int startInclusive, int endExclusive)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a sequential ordered IntStream from startInclusive (inclusive) to endInclusive (inclusive) by an incremental step of 1.",
            "Function": "rangeClosed(int startInclusive, int endInclusive)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation function, and returns the reduced value.",
            "Function": "reduce(int identity,IntBinaryOperator op)",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any.",
            "Function": "reduce(IntBinaryOperator op)",
            "Modifier and Type": "OptionalInt"
        },
        {
            "Comments": "Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.",
            "Function": "skip(long n)",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns a stream consisting of the elements of this stream in sorted order.",
            "Function": "sorted()",
            "Modifier and Type": "IntStream"
        },
        {
            "Comments": "Returns the sum of elements in this stream.",
            "Function": "sum()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns an IntSummaryStatistics describing various summary data about the elements of this stream.",
            "Function": "summaryStatistics()",
            "Modifier and Type": "IntSummaryStatistics"
        },
        {
            "Comments": "Returns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate.",
            "Function": "takeWhile(IntPredicate predicate)",
            "Modifier and Type": "default IntStream"
        },
        {
            "Comments": "Returns an array containing the elements of this stream.",
            "Function": "toArray()",
            "Modifier and Type": "int[]"
        }
    ]
}