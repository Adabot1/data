{
    "API": [
        {
            "Comments": "Creates a new AtomicBoolean with initial value false.",
            "Function": "compareAndExchange(boolean expectedValue,boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Creates a new AtomicBoolean with the given initial value.",
            "Function": "compareAndExchangeAcquire(boolean expectedValue, boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...).",
            "Function": "compareAndExchangeRelease(boolean expectedValue, boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...).",
            "Function": "compareAndSet(boolean expectedValue, boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...).",
            "Function": "get()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...).",
            "Function": "getAcquire()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "getAndSet(boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...).",
            "Function": "getOpaque()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...).",
            "Function": "getPlain()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...).",
            "Function": "lazySet(boolean newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.",
            "Function": "set(boolean newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
            "Function": "setOpaque(boolean newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...).",
            "Function": "setPlain(boolean newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...).",
            "Function": "setRelease(boolean newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.",
            "Function": "toString()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
            "Function": "weakCompareAndSet(boolean expectedValue, boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the String representation of the current value.",
            "Function": "weakCompareAndSetAcquire(boolean expectedValue,boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(boolean, boolean) and compareAndSet(boolean, boolean)).",
            "Function": "weakCompareAndSetPlain(boolean expectedValue,boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...).",
            "Function": "weakCompareAndSetRelease(boolean expectedValue,boolean newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...).",
            "Function": "weakCompareAndSetVolatile(boolean expectedValue, boolean newValue)",
            "Modifier and Type": "boolean"
        }
    ]
}