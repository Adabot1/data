{
    "API": [
        {
            "Comments": "Returns a fixed-size list backed by the specified array.",
            "Function": "asList(T... a)",
            "Modifier and Type": "static <T> List<T>"
        },
        {
            "Comments": "Searches the specified array of bytes for the specified value using the binary search algorithm.",
            "Function": "binarySearch(byte[] a,byte key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of bytes for the specified value using the binary search algorithm.",
            "Function": "binarySearch(byte[] a,int fromIndex,int toIndex,byte key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of chars for the specified value using the binary search algorithm.",
            "Function": "binarySearch(char[] a,char key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of chars for the specified value using the binary search algorithm.",
            "Function": "binarySearch(char[] a,int fromIndex,int toIndex,char key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of doubles for the specified value using the binary search algorithm.",
            "Function": "binarySearch(double[] a,double key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of doubles for the specified value using the binary search algorithm.",
            "Function": "binarySearch(double[] a,int fromIndex,int toIndex,double key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of floats for the specified value using the binary search algorithm.",
            "Function": "binarySearch(float[] a,float key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of floats for the specified value using the binary search algorithm.",
            "Function": "binarySearch(float[] a,int fromIndex,int toIndex,float key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of ints for the specified value using the binary search algorithm.",
            "Function": "binarySearch(int[] a,int key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of ints for the specified value using the binary search algorithm.",
            "Function": "binarySearch(int[] a,int fromIndex,int toIndex,int key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of longs for the specified value using the binary search algorithm.",
            "Function": "binarySearch(long[] a,int fromIndex,int toIndex,long key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of longs for the specified value using the binary search algorithm.",
            "Function": "binarySearch(long[] a,long key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array of shorts for the specified value using the binary search algorithm.",
            "Function": "binarySearch(short[] a,int fromIndex,int toIndex,short key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array of shorts for the specified value using the binary search algorithm.",
            "Function": "binarySearch(short[] a,short key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array for the specified object using the binary search algorithm.",
            "Function": "binarySearch(Object[] a,int fromIndex,int toIndex,Object key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches the specified array for the specified object using the binary search algorithm.",
            "Function": "binarySearch(Object[] a,Object key)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Searches a range of the specified array for the specified object using the binary search algorithm.",
            "Function": "binarySearch(T[] a,int fromIndex,int toIndex,T key,Comparator<? super T> c)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Searches the specified array for the specified object using the binary search algorithm.",
            "Function": "binarySearch(T[] a,T key,Comparator<? super T> c)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Compares two boolean arrays lexicographically.",
            "Function": "compare(boolean[] a, boolean[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two boolean arrays lexicographically over the specified ranges.",
            "Function": "compare(boolean[] a, int aFromIndex, int aToIndex, boolean[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two byte arrays lexicographically.",
            "Function": "compare(byte[] a, byte[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two byte arrays lexicographically over the specified ranges.",
            "Function": "compare(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two char arrays lexicographically.",
            "Function": "compare(char[] a, char[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two char arrays lexicographically over the specified ranges.",
            "Function": "compare(char[] a, int aFromIndex, int aToIndex, char[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two double arrays lexicographically.",
            "Function": "compare(double[] a, double[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two double arrays lexicographically over the specified ranges.",
            "Function": "compare(double[] a, int aFromIndex, int aToIndex, double[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two float arrays lexicographically.",
            "Function": "compare(float[] a, float[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two float arrays lexicographically over the specified ranges.",
            "Function": "compare(float[] a, int aFromIndex, int aToIndex, float[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two int arrays lexicographically.",
            "Function": "compare(int[] a, int[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two int arrays lexicographically over the specified ranges.",
            "Function": "compare(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two long arrays lexicographically over the specified ranges.",
            "Function": "compare(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two long arrays lexicographically.",
            "Function": "compare(long[] a, long[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two short arrays lexicographically over the specified ranges.",
            "Function": "compare(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two short arrays lexicographically.",
            "Function": "compare(short[] a, short[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two Object arrays lexicographically over the specified ranges.",
            "Function": "compare(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static <T extends Comparable<? super T>>int"
        },
        {
            "Comments": "Compares two Object arrays lexicographically over the specified ranges.",
            "Function": "compare(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex, Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Compares two Object arrays, within comparable elements, lexicographically.",
            "Function": "compare(T[] a, T[] b)",
            "Modifier and Type": "static <T extends Comparable<? super T>>int"
        },
        {
            "Comments": "Compares two Object arrays lexicographically using a specified comparator.",
            "Function": "compare(T[] a, T[] b, Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Compares two byte arrays lexicographically, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(byte[] a, byte[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two int arrays lexicographically, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(int[] a, int[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two long arrays lexicographically, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(long[] a, long[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Compares two short arrays lexicographically, numerically treating elements as unsigned.",
            "Function": "compareUnsigned(short[] a, short[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length.",
            "Function": "copyOf(boolean[] original,int newLength)",
            "Modifier and Type": "static boolean[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(byte[] original,int newLength)",
            "Modifier and Type": "static byte[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length.",
            "Function": "copyOf(char[] original,int newLength)",
            "Modifier and Type": "static char[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(double[] original,int newLength)",
            "Modifier and Type": "static double[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(float[] original,int newLength)",
            "Modifier and Type": "static float[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(int[] original,int newLength)",
            "Modifier and Type": "static int[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(long[] original,int newLength)",
            "Modifier and Type": "static long[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.",
            "Function": "copyOf(short[] original,int newLength)",
            "Modifier and Type": "static short[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.",
            "Function": "copyOf(T[] original,int newLength)",
            "Modifier and Type": "static <T> T[]"
        },
        {
            "Comments": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.",
            "Function": "copyOf(U[] original,int newLength,Class<? extends T[]> newType)",
            "Modifier and Type": "static <T,​U>T[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(boolean[] original, int from, int to)",
            "Modifier and Type": "static boolean[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(byte[] original, int from, int to)",
            "Modifier and Type": "static byte[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(char[] original, int from, int to)",
            "Modifier and Type": "static char[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(double[] original, int from, int to)",
            "Modifier and Type": "static double[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(float[] original, int from, int to)",
            "Modifier and Type": "static float[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(int[] original, int from, int to)",
            "Modifier and Type": "static int[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(long[] original, int from, int to)",
            "Modifier and Type": "static long[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(short[] original, int from, int to)",
            "Modifier and Type": "static short[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(T[] original, int from, int to)",
            "Modifier and Type": "static <T> T[]"
        },
        {
            "Comments": "Copies the specified range of the specified array into a new array.",
            "Function": "copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType)",
            "Modifier and Type": "static <T,​U>T[]"
        },
        {
            "Comments": "Returns true if the two specified arrays are deeply equal to one another.",
            "Function": "deepEquals(Object[] a1,Object[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns a hash code based on the \"deep contents\" of the specified array.",
            "Function": "deepHashCode(Object[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a string representation of the \"deep contents\" of the specified array.",
            "Function": "deepToString(Object[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns true if the two specified arrays of booleans are equal to one another.",
            "Function": "equals(boolean[] a,boolean[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another.",
            "Function": "equals(boolean[] a,int aFromIndex,int aToIndex,boolean[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of bytes are equal to one another.",
            "Function": "equals(byte[] a,byte[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another.",
            "Function": "equals(byte[] a,int aFromIndex,int aToIndex,byte[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of chars are equal to one another.",
            "Function": "equals(char[] a,char[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another.",
            "Function": "equals(char[] a,int aFromIndex,int aToIndex,char[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of doubles are equal to one another.",
            "Function": "equals(double[] a,double[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another.",
            "Function": "equals(double[] a,int aFromIndex,int aToIndex,double[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of floats are equal to one another.",
            "Function": "equals(float[] a,float[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another.",
            "Function": "equals(float[] a,int aFromIndex,int aToIndex,float[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of ints are equal to one another.",
            "Function": "equals(int[] a,int[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another.",
            "Function": "equals(int[] a,int aFromIndex,int aToIndex,int[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another.",
            "Function": "equals(long[] a,int aFromIndex,int aToIndex,long[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of longs are equal to one another.",
            "Function": "equals(long[] a,long[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another.",
            "Function": "equals(short[] a,int aFromIndex,int aToIndex,short[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of shorts are equal to one another.",
            "Function": "equals(short[] a,short[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another.",
            "Function": "equals(Object[] a,int aFromIndex,int aToIndex,Object[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of Objects are equal to one another.",
            "Function": "equals(Object[] a,Object[] a2)",
            "Modifier and Type": "static boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another.",
            "Function": "equals(T[] a,int aFromIndex,int aToIndex,T[] b,int bFromIndex,int bToIndex,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> boolean"
        },
        {
            "Comments": "Returns true if the two specified arrays of Objects are equal to one another.",
            "Function": "equals(T[] a,T[] a2,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> boolean"
        },
        {
            "Comments": "Assigns the specified boolean value to each element of the specified array of booleans.",
            "Function": "fill(boolean[] a,boolean val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified boolean value to each element of the specified range of the specified array of booleans.",
            "Function": "fill(boolean[] a,int fromIndex,int toIndex,boolean val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified byte value to each element of the specified array of bytes.",
            "Function": "fill(byte[] a,byte val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified byte value to each element of the specified range of the specified array of bytes.",
            "Function": "fill(byte[] a,int fromIndex,int toIndex,byte val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified char value to each element of the specified array of chars.",
            "Function": "fill(char[] a,char val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified char value to each element of the specified range of the specified array of chars.",
            "Function": "fill(char[] a,int fromIndex,int toIndex,char val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified double value to each element of the specified array of doubles.",
            "Function": "fill(double[] a,double val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified double value to each element of the specified range of the specified array of doubles.",
            "Function": "fill(double[] a,int fromIndex,int toIndex,double val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified float value to each element of the specified array of floats.",
            "Function": "fill(float[] a,float val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified float value to each element of the specified range of the specified array of floats.",
            "Function": "fill(float[] a,int fromIndex,int toIndex,float val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified int value to each element of the specified array of ints.",
            "Function": "fill(int[] a,int val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified int value to each element of the specified range of the specified array of ints.",
            "Function": "fill(int[] a,int fromIndex,int toIndex,int val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified long value to each element of the specified range of the specified array of longs.",
            "Function": "fill(long[] a,int fromIndex,int toIndex,long val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified long value to each element of the specified array of longs.",
            "Function": "fill(long[] a,long val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified short value to each element of the specified range of the specified array of shorts.",
            "Function": "fill(short[] a,int fromIndex,int toIndex,short val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified short value to each element of the specified array of shorts.",
            "Function": "fill(short[] a,short val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified Object reference to each element of the specified range of the specified array of Objects.",
            "Function": "fill(Object[] a,int fromIndex,int toIndex,Object val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Assigns the specified Object reference to each element of the specified array of Objects.",
            "Function": "fill(Object[] a,Object val)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(boolean[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(byte[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(char[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(double[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(float[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(int[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(long[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(short[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Returns a hash code based on the contents of the specified array.",
            "Function": "hashCode(Object[] a)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(boolean[] a,boolean[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(boolean[] a,int aFromIndex,int aToIndex,boolean[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(byte[] a,byte[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(byte[] a,int aFromIndex,int aToIndex,byte[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(char[] a,char[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(char[] a,int aFromIndex,int aToIndex,char[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(double[] a,double[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(double[] a,int aFromIndex,int aToIndex,double[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(float[] a,float[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(float[] a,int aFromIndex,int aToIndex,float[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(int[] a,int[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(int[] a,int aFromIndex,int aToIndex,int[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(long[] a,int aFromIndex,int aToIndex,long[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(long[] a,long[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(short[] a,int aFromIndex,int aToIndex,short[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(short[] a,short[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(Object[] a,int aFromIndex,int aToIndex,Object[] b,int bFromIndex,int bToIndex)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(Object[] a,Object[] b)",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(T[] a,int aFromIndex,int aToIndex,T[] b,int bFromIndex,int bToIndex,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found.",
            "Function": "mismatch(T[] a,T[] b,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> int"
        },
        {
            "Comments": "Performs parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.",
            "Function": "parallelPrefix(double[] array,int fromIndex,int toIndex,DoubleBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function.",
            "Function": "parallelPrefix(double[] array,DoubleBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Performs parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.",
            "Function": "parallelPrefix(int[] array,int fromIndex,int toIndex,IntBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function.",
            "Function": "parallelPrefix(int[] array,IntBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Performs parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.",
            "Function": "parallelPrefix(long[] array,int fromIndex,int toIndex,LongBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function.",
            "Function": "parallelPrefix(long[] array,LongBinaryOperator op)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Performs parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.",
            "Function": "parallelPrefix(T[] array,int fromIndex,int toIndex,BinaryOperator<T> op)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Cumulates, in parallel, each element of the given array in place, using the supplied function.",
            "Function": "parallelPrefix(T[] array,BinaryOperator<T> op)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element.",
            "Function": "parallelSetAll(double[] array,IntToDoubleFunction generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element.",
            "Function": "parallelSetAll(int[] array,IntUnaryOperator generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element.",
            "Function": "parallelSetAll(long[] array,IntToLongFunction generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element.",
            "Function": "parallelSetAll(T[] array,IntFunction<? extends T> generator)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(byte[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(byte[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(char[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(char[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(double[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(double[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(float[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(float[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(int[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(int[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(long[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(long[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "parallelSort(short[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending numerical order.",
            "Function": "parallelSort(short[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array of objects into ascending order, according to the natural ordering of its elements.",
            "Function": "parallelSort(T[] a)",
            "Modifier and Type": "static <T extends Comparable<? super T>>void"
        },
        {
            "Comments": "Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements.",
            "Function": "parallelSort(T[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static <T extends Comparable<? super T>>void"
        },
        {
            "Comments": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.",
            "Function": "parallelSort(T[] a,int fromIndex,int toIndex,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Sorts the specified array of objects according to the order induced by the specified comparator.",
            "Function": "parallelSort(T[] a,Comparator<? super T> cmp)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Set all elements of the specified array, using the provided generator function to compute each element.",
            "Function": "setAll(double[] array,IntToDoubleFunction generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, using the provided generator function to compute each element.",
            "Function": "setAll(int[] array,IntUnaryOperator generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, using the provided generator function to compute each element.",
            "Function": "setAll(long[] array,IntToLongFunction generator)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Set all elements of the specified array, using the provided generator function to compute each element.",
            "Function": "setAll(T[] array,IntFunction<? extends T> generator)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(byte[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(byte[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(char[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(char[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(double[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(double[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(float[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(float[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(int[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(int[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(long[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(long[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array into ascending numerical order.",
            "Function": "sort(short[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the array into ascending order.",
            "Function": "sort(short[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified array of objects into ascending order, according to the natural ordering of its elements.",
            "Function": "sort(Object[] a)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements.",
            "Function": "sort(Object[] a,int fromIndex,int toIndex)",
            "Modifier and Type": "static void"
        },
        {
            "Comments": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.",
            "Function": "sort(T[] a,int fromIndex,int toIndex,Comparator<? super T> c)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Sorts the specified array of objects according to the order induced by the specified comparator.",
            "Function": "sort(T[] a,Comparator<? super T> c)",
            "Modifier and Type": "static <T> void"
        },
        {
            "Comments": "Returns a Spliterator.OfDouble covering all of the specified array.",
            "Function": "spliterator(double[] array)",
            "Modifier and Type": "static Spliterator.OfDouble"
        },
        {
            "Comments": "Returns a Spliterator.OfDouble covering the specified range of the specified array.",
            "Function": "spliterator(double[] array, int startInclusive, int endExclusive)",
            "Modifier and Type": "static Spliterator.OfDouble"
        },
        {
            "Comments": "Returns a Spliterator.OfInt covering all of the specified array.",
            "Function": "spliterator(int[] array)",
            "Modifier and Type": "static Spliterator.OfInt"
        },
        {
            "Comments": "Returns a Spliterator.OfInt covering the specified range of the specified array.",
            "Function": "spliterator(int[] array, int startInclusive, int endExclusive)",
            "Modifier and Type": "static Spliterator.OfInt"
        },
        {
            "Comments": "Returns a Spliterator.OfLong covering all of the specified array.",
            "Function": "spliterator(long[] array)",
            "Modifier and Type": "static Spliterator.OfLong"
        },
        {
            "Comments": "Returns a Spliterator.OfLong covering the specified range of the specified array.",
            "Function": "spliterator(long[] array, int startInclusive, int endExclusive)",
            "Modifier and Type": "static Spliterator.OfLong"
        },
        {
            "Comments": "Returns a Spliterator covering all of the specified array.",
            "Function": "spliterator(T[] array)",
            "Modifier and Type": "static <T> Spliterator<T>"
        },
        {
            "Comments": "Returns a Spliterator covering the specified range of the specified array.",
            "Function": "spliterator(T[] array, int startInclusive, int endExclusive)",
            "Modifier and Type": "static <T> Spliterator<T>"
        },
        {
            "Comments": "Returns a sequential DoubleStream with the specified array as its source.",
            "Function": "stream(double[] array)",
            "Modifier and Type": "static DoubleStream"
        },
        {
            "Comments": "Returns a sequential DoubleStream with the specified range of the specified array as its source.",
            "Function": "stream(double[] array,int startInclusive,int endExclusive)",
            "Modifier and Type": "static DoubleStream"
        },
        {
            "Comments": "Returns a sequential IntStream with the specified array as its source.",
            "Function": "stream(int[] array)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a sequential IntStream with the specified range of the specified array as its source.",
            "Function": "stream(int[] array,int startInclusive,int endExclusive)",
            "Modifier and Type": "static IntStream"
        },
        {
            "Comments": "Returns a sequential LongStream with the specified array as its source.",
            "Function": "stream(long[] array)",
            "Modifier and Type": "static LongStream"
        },
        {
            "Comments": "Returns a sequential LongStream with the specified range of the specified array as its source.",
            "Function": "stream(long[] array,int startInclusive,int endExclusive)",
            "Modifier and Type": "static LongStream"
        },
        {
            "Comments": "Returns a sequential Stream with the specified array as its source.",
            "Function": "stream(T[] array)",
            "Modifier and Type": "static <T> Stream<T>"
        },
        {
            "Comments": "Returns a sequential Stream with the specified range of the specified array as its source.",
            "Function": "stream(T[] array,int startInclusive,int endExclusive)",
            "Modifier and Type": "static <T> Stream<T>"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(boolean[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(byte[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(char[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(double[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(float[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(int[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(long[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(short[] a)",
            "Modifier and Type": "static String"
        },
        {
            "Comments": "Returns a string representation of the contents of the specified array.",
            "Function": "toString(Object[] a)",
            "Modifier and Type": "static String"
        }
    ]
}