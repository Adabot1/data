{
    "API": [
        {
            "Comments": "Constructs with the limits and the corresponding formats.",
            "Function": "applyPattern(String newPattern)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Constructs with limits and corresponding formats based on the pattern.",
            "Function": "clone()",
            "Modifier and Type": "Object"
        },
        {
            "Comments": "Sets the pattern.",
            "Function": "equals(Object obj)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Overrides Cloneable",
            "Function": "format(double number,StringBuffer toAppendTo,FieldPosition status)",
            "Modifier and Type": "StringBuffer"
        },
        {
            "Comments": "Equality comparison between two",
            "Function": "format(long number,StringBuffer toAppendTo,FieldPosition status)",
            "Modifier and Type": "StringBuffer"
        },
        {
            "Comments": "Returns pattern with formatted double.",
            "Function": "getFormats()",
            "Modifier and Type": "Object[]"
        },
        {
            "Comments": "Specialization of format.",
            "Function": "getLimits()",
            "Modifier and Type": "double[]"
        },
        {
            "Comments": "Get the formats passed in the constructor.",
            "Function": "hashCode()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Get the limits passed in the constructor.",
            "Function": "nextDouble(double d)",
            "Modifier and Type": "static double"
        },
        {
            "Comments": "Generates a hash code for the message format object.",
            "Function": "nextDouble(double d,boolean positive)",
            "Modifier and Type": "static double"
        },
        {
            "Comments": "Finds the least double greater than d.",
            "Function": "parse(String text, ParsePosition status)",
            "Modifier and Type": "Number"
        },
        {
            "Comments": "Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false).",
            "Function": "previousDouble(double d)",
            "Modifier and Type": "static double"
        },
        {
            "Comments": "Parses a Number from the input text.",
            "Function": "setChoices(double[] limits,String[] formats)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Finds the greatest double less than d.",
            "Function": "toPattern()",
            "Modifier and Type": "String"
        }
    ]
}