{
    "API": [
        {
            "Comments": "Constant for a mode of start or end time specified as standard time.",
            "Function": "STANDARD_TIME",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Constant for a mode of start or end time specified as UTC.",
            "Function": "UTC_TIME",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Constant for a mode of start or end time specified as wall clock time.",
            "Function": "WALL_TIME",
            "Modifier and Type": "static int"
        },
        {
            "Comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule.",
            "Function": "clone()",
            "Modifier and Type": "Object"
        },
        {
            "Comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time.",
            "Function": "equals(Object obj)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time.",
            "Function": "getDSTSavings()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time.",
            "Function": "getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns a clone of this SimpleTimeZone instance.",
            "Function": "getOffset(long date)",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Compares the equality of two SimpleTimeZone objects.",
            "Function": "getRawOffset()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.",
            "Function": "hashCode()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time.",
            "Function": "hasSameRules(TimeZone other)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the offset of this time zone from UTC at the given time.",
            "Function": "inDaylightTime(Date date)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Gets the GMT offset for this time zone.",
            "Function": "observesDaylightTime()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Generates the hash code for the SimpleDateFormat object.",
            "Function": "setDSTSavings(int millisSavedDuringDST)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns true if this zone has the same rules and offset as another zone.",
            "Function": "setEndRule(int endMonth,int endDay,int endTime)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Queries if the given date is in daylight saving time.",
            "Function": "setEndRule(int endMonth,int endDay,int endDayOfWeek,int endTime)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns true if this SimpleTimeZone observes Daylight Saving Time.",
            "Function": "setEndRule(int endMonth,int endDay,int endDayOfWeek,int endTime,boolean after)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.",
            "Function": "setRawOffset(int offsetMillis)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the daylight saving time end rule to a fixed date within a month.",
            "Function": "setStartRule(int startMonth,int startDay,int startTime)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the daylight saving time end rule.",
            "Function": "setStartRule(int startMonth,int startDay,int startDayOfWeek,int startTime)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.",
            "Function": "setStartRule(int startMonth,int startDay,int startDayOfWeek,int startTime,boolean after)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the base time zone offset to GMT.",
            "Function": "setStartYear(int year)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the daylight saving time start rule to a fixed date within a month.",
            "Function": "toString()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Sets the daylight saving time start rule.",
            "Function": "useDaylightTime()",
            "Modifier and Type": "boolean"
        }
    ]
}