{
    "API": [
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "close()",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "delimiter()",
            "Modifier and Type": "Pattern"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "findAll(String patString)",
            "Modifier and Type": "Stream<MatchResult>"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified input stream.",
            "Function": "findAll(Pattern pattern)",
            "Modifier and Type": "Stream<MatchResult>"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified input stream.",
            "Function": "findInLine(String pattern)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified input stream.",
            "Function": "findInLine(Pattern pattern)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified source.",
            "Function": "findWithinHorizon(String pattern, int horizon)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified string.",
            "Function": "findWithinHorizon(Pattern pattern, int horizon)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified channel.",
            "Function": "hasNext()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified channel.",
            "Function": "hasNext(String pattern)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified channel.",
            "Function": "hasNext(Pattern pattern)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "hasNextBigDecimal()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "hasNextBigInteger()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Constructs a new Scanner that produces values scanned from the specified file.",
            "Function": "hasNextBigInteger(int radix)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Closes this scanner.",
            "Function": "hasNextBoolean()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns the Pattern this Scanner is currently using to match delimiters.",
            "Function": "hasNextByte()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns a stream of match results that match the provided pattern string.",
            "Function": "hasNextByte(int radix)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns a stream of match results from this scanner.",
            "Function": "hasNextDouble()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.",
            "Function": "hasNextFloat()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Attempts to find the next occurrence of the specified pattern ignoring delimiters.",
            "Function": "hasNextInt()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.",
            "Function": "hasNextInt(int radix)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Attempts to find the next occurrence of the specified pattern.",
            "Function": "hasNextLine()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if this scanner has another token in its input.",
            "Function": "hasNextLong()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the next token matches the pattern constructed from the specified string.",
            "Function": "hasNextLong(int radix)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the next complete token matches the specified pattern.",
            "Function": "hasNextShort()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the nextBigDecimal() method.",
            "Function": "hasNextShort(int radix)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the nextBigInteger() method.",
            "Function": "ioException()",
            "Modifier and Type": "IOException"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the nextBigInteger() method.",
            "Function": "locale()",
            "Modifier and Type": "Locale"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string \"true|false\".",
            "Function": "match()",
            "Modifier and Type": "MatchResult"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextByte() method.",
            "Function": "next()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextByte() method.",
            "Function": "next(String pattern)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a double value using the nextDouble() method.",
            "Function": "next(Pattern pattern)",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a float value using the nextFloat() method.",
            "Function": "nextBigDecimal()",
            "Modifier and Type": "BigDecimal"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextInt() method.",
            "Function": "nextBigInteger()",
            "Modifier and Type": "BigInteger"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextInt() method.",
            "Function": "nextBigInteger(int radix)",
            "Modifier and Type": "BigInteger"
        },
        {
            "Comments": "Returns true if there is another line in the input of this scanner.",
            "Function": "nextBoolean()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextLong() method.",
            "Function": "nextByte()",
            "Modifier and Type": "byte"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextLong() method.",
            "Function": "nextByte(int radix)",
            "Modifier and Type": "byte"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextShort() method.",
            "Function": "nextDouble()",
            "Modifier and Type": "double"
        },
        {
            "Comments": "Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextShort() method.",
            "Function": "nextFloat()",
            "Modifier and Type": "float"
        },
        {
            "Comments": "Returns the IOException last thrown by this Scanner's underlying Readable.",
            "Function": "nextInt()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns this scanner's locale.",
            "Function": "nextInt(int radix)",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Returns the match result of the last scanning operation performed by this scanner.",
            "Function": "nextLine()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Finds and returns the next complete token from this scanner.",
            "Function": "nextLong()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the next token if it matches the pattern constructed from the specified string.",
            "Function": "nextLong(int radix)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the next token if it matches the specified pattern.",
            "Function": "nextShort()",
            "Modifier and Type": "short"
        },
        {
            "Comments": "Scans the next token of the input as a BigDecimal.",
            "Function": "nextShort(int radix)",
            "Modifier and Type": "short"
        },
        {
            "Comments": "Scans the next token of the input as a BigInteger.",
            "Function": "radix()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Scans the next token of the input as a BigInteger.",
            "Function": "remove()",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Scans the next token of the input into a boolean value and returns that value.",
            "Function": "reset()",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Scans the next token of the input as a byte.",
            "Function": "skip(String pattern)",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Scans the next token of the input as a byte.",
            "Function": "skip(Pattern pattern)",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Scans the next token of the input as a double.",
            "Function": "tokens()",
            "Modifier and Type": "Stream<String>"
        },
        {
            "Comments": "Scans the next token of the input as a float.",
            "Function": "toString()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Scans the next token of the input as an int.",
            "Function": "useDelimiter(String pattern)",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Scans the next token of the input as an int.",
            "Function": "useDelimiter(Pattern pattern)",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Advances this scanner past the current line and returns the input that was skipped.",
            "Function": "useLocale(Locale locale)",
            "Modifier and Type": "Scanner"
        },
        {
            "Comments": "Scans the next token of the input as a long.",
            "Function": "useRadix(int radix)",
            "Modifier and Type": "Scanner"
        }
    ]
}