{
    "API": [
        {
            "Comments": "Creates a new ScheduledThreadPoolExecutor with the given core pool size.",
            "Function": "decorateTask(Runnable runnable,RunnableScheduledFuture<V> task)",
            "Modifier and Type": "protected <V> RunnableScheduledFuture<V>"
        },
        {
            "Comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
            "Function": "decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task)",
            "Modifier and Type": "protected <V> RunnableScheduledFuture<V>"
        },
        {
            "Comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
            "Function": "execute(Runnable command)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
            "Function": "getContinueExistingPeriodicTasksAfterShutdownPolicy()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Modifies or replaces the task used to execute a runnable.",
            "Function": "getExecuteExistingDelayedTasksAfterShutdownPolicy()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Modifies or replaces the task used to execute a callable.",
            "Function": "getQueue()",
            "Modifier and Type": "BlockingQueue<Runnable>"
        },
        {
            "Comments": "Executes command with zero required delay.",
            "Function": "getRemoveOnCancelPolicy()",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.",
            "Function": "schedule(Runnable command,long delay,TimeUnit unit)",
            "Modifier and Type": "ScheduledFuture<?>"
        },
        {
            "Comments": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.",
            "Function": "schedule(Callable<V> callable,long delay,TimeUnit unit)",
            "Modifier and Type": "<V> ScheduledFuture<V>"
        },
        {
            "Comments": "Returns the task queue used by this executor.",
            "Function": "scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",
            "Modifier and Type": "ScheduledFuture<?>"
        },
        {
            "Comments": "Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.",
            "Function": "scheduleWithFixedDelay(Runnable command,long initialDelay,long delay,TimeUnit unit)",
            "Modifier and Type": "ScheduledFuture<?>"
        },
        {
            "Comments": "Submits a one-shot task that becomes enabled after the given delay.",
            "Function": "setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Submits a value-returning one-shot task that becomes enabled after the given delay.",
            "Function": "setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on.",
            "Function": "setRemoveOnCancelPolicy(boolean value)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.",
            "Function": "shutdown()",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.",
            "Function": "shutdownNow()",
            "Modifier and Type": "List<Runnable>"
        },
        {
            "Comments": "Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.",
            "Function": "submit(Runnable task)",
            "Modifier and Type": "Future<?>"
        },
        {
            "Comments": "Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.",
            "Function": "submit(Runnable task,T result)",
            "Modifier and Type": "<T> Future<T>"
        },
        {
            "Comments": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
            "Function": "submit(Callable<T> task)",
            "Modifier and Type": "<T> Future<T>"
        }
    ]
}