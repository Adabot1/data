{
    "API": [
        {
            "Comments": "Creates a new AtomicLong with initial value 0.",
            "Function": "accumulateAndGet(long x,LongBinaryOperator accumulatorFunction)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Creates a new AtomicLong with the given initial value.",
            "Function": "addAndGet(long delta)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the updated value.",
            "Function": "compareAndExchange(long expectedValue,long newValue)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "compareAndExchangeAcquire(long expectedValue, long newValue)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...).",
            "Function": "compareAndExchangeRelease(long expectedValue, long newValue)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...).",
            "Function": "compareAndSet(long expectedValue, long newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...).",
            "Function": "decrementAndGet()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...).",
            "Function": "doubleValue()",
            "Modifier and Type": "double"
        },
        {
            "Comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "floatValue()",
            "Modifier and Type": "float"
        },
        {
            "Comments": "Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "get()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "getAcquire()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "getAndAccumulate(long x,LongBinaryOperator accumulatorFunction)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...).",
            "Function": "getAndAdd(long delta)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function to the current and given values, returning the previous value.",
            "Function": "getAndDecrement()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically adds the given value to the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "getAndIncrement()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically decrements the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "getAndSet(long newValue)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "getAndUpdate(LongUnaryOperator updateFunction)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...).",
            "Function": "getOpaque()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the previous value.",
            "Function": "getPlain()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...).",
            "Function": "incrementAndGet()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.",
            "Function": "intValue()",
            "Modifier and Type": "int"
        },
        {
            "Comments": "Atomically increments the current value, with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).",
            "Function": "lazySet(long newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "longValue()",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
            "Function": "set(long newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
            "Function": "setOpaque(long newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...).",
            "Function": "setPlain(long newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...).",
            "Function": "setRelease(long newValue)",
            "Modifier and Type": "void"
        },
        {
            "Comments": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.",
            "Function": "toString()",
            "Modifier and Type": "String"
        },
        {
            "Comments": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
            "Function": "updateAndGet(LongUnaryOperator updateFunction)",
            "Modifier and Type": "long"
        },
        {
            "Comments": "Returns the String representation of the current value.",
            "Function": "weakCompareAndSet(long expectedValue, long newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of applying the given function, returning the updated value.",
            "Function": "weakCompareAndSetAcquire(long expectedValue,long newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Deprecated.This method has plain memory effects but the method name implies volatile memory effects (see methods such as compareAndExchange(long, long) and compareAndSet(long, long)).",
            "Function": "weakCompareAndSetPlain(long expectedValue,long newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...).",
            "Function": "weakCompareAndSetRelease(long expectedValue,long newValue)",
            "Modifier and Type": "boolean"
        },
        {
            "Comments": "Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...).",
            "Function": "weakCompareAndSetVolatile(long expectedValue, long newValue)",
            "Modifier and Type": "boolean"
        }
    ]
}