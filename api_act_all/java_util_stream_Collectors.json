[{"parameters":["java.util.Comparator<? super T>"],"class":"java.util.stream.Collectors","function":"maxBy"},{"parameters":["java.util.Comparator<? super T>"],"class":"java.util.stream.Collectors","function":"minBy"},{"parameters":[],"class":"java.util.stream.Collectors","function":"toList"},{"parameters":["java.util.function.Supplier<C>"],"class":"java.util.stream.Collectors","function":"toCollection"},{"parameters":[],"class":"java.util.stream.Collectors","function":"toUnmodifiableList"},{"parameters":[],"class":"java.util.stream.Collectors","function":"toUnmodifiableSet"},{"parameters":["interface java.lang.CharSequence"],"class":"java.util.stream.Collectors","function":"joining"},{"parameters":[],"class":"java.util.stream.Collectors","function":"joining"},{"parameters":["interface java.lang.CharSequence","interface java.lang.CharSequence","interface java.lang.CharSequence"],"class":"java.util.stream.Collectors","function":"joining"},{"parameters":["java.util.function.Function<? super T, ? extends U>","java.util.stream.Collector<? super U, A, R>"],"class":"java.util.stream.Collectors","function":"mapping"},{"parameters":["java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends U>>","java.util.stream.Collector<? super U, A, R>"],"class":"java.util.stream.Collectors","function":"flatMapping"},{"parameters":["java.util.function.Predicate<? super T>","java.util.stream.Collector<? super T, A, R>"],"class":"java.util.stream.Collectors","function":"filtering"},{"parameters":["java.util.stream.Collector<T, A, R>","java.util.function.Function<R, RR>"],"class":"java.util.stream.Collectors","function":"collectingAndThen"},{"parameters":[],"class":"java.util.stream.Collectors","function":"counting"},{"parameters":["java.util.function.ToIntFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summingInt"},{"parameters":["java.util.function.ToLongFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summingLong"},{"parameters":["java.util.function.ToDoubleFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summingDouble"},{"parameters":["java.util.function.ToIntFunction<? super T>"],"class":"java.util.stream.Collectors","function":"averagingInt"},{"parameters":["java.util.function.ToLongFunction<? super T>"],"class":"java.util.stream.Collectors","function":"averagingLong"},{"parameters":["java.util.function.ToDoubleFunction<? super T>"],"class":"java.util.stream.Collectors","function":"averagingDouble"},{"parameters":["T","java.util.function.BinaryOperator<T>"],"class":"java.util.stream.Collectors","function":"reducing"},{"parameters":["java.util.function.BinaryOperator<T>"],"class":"java.util.stream.Collectors","function":"reducing"},{"parameters":["U","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>"],"class":"java.util.stream.Collectors","function":"reducing"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.stream.Collector<? super T, A, D>"],"class":"java.util.stream.Collectors","function":"groupingBy"},{"parameters":["java.util.function.Function<? super T, ? extends K>"],"class":"java.util.stream.Collectors","function":"groupingBy"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Supplier<M>","java.util.stream.Collector<? super T, A, D>"],"class":"java.util.stream.Collectors","function":"groupingBy"},{"parameters":["java.util.function.Function<? super T, ? extends K>"],"class":"java.util.stream.Collectors","function":"groupingByConcurrent"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.stream.Collector<? super T, A, D>"],"class":"java.util.stream.Collectors","function":"groupingByConcurrent"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Supplier<M>","java.util.stream.Collector<? super T, A, D>"],"class":"java.util.stream.Collectors","function":"groupingByConcurrent"},{"parameters":["java.util.function.Predicate<? super T>","java.util.stream.Collector<? super T, A, D>"],"class":"java.util.stream.Collectors","function":"partitioningBy"},{"parameters":["java.util.function.Predicate<? super T>"],"class":"java.util.stream.Collectors","function":"partitioningBy"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>"],"class":"java.util.stream.Collectors","function":"toUnmodifiableMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>"],"class":"java.util.stream.Collectors","function":"toUnmodifiableMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>"],"class":"java.util.stream.Collectors","function":"toConcurrentMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>","java.util.function.Supplier<M>"],"class":"java.util.stream.Collectors","function":"toConcurrentMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>"],"class":"java.util.stream.Collectors","function":"toConcurrentMap"},{"parameters":["java.util.function.ToIntFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summarizingInt"},{"parameters":["java.util.function.ToLongFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summarizingLong"},{"parameters":["java.util.function.ToDoubleFunction<? super T>"],"class":"java.util.stream.Collectors","function":"summarizingDouble"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>"],"class":"java.util.stream.Collectors","function":"toMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>","java.util.function.Supplier<M>"],"class":"java.util.stream.Collectors","function":"toMap"},{"parameters":["java.util.function.Function<? super T, ? extends K>","java.util.function.Function<? super T, ? extends U>","java.util.function.BinaryOperator<U>"],"class":"java.util.stream.Collectors","function":"toMap"},{"parameters":[],"class":"java.util.stream.Collectors","function":"toSet"},{"parameters":["long"],"class":"java.util.stream.Collectors","function":"wait"},{"parameters":["long","int"],"class":"java.util.stream.Collectors","function":"wait"},{"parameters":[],"class":"java.util.stream.Collectors","function":"wait"},{"parameters":["class java.lang.Object"],"class":"java.util.stream.Collectors","function":"equals"},{"parameters":[],"class":"java.util.stream.Collectors","function":"toString"},{"parameters":[],"class":"java.util.stream.Collectors","function":"hashCode"},{"parameters":[],"class":"java.util.stream.Collectors","function":"getClass"},{"parameters":[],"class":"java.util.stream.Collectors","function":"notify"},{"parameters":[],"class":"java.util.stream.Collectors","function":"notifyAll"}]